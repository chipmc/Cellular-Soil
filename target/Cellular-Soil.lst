
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Soil/target/Cellular-Soil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005808  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08085820  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000f0  20000400  08085824  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000768  200004f0  200004f0  000404f0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08085914  08085914  00035914  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  0808593c  0808593c  0003593c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000ba3fe  00000000  00000000  00035940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00011e51  00000000  00000000  000efd3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016cf1  00000000  00000000  00101b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000023c0  00000000  00000000  00118880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003858  00000000  00000000  0011ac40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029642  00000000  00000000  0011e498  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002a3de  00000000  00000000  00147ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a9526  00000000  00000000  00171eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c900  00000000  00000000  0021b3e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	b0 4f 08 08                                         .O..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f004 fafd 	bl	808462c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f004 fb02 	bl	8084642 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08085824 	.word	0x08085824
 808004c:	200004f0 	.word	0x200004f0
 8080050:	200004f0 	.word	0x200004f0
 8080054:	20000c58 	.word	0x20000c58
 8080058:	20000c58 	.word	0x20000c58

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f002 fff1 	bl	8083044 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	080857d8 	.word	0x080857d8
 8080084:	08085814 	.word	0x08085814

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 bda4 	b.w	8080bd4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fa5b 	bl	8080548 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f002 bf97 	b.w	8082fc8 <_post_loop>

0808009a <_Znwj>:
 808009a:	f001 bc07 	b.w	80818ac <malloc>

0808009e <_ZdlPv>:
 808009e:	f001 bc0d 	b.w	80818bc <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <_Z11watchdogISRv>:
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void watchdogISR() {
  watchDogFlag = true;
 80800b4:	4b01      	ldr	r3, [pc, #4]	; (80800bc <_Z11watchdogISRv+0x8>)
 80800b6:	2201      	movs	r2, #1
 80800b8:	701a      	strb	r2, [r3, #0]
 80800ba:	4770      	bx	lr
 80800bc:	200005c9 	.word	0x200005c9

080800c0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
 80800c0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80800c2:	4904      	ldr	r1, [pc, #16]	; (80800d4 <_Z10measureNow6String+0x14>)
 80800c4:	f002 fcfd 	bl	8082ac2 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80800c8:	b118      	cbz	r0, 80800d2 <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
 80800ca:	4b03      	ldr	r3, [pc, #12]	; (80800d8 <_Z10measureNow6String+0x18>)
 80800cc:	2203      	movs	r2, #3
 80800ce:	701a      	strb	r2, [r3, #0]
    return 1;
 80800d0:	2001      	movs	r0, #1
  }
  else return 0;
}
 80800d2:	bd08      	pop	{r3, pc}
 80800d4:	08085428 	.word	0x08085428
 80800d8:	20000531 	.word	0x20000531

080800dc <_ZN11EEPROMClass4readEi.isra.15>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80800dc:	f001 b9a2 	b.w	8081424 <HAL_EEPROM_Read>

080800e0 <_ZN11EEPROMClass5writeEih.isra.16>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 80800e0:	f001 b9a8 	b.w	8081434 <HAL_EEPROM_Write>

080800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80800e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80800e6:	4605      	mov	r5, r0
 80800e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80800ec:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800ee:	f88d 3000 	strb.w	r3, [sp]
 80800f2:	233c      	movs	r3, #60	; 0x3c
 80800f4:	f001 fed0 	bl	8081e98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80800f8:	4628      	mov	r0, r5
 80800fa:	b003      	add	sp, #12
 80800fc:	bd30      	pop	{r4, r5, pc}
	...

08080100 <_Z17getSignalStrengthv>:

  return 1;
}

void getSignalStrength()
{
 8080100:	b530      	push	{r4, r5, lr}
 8080102:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 8080104:	4910      	ldr	r1, [pc, #64]	; (8080148 <_Z17getSignalStrengthv+0x48>)
 8080106:	a804      	add	r0, sp, #16
 8080108:	f001 fc7c 	bl	8081a04 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 808010c:	a804      	add	r0, sp, #16
 808010e:	f001 fcd4 	bl	8081aba <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080112:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 8080114:	a804      	add	r0, sp, #16
 8080116:	f001 fd2f 	bl	8081b78 <_ZNK14CellularSignal11getStrengthEv>
 808011a:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 808011c:	a804      	add	r0, sp, #16
 808011e:	f001 fd13 	bl	8081b48 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080122:	f003 fb8d 	bl	8083840 <__aeabi_f2d>
 8080126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808012a:	4628      	mov	r0, r5
 808012c:	f003 fb88 	bl	8083840 <__aeabi_f2d>
 8080130:	e9cd 0100 	strd	r0, r1, [sp]
 8080134:	4b05      	ldr	r3, [pc, #20]	; (808014c <_Z17getSignalStrengthv+0x4c>)
 8080136:	4a06      	ldr	r2, [pc, #24]	; (8080150 <_Z17getSignalStrengthv+0x50>)
 8080138:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 808013c:	2140      	movs	r1, #64	; 0x40
 808013e:	4805      	ldr	r0, [pc, #20]	; (8080154 <_Z17getSignalStrengthv+0x54>)
 8080140:	f001 fbdc 	bl	80818fc <snprintf>
}
 8080144:	b00f      	add	sp, #60	; 0x3c
 8080146:	bd30      	pop	{r4, r5, pc}
 8080148:	20000604 	.word	0x20000604
 808014c:	20000418 	.word	0x20000418
 8080150:	08085004 	.word	0x08085004
 8080154:	20000544 	.word	0x20000544

08080158 <_Z16takeMeasurementsv>:
  else Particle.publish("Ubidots Hook", dataCopy,PRIVATE);       // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
 8080158:	b507      	push	{r0, r1, r2, lr}
  // Read values from the sensor
  temperatureInC = sht1x.readTemperatureC();
 808015a:	4833      	ldr	r0, [pc, #204]	; (8080228 <_Z16takeMeasurementsv+0xd0>)
 808015c:	f000 ffee 	bl	808113c <_ZN5SHT1x16readTemperatureCEv>
 8080160:	4b32      	ldr	r3, [pc, #200]	; (808022c <_Z16takeMeasurementsv+0xd4>)
 8080162:	6018      	str	r0, [r3, #0]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", temperatureInC);
 8080164:	f003 fb6c 	bl	8083840 <__aeabi_f2d>
 8080168:	4a31      	ldr	r2, [pc, #196]	; (8080230 <_Z16takeMeasurementsv+0xd8>)
 808016a:	e9cd 0100 	strd	r0, r1, [sp]
 808016e:	2110      	movs	r1, #16
 8080170:	4830      	ldr	r0, [pc, #192]	; (8080234 <_Z16takeMeasurementsv+0xdc>)
 8080172:	f001 fbc3 	bl	80818fc <snprintf>

  relativeHumidity = sht1x.readHumidity();
 8080176:	482c      	ldr	r0, [pc, #176]	; (8080228 <_Z16takeMeasurementsv+0xd0>)
 8080178:	f000 fff2 	bl	8081160 <_ZN5SHT1x12readHumidityEv>
 808017c:	4b2e      	ldr	r3, [pc, #184]	; (8080238 <_Z16takeMeasurementsv+0xe0>)
 808017e:	6018      	str	r0, [r3, #0]
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", relativeHumidity);
 8080180:	f003 fb5e 	bl	8083840 <__aeabi_f2d>
 8080184:	4a2d      	ldr	r2, [pc, #180]	; (808023c <_Z16takeMeasurementsv+0xe4>)
 8080186:	e9cd 0100 	strd	r0, r1, [sp]
 808018a:	2110      	movs	r1, #16
 808018c:	482c      	ldr	r0, [pc, #176]	; (8080240 <_Z16takeMeasurementsv+0xe8>)
 808018e:	f001 fbb5 	bl	80818fc <snprintf>

  vcs.newReading(); // start sensor reading
 8080192:	482c      	ldr	r0, [pc, #176]	; (8080244 <_Z16takeMeasurementsv+0xec>)
 8080194:	f001 f8b9 	bl	808130a <_ZN5SVCS310newReadingEv>
  delay(100); //let sensor read data
 8080198:	2064      	movs	r0, #100	; 0x64
 808019a:	f001 fbc7 	bl	808192c <delay>

  soilConductivity = vcs.getEC();
 808019e:	4829      	ldr	r0, [pc, #164]	; (8080244 <_Z16takeMeasurementsv+0xec>)
 80801a0:	f001 f8b6 	bl	8081310 <_ZN5SVCS35getECEv>
 80801a4:	4b28      	ldr	r3, [pc, #160]	; (8080248 <_Z16takeMeasurementsv+0xf0>)
 80801a6:	6018      	str	r0, [r3, #0]
  snprintf(soilConductivityString, sizeof(soilConductivityString),"%4.1f mS/m", soilConductivity);
 80801a8:	f003 fb4a 	bl	8083840 <__aeabi_f2d>
 80801ac:	4a27      	ldr	r2, [pc, #156]	; (808024c <_Z16takeMeasurementsv+0xf4>)
 80801ae:	e9cd 0100 	strd	r0, r1, [sp]
 80801b2:	2110      	movs	r1, #16
 80801b4:	4826      	ldr	r0, [pc, #152]	; (8080250 <_Z16takeMeasurementsv+0xf8>)
 80801b6:	f001 fba1 	bl	80818fc <snprintf>

  soilTempInC = vcs.getTemp();
 80801ba:	4822      	ldr	r0, [pc, #136]	; (8080244 <_Z16takeMeasurementsv+0xec>)
 80801bc:	f001 f8b8 	bl	8081330 <_ZN5SVCS37getTempEv>
 80801c0:	4b24      	ldr	r3, [pc, #144]	; (8080254 <_Z16takeMeasurementsv+0xfc>)
 80801c2:	6018      	str	r0, [r3, #0]
  snprintf(soilTempInCString, sizeof(soilTempInCString), "%4.1f C", soilTempInC);
 80801c4:	f003 fb3c 	bl	8083840 <__aeabi_f2d>
 80801c8:	4a19      	ldr	r2, [pc, #100]	; (8080230 <_Z16takeMeasurementsv+0xd8>)
 80801ca:	e9cd 0100 	strd	r0, r1, [sp]
 80801ce:	2110      	movs	r1, #16
 80801d0:	4821      	ldr	r0, [pc, #132]	; (8080258 <_Z16takeMeasurementsv+0x100>)
 80801d2:	f001 fb93 	bl	80818fc <snprintf>

  soilVolumetricWater = vcs.getVWC();
 80801d6:	481b      	ldr	r0, [pc, #108]	; (8080244 <_Z16takeMeasurementsv+0xec>)
 80801d8:	f001 f8ba 	bl	8081350 <_ZN5SVCS36getVWCEv>
 80801dc:	4b1f      	ldr	r3, [pc, #124]	; (808025c <_Z16takeMeasurementsv+0x104>)
 80801de:	6018      	str	r0, [r3, #0]
  snprintf(soilVolumetricWaterString, sizeof(soilVolumetricWaterString), "%4.1f %%", soilVolumetricWater);
 80801e0:	f003 fb2e 	bl	8083840 <__aeabi_f2d>
 80801e4:	4a15      	ldr	r2, [pc, #84]	; (808023c <_Z16takeMeasurementsv+0xe4>)
 80801e6:	e9cd 0100 	strd	r0, r1, [sp]
 80801ea:	2110      	movs	r1, #16
 80801ec:	481c      	ldr	r0, [pc, #112]	; (8080260 <_Z16takeMeasurementsv+0x108>)
 80801ee:	f001 fb85 	bl	80818fc <snprintf>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80801f2:	4b1c      	ldr	r3, [pc, #112]	; (8080264 <_Z16takeMeasurementsv+0x10c>)
 80801f4:	2200      	movs	r2, #0
 80801f6:	4611      	mov	r1, r2
 80801f8:	6858      	ldr	r0, [r3, #4]
 80801fa:	f001 fb1f 	bl	808183c <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
 80801fe:	b108      	cbz	r0, 8080204 <_Z16takeMeasurementsv+0xac>
 8080200:	f7ff ff7e 	bl	8080100 <_Z17getSignalStrengthv>
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
 8080204:	4818      	ldr	r0, [pc, #96]	; (8080268 <_Z16takeMeasurementsv+0x110>)
 8080206:	f001 fff7 	bl	80821f8 <_ZN9FuelGauge6getSoCEv>
 808020a:	f004 f8a3 	bl	8084354 <__aeabi_f2iz>
 808020e:	4a17      	ldr	r2, [pc, #92]	; (808026c <_Z16takeMeasurementsv+0x114>)
 8080210:	4603      	mov	r3, r0
 8080212:	6010      	str	r0, [r2, #0]
  snprintf(batteryString, sizeof(batteryString), "%i %%", stateOfCharge);
 8080214:	2110      	movs	r1, #16
 8080216:	4a16      	ldr	r2, [pc, #88]	; (8080270 <_Z16takeMeasurementsv+0x118>)
 8080218:	4816      	ldr	r0, [pc, #88]	; (8080274 <_Z16takeMeasurementsv+0x11c>)
 808021a:	f001 fb6f 	bl	80818fc <snprintf>

  return 1;
}
 808021e:	2001      	movs	r0, #1
 8080220:	b003      	add	sp, #12
 8080222:	f85d fb04 	ldr.w	pc, [sp], #4
 8080226:	bf00      	nop
 8080228:	20000510 	.word	0x20000510
 808022c:	200005bc 	.word	0x200005bc
 8080230:	0808501d 	.word	0x0808501d
 8080234:	200004f4 	.word	0x200004f4
 8080238:	2000051c 	.word	0x2000051c
 808023c:	08085025 	.word	0x08085025
 8080240:	200005d0 	.word	0x200005d0
 8080244:	200005cc 	.word	0x200005cc
 8080248:	2000058c 	.word	0x2000058c
 808024c:	0808502e 	.word	0x0808502e
 8080250:	200005ac 	.word	0x200005ac
 8080254:	20000538 	.word	0x20000538
 8080258:	200005f3 	.word	0x200005f3
 808025c:	20000520 	.word	0x20000520
 8080260:	2000059c 	.word	0x2000059c
 8080264:	20000604 	.word	0x20000604
 8080268:	20000528 	.word	0x20000528
 808026c:	20000540 	.word	0x20000540
 8080270:	08085039 	.word	0x08085039
 8080274:	200005e1 	.word	0x200005e1

08080278 <_Z17connectToParticlev>:
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 8080278:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808027c:	481a      	ldr	r0, [pc, #104]	; (80802e8 <_Z17connectToParticlev+0x70>)
 808027e:	2300      	movs	r3, #0
 8080280:	461a      	mov	r2, r3
 8080282:	4619      	mov	r1, r3
 8080284:	6840      	ldr	r0, [r0, #4]
 8080286:	f001 fae1 	bl	808184c <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808028a:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808028e:	f001 fa7d 	bl	808178c <spark_cloud_flag_connect>
 8080292:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8080296:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080298:	2000      	movs	r0, #0
 808029a:	f001 f8e3 	bl	8081464 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808029e:	4680      	mov	r8, r0
 80802a0:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80802a4:	2000      	movs	r0, #0
 80802a6:	f001 f8dd 	bl	8081464 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802aa:	ebb0 0008 	subs.w	r0, r0, r8
 80802ae:	eb61 0109 	sbc.w	r1, r1, r9
 80802b2:	428f      	cmp	r7, r1
 80802b4:	bf08      	it	eq
 80802b6:	4286      	cmpeq	r6, r0
 80802b8:	d305      	bcc.n	80802c6 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802ba:	f001 fa77 	bl	80817ac <spark_cloud_flag_connected>
 80802be:	b910      	cbnz	r0, 80802c6 <_Z17connectToParticlev+0x4e>
            spark_process();
 80802c0:	f001 fa5c 	bl	808177c <spark_process>
 80802c4:	e7ee      	b.n	80802a4 <_Z17connectToParticlev+0x2c>
 80802c6:	f001 fa71 	bl	80817ac <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80802ca:	b118      	cbz	r0, 80802d4 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 80802cc:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 80802d0:	f001 ba6c 	b.w	80817ac <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80802d4:	f001 f88e 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80802d8:	4b04      	ldr	r3, [pc, #16]	; (80802ec <_Z17connectToParticlev+0x74>)
 80802da:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80802dc:	f001 fa4e 	bl	808177c <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80802e0:	3c01      	subs	r4, #1
 80802e2:	d0f3      	beq.n	80802cc <_Z17connectToParticlev+0x54>
 80802e4:	e7d8      	b.n	8080298 <_Z17connectToParticlev+0x20>
 80802e6:	bf00      	nop
 80802e8:	20000604 	.word	0x20000604
 80802ec:	20000b1c 	.word	0x20000b1c

080802f0 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()
{
 80802f0:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 80802f2:	f001 fa53 	bl	808179c <spark_cloud_flag_disconnect>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80802f6:	4806      	ldr	r0, [pc, #24]	; (8080310 <_Z22disconnectFromParticlev+0x20>)
 80802f8:	2300      	movs	r3, #0
 80802fa:	461a      	mov	r2, r3
 80802fc:	4619      	mov	r1, r3
 80802fe:	6840      	ldr	r0, [r0, #4]
 8080300:	f001 faac 	bl	808185c <network_off>
  Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
  Cellular.off();
  delay(1000);                                                    // Bummer but only should happen once an hour
 8080304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080308:	f001 fb10 	bl	808192c <delay>
  return true;
}
 808030c:	2001      	movs	r0, #1
 808030e:	bd08      	pop	{r3, pc}
 8080310:	20000604 	.word	0x20000604

08080314 <_Z9PMICresetv>:
bool notConnected() {
  return !Particle.connected();                             // This is a requirement to use waitFor
}

// Power Management function
void PMICreset() {
 8080314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
 8080316:	481f      	ldr	r0, [pc, #124]	; (8080394 <_Z9PMICresetv+0x80>)
 8080318:	f002 f8ee 	bl	80824f8 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
 808031c:	481d      	ldr	r0, [pc, #116]	; (8080394 <_Z9PMICresetv+0x80>)
 808031e:	f002 fa98 	bl	8082852 <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
 8080322:	4b1d      	ldr	r3, [pc, #116]	; (8080398 <_Z9PMICresetv+0x84>)
 8080324:	781c      	ldrb	r4, [r3, #0]
 8080326:	4b1d      	ldr	r3, [pc, #116]	; (808039c <_Z9PMICresetv+0x88>)
 8080328:	b1bc      	cbz	r4, 808035a <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 808032a:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 808032c:	f241 21e8 	movw	r1, #4840	; 0x12e8
 8080330:	4818      	ldr	r0, [pc, #96]	; (8080394 <_Z9PMICresetv+0x80>)
// Power Management function
void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 8080332:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080334:	f002 f962 	bl	80825fc <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
 8080338:	f44f 7161 	mov.w	r1, #900	; 0x384
 808033c:	4815      	ldr	r0, [pc, #84]	; (8080394 <_Z9PMICresetv+0x80>)
 808033e:	f002 f9e7 	bl	8082710 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
 8080342:	2200      	movs	r2, #0
 8080344:	4611      	mov	r1, r2
 8080346:	9202      	str	r2, [sp, #8]
 8080348:	9201      	str	r2, [sp, #4]
 808034a:	9200      	str	r2, [sp, #0]
 808034c:	2301      	movs	r3, #1
 808034e:	4811      	ldr	r0, [pc, #68]	; (8080394 <_Z9PMICresetv+0x80>)
 8080350:	f002 fa26 	bl	80827a0 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
 8080354:	f241 0170 	movw	r1, #4208	; 0x1070
 8080358:	e016      	b.n	8080388 <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 808035a:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 808035c:	f241 0170 	movw	r1, #4208	; 0x1070
 8080360:	480c      	ldr	r0, [pc, #48]	; (8080394 <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 8080362:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080364:	f002 f94a 	bl	80825fc <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
 8080368:	f240 51dc 	movw	r1, #1500	; 0x5dc
 808036c:	4809      	ldr	r0, [pc, #36]	; (8080394 <_Z9PMICresetv+0x80>)
 808036e:	f002 f9cf 	bl	8082710 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
 8080372:	2301      	movs	r3, #1
 8080374:	4621      	mov	r1, r4
 8080376:	9402      	str	r4, [sp, #8]
 8080378:	9401      	str	r4, [sp, #4]
 808037a:	9400      	str	r4, [sp, #0]
 808037c:	461a      	mov	r2, r3
 808037e:	4805      	ldr	r0, [pc, #20]	; (8080394 <_Z9PMICresetv+0x80>)
 8080380:	f002 fa0e 	bl	80827a0 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 8080384:	f241 0110 	movw	r1, #4112	; 0x1010
 8080388:	4802      	ldr	r0, [pc, #8]	; (8080394 <_Z9PMICresetv+0x80>)
  }
}
 808038a:	b004      	add	sp, #16
 808038c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 8080390:	f002 ba39 	b.w	8082806 <_ZN4PMIC16setChargeVoltageEt>
 8080394:	20000532 	.word	0x20000532
 8080398:	200005e0 	.word	0x200005e0
 808039c:	20000504 	.word	0x20000504

080803a0 <_Z20meterParticlePublishv>:
  return 1;
}


bool meterParticlePublish(void)
{
 80803a0:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80803a2:	f001 f827 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 80803a6:	4b05      	ldr	r3, [pc, #20]	; (80803bc <_Z20meterParticlePublishv+0x1c>)
 80803a8:	681b      	ldr	r3, [r3, #0]
 80803aa:	1ac0      	subs	r0, r0, r3
 80803ac:	4b04      	ldr	r3, [pc, #16]	; (80803c0 <_Z20meterParticlePublishv+0x20>)
 80803ae:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 80803b0:	4298      	cmp	r0, r3
 80803b2:	bf34      	ite	cc
 80803b4:	2000      	movcc	r0, #0
 80803b6:	2001      	movcs	r0, #1
 80803b8:	bd08      	pop	{r3, pc}
 80803ba:	bf00      	nop
 80803bc:	20000534 	.word	0x20000534
 80803c0:	20000410 	.word	0x20000410

080803c4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80803c4:	b508      	push	{r3, lr}
    }
    else if (waiting && millis() >= (webhookTimeStamp + webhookWaitTime))
    {
      state = ERROR_STATE;
      if (verboseMode) {
        waitUntil(meterParticlePublish);
 80803c6:	f7ff ffeb 	bl	80803a0 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80803ca:	b118      	cbz	r0, 80803d4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80803cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80803d0:	f7ff bfe6 	b.w	80803a0 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 80803d4:	f001 f9d2 	bl	808177c <spark_process>
 80803d8:	e7f5      	b.n	80803c6 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23+0x2>
	...

080803dc <_Z14fullModemResetv>:
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 80803dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80803de:	f001 f9dd 	bl	808179c <spark_cloud_flag_disconnect>
 80803e2:	f001 f807 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80803e6:	f643 2597 	movw	r5, #14999	; 0x3a97
 80803ea:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80803ec:	f001 f9de 	bl	80817ac <spark_cloud_flag_connected>
 80803f0:	b140      	cbz	r0, 8080404 <_Z14fullModemResetv+0x28>
 80803f2:	f000 ffff 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
 80803f6:	1b00      	subs	r0, r0, r4
 80803f8:	42a8      	cmp	r0, r5
 80803fa:	d803      	bhi.n	8080404 <_Z14fullModemResetv+0x28>
		delay(100);
 80803fc:	2064      	movs	r0, #100	; 0x64
 80803fe:	f001 fa95 	bl	808192c <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080402:	e7f3      	b.n	80803ec <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080404:	2100      	movs	r1, #0
 8080406:	4b09      	ldr	r3, [pc, #36]	; (808042c <_Z14fullModemResetv+0x50>)
 8080408:	f247 5230 	movw	r2, #30000	; 0x7530
 808040c:	4608      	mov	r0, r1
 808040e:	f000 ffc1 	bl	8081394 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080416:	f001 fa89 	bl	808192c <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 808041a:	4b05      	ldr	r3, [pc, #20]	; (8080430 <_Z14fullModemResetv+0x54>)
 808041c:	220a      	movs	r2, #10
 808041e:	681b      	ldr	r3, [r3, #0]
 8080420:	2101      	movs	r1, #1
 8080422:	4668      	mov	r0, sp
 8080424:	f002 fb80 	bl	8082b28 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080428:	b003      	add	sp, #12
 808042a:	bd30      	pop	{r4, r5, pc}
 808042c:	0808503f 	.word	0x0808503f
 8080430:	20000590 	.word	0x20000590

08080434 <_Z11petWatchdogv>:

void watchdogISR() {
  watchDogFlag = true;
}

void petWatchdog() {
 8080434:	b508      	push	{r3, lr}
  digitalWrite(donePin,HIGH);
 8080436:	2101      	movs	r1, #1
 8080438:	2006      	movs	r0, #6
 808043a:	f002 fe64 	bl	8083106 <digitalWrite>
  digitalWrite(donePin,LOW);
 808043e:	2100      	movs	r1, #0
 8080440:	2006      	movs	r0, #6
 8080442:	f002 fe60 	bl	8083106 <digitalWrite>
  watchDogFlag = false;
 8080446:	4b02      	ldr	r3, [pc, #8]	; (8080450 <_Z11petWatchdogv+0x1c>)
 8080448:	2200      	movs	r2, #0
 808044a:	701a      	strb	r2, [r3, #0]
 808044c:	bd08      	pop	{r3, pc}
 808044e:	bf00      	nop
 8080450:	200005c9 	.word	0x200005c9

08080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080454:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080456:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080458:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808045a:	b17c      	cbz	r4, 808047c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808045c:	6863      	ldr	r3, [r4, #4]
 808045e:	3b01      	subs	r3, #1
 8080460:	6063      	str	r3, [r4, #4]
 8080462:	b95b      	cbnz	r3, 808047c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080464:	6823      	ldr	r3, [r4, #0]
 8080466:	4620      	mov	r0, r4
 8080468:	689b      	ldr	r3, [r3, #8]
 808046a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808046c:	68a3      	ldr	r3, [r4, #8]
 808046e:	3b01      	subs	r3, #1
 8080470:	60a3      	str	r3, [r4, #8]
 8080472:	b91b      	cbnz	r3, 808047c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080474:	6823      	ldr	r3, [r4, #0]
 8080476:	4620      	mov	r0, r4
 8080478:	68db      	ldr	r3, [r3, #12]
 808047a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808047c:	4628      	mov	r0, r5
 808047e:	bd38      	pop	{r3, r4, r5, pc}

08080480 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
 8080480:	b510      	push	{r4, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilconductivity\":%4.1f, \"Soiltemp\":%4.1f, \"Soilmoisture\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilConductivity, soilTempInC, soilVolumetricWater, stateOfCharge,resetCount, alertCount);
 8080482:	4b23      	ldr	r3, [pc, #140]	; (8080510 <_Z9sendEventv+0x90>)
    break;
  }
}

void sendEvent()
{
 8080484:	b0d0      	sub	sp, #320	; 0x140
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilconductivity\":%4.1f, \"Soiltemp\":%4.1f, \"Soilmoisture\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilConductivity, soilTempInC, soilVolumetricWater, stateOfCharge,resetCount, alertCount);
 8080486:	681b      	ldr	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080488:	2400      	movs	r4, #0
 808048a:	930c      	str	r3, [sp, #48]	; 0x30
 808048c:	4b21      	ldr	r3, [pc, #132]	; (8080514 <_Z9sendEventv+0x94>)
 808048e:	681b      	ldr	r3, [r3, #0]
 8080490:	930b      	str	r3, [sp, #44]	; 0x2c
 8080492:	4b21      	ldr	r3, [pc, #132]	; (8080518 <_Z9sendEventv+0x98>)
 8080494:	681b      	ldr	r3, [r3, #0]
 8080496:	930a      	str	r3, [sp, #40]	; 0x28
 8080498:	4b20      	ldr	r3, [pc, #128]	; (808051c <_Z9sendEventv+0x9c>)
 808049a:	6818      	ldr	r0, [r3, #0]
 808049c:	f003 f9d0 	bl	8083840 <__aeabi_f2d>
 80804a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80804a4:	4b1e      	ldr	r3, [pc, #120]	; (8080520 <_Z9sendEventv+0xa0>)
 80804a6:	6818      	ldr	r0, [r3, #0]
 80804a8:	f003 f9ca 	bl	8083840 <__aeabi_f2d>
 80804ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80804b0:	4b1c      	ldr	r3, [pc, #112]	; (8080524 <_Z9sendEventv+0xa4>)
 80804b2:	6818      	ldr	r0, [r3, #0]
 80804b4:	f003 f9c4 	bl	8083840 <__aeabi_f2d>
 80804b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80804bc:	4b1a      	ldr	r3, [pc, #104]	; (8080528 <_Z9sendEventv+0xa8>)
 80804be:	6818      	ldr	r0, [r3, #0]
 80804c0:	f003 f9be 	bl	8083840 <__aeabi_f2d>
 80804c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80804c8:	4b18      	ldr	r3, [pc, #96]	; (808052c <_Z9sendEventv+0xac>)
 80804ca:	6818      	ldr	r0, [r3, #0]
 80804cc:	f003 f9b8 	bl	8083840 <__aeabi_f2d>
 80804d0:	4a17      	ldr	r2, [pc, #92]	; (8080530 <_Z9sendEventv+0xb0>)
 80804d2:	e9cd 0100 	strd	r0, r1, [sp]
 80804d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80804da:	a810      	add	r0, sp, #64	; 0x40
 80804dc:	f001 fa0e 	bl	80818fc <snprintf>
 80804e0:	4b14      	ldr	r3, [pc, #80]	; (8080534 <_Z9sendEventv+0xb4>)
  Particle.publish("Cellular_Soil_Hook", data, PRIVATE);
 80804e2:	aa10      	add	r2, sp, #64	; 0x40
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80804e4:	781b      	ldrb	r3, [r3, #0]
 80804e6:	4914      	ldr	r1, [pc, #80]	; (8080538 <_Z9sendEventv+0xb8>)
 80804e8:	a80e      	add	r0, sp, #56	; 0x38
 80804ea:	f88d 4000 	strb.w	r4, [sp]
 80804ee:	f7ff fdf9 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80804f2:	a80f      	add	r0, sp, #60	; 0x3c
 80804f4:	f7ff ffae 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 80804f8:	f002 fbe0 	bl	8082cbc <_ZN9TimeClass4hourEv>
 80804fc:	4b0f      	ldr	r3, [pc, #60]	; (808053c <_Z9sendEventv+0xbc>)
 80804fe:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();
 8080500:	f002 fbf0 	bl	8082ce4 <_ZN9TimeClass3dayEv>
 8080504:	4b0e      	ldr	r3, [pc, #56]	; (8080540 <_Z9sendEventv+0xc0>)
 8080506:	7018      	strb	r0, [r3, #0]
  doneEnabled = false;
 8080508:	4b0e      	ldr	r3, [pc, #56]	; (8080544 <_Z9sendEventv+0xc4>)
 808050a:	701c      	strb	r4, [r3, #0]
}
 808050c:	b050      	add	sp, #320	; 0x140
 808050e:	bd10      	pop	{r4, pc}
 8080510:	2000053c 	.word	0x2000053c
 8080514:	20000584 	.word	0x20000584
 8080518:	20000540 	.word	0x20000540
 808051c:	20000520 	.word	0x20000520
 8080520:	20000538 	.word	0x20000538
 8080524:	2000058c 	.word	0x2000058c
 8080528:	2000051c 	.word	0x2000051c
 808052c:	200005bc 	.word	0x200005bc
 8080530:	0808504c 	.word	0x0808504c
 8080534:	2000050c 	.word	0x2000050c
 8080538:	080850de 	.word	0x080850de
 808053c:	20000588 	.word	0x20000588
 8080540:	20000533 	.word	0x20000533
 8080544:	20000400 	.word	0x20000400

08080548 <loop>:
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);           // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
 8080548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  switch(state) {
 808054a:	4ca1      	ldr	r4, [pc, #644]	; (80807d0 <loop+0x288>)
 808054c:	7823      	ldrb	r3, [r4, #0]
 808054e:	3b01      	subs	r3, #1
 8080550:	2b05      	cmp	r3, #5
 8080552:	f200 8183 	bhi.w	808085c <loop+0x314>
 8080556:	e8df f013 	tbh	[pc, r3, lsl #1]
 808055a:	0119      	.short	0x0119
 808055c:	002c0006 	.word	0x002c0006
 8080560:	007d0042 	.word	0x007d0042
 8080564:	00af      	.short	0x00af
  case IDLE_STATE:
    if (watchDogFlag) petWatchdog();
 8080566:	4b9b      	ldr	r3, [pc, #620]	; (80807d4 <loop+0x28c>)
 8080568:	781b      	ldrb	r3, [r3, #0]
 808056a:	b10b      	cbz	r3, 8080570 <loop+0x28>
 808056c:	f7ff ff62 	bl	8080434 <_Z11petWatchdogv>
    if (!waiting && lowPowerMode && millis() > (keepAwakeTimeStamp+sleepWait)) state = SLEEPING_STATE;
 8080570:	4b99      	ldr	r3, [pc, #612]	; (80807d8 <loop+0x290>)
 8080572:	781b      	ldrb	r3, [r3, #0]
 8080574:	b963      	cbnz	r3, 8080590 <loop+0x48>
 8080576:	4b99      	ldr	r3, [pc, #612]	; (80807dc <loop+0x294>)
 8080578:	781b      	ldrb	r3, [r3, #0]
 808057a:	b14b      	cbz	r3, 8080590 <loop+0x48>
 808057c:	f000 ff3a 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
 8080580:	4b97      	ldr	r3, [pc, #604]	; (80807e0 <loop+0x298>)
 8080582:	681a      	ldr	r2, [r3, #0]
 8080584:	4b97      	ldr	r3, [pc, #604]	; (80807e4 <loop+0x29c>)
 8080586:	681b      	ldr	r3, [r3, #0]
 8080588:	4413      	add	r3, r2
 808058a:	4283      	cmp	r3, r0
 808058c:	f0c0 8163 	bcc.w	8080856 <loop+0x30e>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;    // We want to report on the hour but not after bedtime
 8080590:	f002 fb94 	bl	8082cbc <_ZN9TimeClass4hourEv>
 8080594:	4b94      	ldr	r3, [pc, #592]	; (80807e8 <loop+0x2a0>)
 8080596:	781b      	ldrb	r3, [r3, #0]
 8080598:	4298      	cmp	r0, r3
 808059a:	bf1c      	itt	ne
 808059c:	2303      	movne	r3, #3
 808059e:	7023      	strbne	r3, [r4, #0]
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;               // The battery is low - sleep
 80805a0:	4b92      	ldr	r3, [pc, #584]	; (80807ec <loop+0x2a4>)
 80805a2:	681a      	ldr	r2, [r3, #0]
 80805a4:	4b92      	ldr	r3, [pc, #584]	; (80807f0 <loop+0x2a8>)
 80805a6:	681b      	ldr	r3, [r3, #0]
 80805a8:	429a      	cmp	r2, r3
 80805aa:	f300 8157 	bgt.w	808085c <loop+0x314>
 80805ae:	2305      	movs	r3, #5
 80805b0:	e013      	b.n	80805da <loop+0x92>
    break;

  case MEASURING_STATE:
    if (!takeMeasurements())
 80805b2:	f7ff fdd1 	bl	8080158 <_Z16takeMeasurementsv>
 80805b6:	4605      	mov	r5, r0
 80805b8:	b970      	cbnz	r0, 80805d8 <loop+0x90>
    {
      state = ERROR_STATE;
 80805ba:	2301      	movs	r3, #1
 80805bc:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 80805be:	4b8d      	ldr	r3, [pc, #564]	; (80807f4 <loop+0x2ac>)
 80805c0:	781b      	ldrb	r3, [r3, #0]
 80805c2:	2b00      	cmp	r3, #0
 80805c4:	f000 814a 	beq.w	808085c <loop+0x314>
        waitUntil(meterParticlePublish);
 80805c8:	f7ff fefc 	bl	80803c4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 80805cc:	4b8a      	ldr	r3, [pc, #552]	; (80807f8 <loop+0x2b0>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
 80805ce:	4a8b      	ldr	r2, [pc, #556]	; (80807fc <loop+0x2b4>)
 80805d0:	781b      	ldrb	r3, [r3, #0]
 80805d2:	f88d 5000 	strb.w	r5, [sp]
 80805d6:	e0ce      	b.n	8080776 <loop+0x22e>
        lastPublish = millis();
      }
    }
    else state = REPORTING_STATE;
 80805d8:	2306      	movs	r3, #6
 80805da:	7023      	strb	r3, [r4, #0]
 80805dc:	e13e      	b.n	808085c <loop+0x314>
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (!readyForBed)                                                   // Only do these things once - at bedtime
 80805de:	4b88      	ldr	r3, [pc, #544]	; (8080800 <loop+0x2b8>)
 80805e0:	781c      	ldrb	r4, [r3, #0]
 80805e2:	461d      	mov	r5, r3
 80805e4:	bb64      	cbnz	r4, 8080640 <loop+0xf8>
 80805e6:	f001 f8e1 	bl	80817ac <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
 80805ea:	b1d0      	cbz	r0, 8080622 <loop+0xda>
        if (verboseMode) {
 80805ec:	4b81      	ldr	r3, [pc, #516]	; (80807f4 <loop+0x2ac>)
 80805ee:	781b      	ldrb	r3, [r3, #0]
 80805f0:	b18b      	cbz	r3, 8080616 <loop+0xce>
          waitUntil(meterParticlePublish);
 80805f2:	f7ff fee7 	bl	80803c4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 80805f6:	4b80      	ldr	r3, [pc, #512]	; (80807f8 <loop+0x2b0>)
          Particle.publish("State","Going to Sleep",PRIVATE);
 80805f8:	4a82      	ldr	r2, [pc, #520]	; (8080804 <loop+0x2bc>)
 80805fa:	781b      	ldrb	r3, [r3, #0]
 80805fc:	4982      	ldr	r1, [pc, #520]	; (8080808 <loop+0x2c0>)
 80805fe:	a802      	add	r0, sp, #8
 8080600:	f88d 4000 	strb.w	r4, [sp]
 8080604:	f7ff fd6e 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8080608:	a803      	add	r0, sp, #12
 808060a:	f7ff ff23 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808060e:	f000 fef1 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 8080612:	4b7e      	ldr	r3, [pc, #504]	; (808080c <loop+0x2c4>)
 8080614:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 8080616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808061a:	f001 f987 	bl	808192c <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 808061e:	f7ff fe67 	bl	80802f0 <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
 8080622:	f002 fdbf 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080626:	4b7a      	ldr	r3, [pc, #488]	; (8080810 <loop+0x2c8>)
 8080628:	2002      	movs	r0, #2
 808062a:	7819      	ldrb	r1, [r3, #0]
 808062c:	f7ff fd58 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
      ledState = false;
 8080630:	4b78      	ldr	r3, [pc, #480]	; (8080814 <loop+0x2cc>)
 8080632:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080634:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
 8080636:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080638:	f002 fd65 	bl	8083106 <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
 808063c:	2301      	movs	r3, #1
 808063e:	702b      	strb	r3, [r5, #0]
    }
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
 8080640:	f002 fb46 	bl	8082cd0 <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
 8080644:	4b74      	ldr	r3, [pc, #464]	; (8080818 <loop+0x2d0>)
 8080646:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 808064a:	223c      	movs	r2, #60	; 0x3c
 808064c:	681b      	ldr	r3, [r3, #0]
 808064e:	4342      	muls	r2, r0
 8080650:	2102      	movs	r1, #2
 8080652:	e02d      	b.n	80806b0 <loop+0x168>
 8080654:	f001 f8aa 	bl	80817ac <spark_cloud_flag_connected>
    } break;


  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
      if (Particle.connected()) {
 8080658:	b1d8      	cbz	r0, 8080692 <loop+0x14a>
        if (verboseMode) {
 808065a:	4b66      	ldr	r3, [pc, #408]	; (80807f4 <loop+0x2ac>)
 808065c:	781b      	ldrb	r3, [r3, #0]
 808065e:	b193      	cbz	r3, 8080686 <loop+0x13e>
          waitUntil(meterParticlePublish);
 8080660:	f7ff feb0 	bl	80803c4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 8080664:	4b64      	ldr	r3, [pc, #400]	; (80807f8 <loop+0x2b0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080666:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080668:	781b      	ldrb	r3, [r3, #0]
          Particle.publish("State","Low Battery - Sleeping",PRIVATE);
 808066a:	4967      	ldr	r1, [pc, #412]	; (8080808 <loop+0x2c0>)
 808066c:	f88d 2000 	strb.w	r2, [sp]
 8080670:	a802      	add	r0, sp, #8
 8080672:	4a6a      	ldr	r2, [pc, #424]	; (808081c <loop+0x2d4>)
 8080674:	f7ff fd36 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8080678:	a803      	add	r0, sp, #12
 808067a:	f7ff feeb 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808067e:	f000 feb9 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 8080682:	4b62      	ldr	r3, [pc, #392]	; (808080c <loop+0x2c4>)
 8080684:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 8080686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808068a:	f001 f94f 	bl	808192c <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 808068e:	f7ff fe2f 	bl	80802f0 <_Z22disconnectFromParticlev>
      }
      ledState = false;
 8080692:	4b60      	ldr	r3, [pc, #384]	; (8080814 <loop+0x2cc>)
 8080694:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080696:	2007      	movs	r0, #7
          lastPublish = millis();
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      ledState = false;
 8080698:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 808069a:	f002 fd34 	bl	8083106 <digitalWrite>
      int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 808069e:	f002 fb17 	bl	8082cd0 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
 80806a2:	223c      	movs	r2, #60	; 0x3c
 80806a4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80806a8:	4b5b      	ldr	r3, [pc, #364]	; (8080818 <loop+0x2d0>)
 80806aa:	4342      	muls	r2, r0
 80806ac:	681b      	ldr	r3, [r3, #0]
 80806ae:	2101      	movs	r1, #1
 80806b0:	a802      	add	r0, sp, #8
 80806b2:	f002 fa39 	bl	8082b28 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 80806b6:	e0d1      	b.n	808085c <loop+0x314>
 80806b8:	f001 f878 	bl	80817ac <spark_cloud_flag_connected>

  case REPORTING_STATE:                                                 // Reporting - hourly or on command
    if (!Particle.connected()) connectToParticle();
 80806bc:	b910      	cbnz	r0, 80806c4 <loop+0x17c>
 80806be:	f7ff fddb 	bl	8080278 <_Z17connectToParticlev>
 80806c2:	e0cb      	b.n	808085c <loop+0x314>
    else if (!waiting)
 80806c4:	4d44      	ldr	r5, [pc, #272]	; (80807d8 <loop+0x290>)
 80806c6:	782b      	ldrb	r3, [r5, #0]
 80806c8:	b9eb      	cbnz	r3, 8080706 <loop+0x1be>
    {
      if (verboseMode) {
 80806ca:	4b4a      	ldr	r3, [pc, #296]	; (80807f4 <loop+0x2ac>)
 80806cc:	781b      	ldrb	r3, [r3, #0]
 80806ce:	b18b      	cbz	r3, 80806f4 <loop+0x1ac>
        waitUntil(meterParticlePublish);
 80806d0:	f7ff fe78 	bl	80803c4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 80806d4:	4b48      	ldr	r3, [pc, #288]	; (80807f8 <loop+0x2b0>)
        Particle.publish("State","Reporting",PRIVATE,PRIVATE);
 80806d6:	4a52      	ldr	r2, [pc, #328]	; (8080820 <loop+0x2d8>)
 80806d8:	781b      	ldrb	r3, [r3, #0]
 80806da:	494b      	ldr	r1, [pc, #300]	; (8080808 <loop+0x2c0>)
 80806dc:	f88d 3000 	strb.w	r3, [sp]
 80806e0:	a802      	add	r0, sp, #8
 80806e2:	f7ff fcff 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 80806e6:	a803      	add	r0, sp, #12
 80806e8:	f7ff feb4 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80806ec:	f000 fe82 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 80806f0:	4b46      	ldr	r3, [pc, #280]	; (808080c <loop+0x2c4>)
 80806f2:	6018      	str	r0, [r3, #0]
 80806f4:	f000 fe7e 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
      }
      webhookTimeStamp = millis();
 80806f8:	4b4a      	ldr	r3, [pc, #296]	; (8080824 <loop+0x2dc>)
 80806fa:	6018      	str	r0, [r3, #0]
      waiting = true;                                                   // Make sure we set the flag for flow through this case
 80806fc:	2301      	movs	r3, #1
 80806fe:	702b      	strb	r3, [r5, #0]
      sendEvent();                                                      // Send the data to Ubidots
 8080700:	f7ff febe 	bl	8080480 <_Z9sendEventv>
 8080704:	e0aa      	b.n	808085c <loop+0x314>
    }
    else if (waiting && doneEnabled)
 8080706:	4b48      	ldr	r3, [pc, #288]	; (8080828 <loop+0x2e0>)
 8080708:	781e      	ldrb	r6, [r3, #0]
 808070a:	b1f6      	cbz	r6, 808074a <loop+0x202>
    {
      if (verboseMode) {
 808070c:	4b39      	ldr	r3, [pc, #228]	; (80807f4 <loop+0x2ac>)
 808070e:	781b      	ldrb	r3, [r3, #0]
 8080710:	b193      	cbz	r3, 8080738 <loop+0x1f0>
        waitUntil(meterParticlePublish);
 8080712:	f7ff fe57 	bl	80803c4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 8080716:	4b38      	ldr	r3, [pc, #224]	; (80807f8 <loop+0x2b0>)
        Particle.publish("State","Idle",PRIVATE);
 8080718:	2200      	movs	r2, #0
 808071a:	781b      	ldrb	r3, [r3, #0]
 808071c:	493a      	ldr	r1, [pc, #232]	; (8080808 <loop+0x2c0>)
 808071e:	f88d 2000 	strb.w	r2, [sp]
 8080722:	a802      	add	r0, sp, #8
 8080724:	4a41      	ldr	r2, [pc, #260]	; (808082c <loop+0x2e4>)
 8080726:	f7ff fcdd 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 808072a:	a803      	add	r0, sp, #12
 808072c:	f7ff fe92 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080730:	f000 fe60 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8080734:	4b35      	ldr	r3, [pc, #212]	; (808080c <loop+0x2c4>)
 8080736:	6018      	str	r0, [r3, #0]
      }
      state = IDLE_STATE;       // This is how we know if Ubidots got the data
 8080738:	2302      	movs	r3, #2
 808073a:	7023      	strb	r3, [r4, #0]
      waiting = false;
 808073c:	2300      	movs	r3, #0
 808073e:	702b      	strb	r3, [r5, #0]
 8080740:	f000 fe58 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
      keepAwakeTimeStamp = millis();
 8080744:	4b26      	ldr	r3, [pc, #152]	; (80807e0 <loop+0x298>)
 8080746:	6018      	str	r0, [r3, #0]
 8080748:	e088      	b.n	808085c <loop+0x314>
 808074a:	f000 fe53 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (waiting && millis() >= (webhookTimeStamp + webhookWaitTime))
 808074e:	4b35      	ldr	r3, [pc, #212]	; (8080824 <loop+0x2dc>)
 8080750:	681a      	ldr	r2, [r3, #0]
 8080752:	4b37      	ldr	r3, [pc, #220]	; (8080830 <loop+0x2e8>)
 8080754:	681b      	ldr	r3, [r3, #0]
 8080756:	4413      	add	r3, r2
 8080758:	4298      	cmp	r0, r3
 808075a:	d37f      	bcc.n	808085c <loop+0x314>
    {
      state = ERROR_STATE;
 808075c:	2301      	movs	r3, #1
 808075e:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 8080760:	4b24      	ldr	r3, [pc, #144]	; (80807f4 <loop+0x2ac>)
 8080762:	781b      	ldrb	r3, [r3, #0]
 8080764:	2b00      	cmp	r3, #0
 8080766:	d079      	beq.n	808085c <loop+0x314>
        waitUntil(meterParticlePublish);
 8080768:	f7ff fe2c 	bl	80803c4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.23>
 808076c:	4b22      	ldr	r3, [pc, #136]	; (80807f8 <loop+0x2b0>)
        Particle.publish("State","Error - Reporting Timed Out",PRIVATE);
 808076e:	4a31      	ldr	r2, [pc, #196]	; (8080834 <loop+0x2ec>)
 8080770:	781b      	ldrb	r3, [r3, #0]
 8080772:	f88d 6000 	strb.w	r6, [sp]
 8080776:	4924      	ldr	r1, [pc, #144]	; (8080808 <loop+0x2c0>)
 8080778:	a802      	add	r0, sp, #8
 808077a:	f7ff fcb3 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 808077e:	a803      	add	r0, sp, #12
 8080780:	f7ff fe68 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080784:	f000 fe36 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8080788:	4b20      	ldr	r3, [pc, #128]	; (808080c <loop+0x2c4>)
 808078a:	e7dc      	b.n	8080746 <loop+0x1fe>
 808078c:	f000 fe32 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
      }
    }
    break;

  case ERROR_STATE:                                          // To be enhanced - where we deal with errors
    if (millis() > resetTimeStamp + resetWait)
 8080790:	4b29      	ldr	r3, [pc, #164]	; (8080838 <loop+0x2f0>)
 8080792:	681a      	ldr	r2, [r3, #0]
 8080794:	4b29      	ldr	r3, [pc, #164]	; (808083c <loop+0x2f4>)
 8080796:	681b      	ldr	r3, [r3, #0]
 8080798:	4413      	add	r3, r2
 808079a:	4298      	cmp	r0, r3
 808079c:	d95e      	bls.n	808085c <loop+0x314>
 808079e:	4b16      	ldr	r3, [pc, #88]	; (80807f8 <loop+0x2b0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80807a0:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80807a2:	781b      	ldrb	r3, [r3, #0]
    {
      Particle.publish("State","ERROR_STATE - Resetting",PRIVATE);
 80807a4:	4a26      	ldr	r2, [pc, #152]	; (8080840 <loop+0x2f8>)
 80807a6:	4918      	ldr	r1, [pc, #96]	; (8080808 <loop+0x2c0>)
 80807a8:	a802      	add	r0, sp, #8
 80807aa:	f88d 4000 	strb.w	r4, [sp]
 80807ae:	f7ff fc99 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 80807b2:	a803      	add	r0, sp, #12
 80807b4:	f7ff fe4e 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                          // This makes sure it goes through before reset
 80807b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80807bc:	f001 f8b6 	bl	808192c <delay>
      if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 80807c0:	4b13      	ldr	r3, [pc, #76]	; (8080810 <loop+0x2c8>)
 80807c2:	681b      	ldr	r3, [r3, #0]
 80807c4:	2b03      	cmp	r3, #3
 80807c6:	dc3d      	bgt.n	8080844 <loop+0x2fc>
 80807c8:	f002 f9aa 	bl	8082b20 <_ZN11SystemClass5resetEv>
 80807cc:	e046      	b.n	808085c <loop+0x314>
 80807ce:	bf00      	nop
 80807d0:	20000531 	.word	0x20000531
 80807d4:	200005c9 	.word	0x200005c9
 80807d8:	200005c8 	.word	0x200005c8
 80807dc:	2000059a 	.word	0x2000059a
 80807e0:	200005c0 	.word	0x200005c0
 80807e4:	2000040c 	.word	0x2000040c
 80807e8:	20000588 	.word	0x20000588
 80807ec:	20000540 	.word	0x20000540
 80807f0:	20000504 	.word	0x20000504
 80807f4:	2000059b 	.word	0x2000059b
 80807f8:	2000050c 	.word	0x2000050c
 80807fc:	080850f1 	.word	0x080850f1
 8080800:	200005f2 	.word	0x200005f2
 8080804:	08085111 	.word	0x08085111
 8080808:	0808510b 	.word	0x0808510b
 808080c:	20000534 	.word	0x20000534
 8080810:	20000584 	.word	0x20000584
 8080814:	20000530 	.word	0x20000530
 8080818:	20000590 	.word	0x20000590
 808081c:	08085120 	.word	0x08085120
 8080820:	08085137 	.word	0x08085137
 8080824:	20000508 	.word	0x20000508
 8080828:	20000400 	.word	0x20000400
 808082c:	08085141 	.word	0x08085141
 8080830:	20000414 	.word	0x20000414
 8080834:	08085146 	.word	0x08085146
 8080838:	200005c4 	.word	0x200005c4
 808083c:	20000404 	.word	0x20000404
 8080840:	08085162 	.word	0x08085162
      else {
        EEPROM.write(MEM_MAP::resetCountAddr,0);            // Zero the ResetCount
 8080844:	f002 fcae 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080848:	4621      	mov	r1, r4
 808084a:	2002      	movs	r0, #2
 808084c:	f7ff fc48 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
        fullModemReset();                                   // Full Modem reset and reboot
 8080850:	f7ff fdc4 	bl	80803dc <_Z14fullModemResetv>
      }
    }
    break;
  }
}
 8080854:	e002      	b.n	808085c <loop+0x314>
{

  switch(state) {
  case IDLE_STATE:
    if (watchDogFlag) petWatchdog();
    if (!waiting && lowPowerMode && millis() > (keepAwakeTimeStamp+sleepWait)) state = SLEEPING_STATE;
 8080856:	2304      	movs	r3, #4
 8080858:	7023      	strb	r3, [r4, #0]
 808085a:	e699      	b.n	8080590 <loop+0x48>
        fullModemReset();                                   // Full Modem reset and reboot
      }
    }
    break;
  }
}
 808085c:	b004      	add	sp, #16
 808085e:	bd70      	pop	{r4, r5, r6, pc}

08080860 <_Z14UbidotsHandlerPKcS0_>:
  currentDailyPeriod = Time.day();
  doneEnabled = false;
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 8080860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080862:	b085      	sub	sp, #20
  // Response Template: "{{temperature.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 8080864:	4608      	mov	r0, r1
  currentDailyPeriod = Time.day();
  doneEnabled = false;
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 8080866:	af02      	add	r7, sp, #8
 8080868:	460d      	mov	r5, r1
  // Response Template: "{{temperature.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 808086a:	f003 ff48 	bl	80846fe <strlen>
 808086e:	f100 0308 	add.w	r3, r0, #8
 8080872:	f023 0307 	bic.w	r3, r3, #7
  if ((responseCode == 200) || (responseCode == 201))
  {
    Particle.publish("State","Response Received",PRIVATE);
    doneEnabled = true;                                   // Successful response - can pet the dog again
  }
  else Particle.publish("Ubidots Hook", dataCopy,PRIVATE);       // Publish the response code
 8080876:	466e      	mov	r6, sp
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
  // Response Template: "{{temperature.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 8080878:	ebad 0d03 	sub.w	sp, sp, r3
 808087c:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                        // Copy - overflow safe
 808087e:	1c42      	adds	r2, r0, #1
 8080880:	4629      	mov	r1, r5
 8080882:	4620      	mov	r0, r4
 8080884:	f003 ff58 	bl	8084738 <strncpy>
  if (!strlen(dataCopy)) {                                          // First check to see if there is any data
 8080888:	f89d 2008 	ldrb.w	r2, [sp, #8]
 808088c:	4d14      	ldr	r5, [pc, #80]	; (80808e0 <_Z14UbidotsHandlerPKcS0_+0x80>)
 808088e:	b922      	cbnz	r2, 808089a <_Z14UbidotsHandlerPKcS0_+0x3a>
 8080890:	782b      	ldrb	r3, [r5, #0]
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
 8080892:	f88d 2000 	strb.w	r2, [sp]
 8080896:	4a13      	ldr	r2, [pc, #76]	; (80808e4 <_Z14UbidotsHandlerPKcS0_+0x84>)
 8080898:	e016      	b.n	80808c8 <_Z14UbidotsHandlerPKcS0_+0x68>
    return;
  }
  int responseCode = atoi(dataCopy);                    // Response is only a single number thanks to Template
 808089a:	4620      	mov	r0, r4
 808089c:	f003 fdbc 	bl	8084418 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 80808a0:	38c8      	subs	r0, #200	; 0xc8
 80808a2:	2200      	movs	r2, #0
 80808a4:	2801      	cmp	r0, #1
 80808a6:	782b      	ldrb	r3, [r5, #0]
  {
    Particle.publish("State","Response Received",PRIVATE);
 80808a8:	f88d 2000 	strb.w	r2, [sp]
  if (!strlen(dataCopy)) {                                          // First check to see if there is any data
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
    return;
  }
  int responseCode = atoi(dataCopy);                    // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
 80808ac:	d80b      	bhi.n	80808c6 <_Z14UbidotsHandlerPKcS0_+0x66>
  {
    Particle.publish("State","Response Received",PRIVATE);
 80808ae:	4a0e      	ldr	r2, [pc, #56]	; (80808e8 <_Z14UbidotsHandlerPKcS0_+0x88>)
 80808b0:	490e      	ldr	r1, [pc, #56]	; (80808ec <_Z14UbidotsHandlerPKcS0_+0x8c>)
 80808b2:	4638      	mov	r0, r7
 80808b4:	f7ff fc16 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 80808b8:	1d38      	adds	r0, r7, #4
 80808ba:	f7ff fdcb 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    doneEnabled = true;                                   // Successful response - can pet the dog again
 80808be:	4b0c      	ldr	r3, [pc, #48]	; (80808f0 <_Z14UbidotsHandlerPKcS0_+0x90>)
 80808c0:	2201      	movs	r2, #1
 80808c2:	701a      	strb	r2, [r3, #0]
 80808c4:	e007      	b.n	80808d6 <_Z14UbidotsHandlerPKcS0_+0x76>
  }
  else Particle.publish("Ubidots Hook", dataCopy,PRIVATE);       // Publish the response code
 80808c6:	4622      	mov	r2, r4
 80808c8:	4638      	mov	r0, r7
 80808ca:	490a      	ldr	r1, [pc, #40]	; (80808f4 <_Z14UbidotsHandlerPKcS0_+0x94>)
 80808cc:	f7ff fc0a 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 80808d0:	1d38      	adds	r0, r7, #4
 80808d2:	f7ff fdbf 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80808d6:	46b5      	mov	sp, r6
}
 80808d8:	370c      	adds	r7, #12
 80808da:	46bd      	mov	sp, r7
 80808dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80808de:	bf00      	nop
 80808e0:	2000050c 	.word	0x2000050c
 80808e4:	0808517a 	.word	0x0808517a
 80808e8:	0808518f 	.word	0x0808518f
 80808ec:	0808510b 	.word	0x0808510b
 80808f0:	20000400 	.word	0x20000400
 80808f4:	08085182 	.word	0x08085182

080808f8 <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
 80808f8:	b530      	push	{r4, r5, lr}
 80808fa:	4924      	ldr	r1, [pc, #144]	; (808098c <_Z12setSolarMode6String+0x94>)
 80808fc:	b085      	sub	sp, #20
 80808fe:	4605      	mov	r5, r0
 8080900:	f002 f8df 	bl	8082ac2 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080904:	4604      	mov	r4, r0
 8080906:	b1d0      	cbz	r0, 808093e <_Z12setSolarMode6String+0x46>
  {
    solarPowerMode = true;
 8080908:	4b21      	ldr	r3, [pc, #132]	; (8080990 <_Z12setSolarMode6String+0x98>)
 808090a:	2401      	movs	r4, #1
 808090c:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 808090e:	f002 fc49 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080912:	2004      	movs	r0, #4
 8080914:	f7ff fbe2 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
 8080918:	4d1e      	ldr	r5, [pc, #120]	; (8080994 <_Z12setSolarMode6String+0x9c>)
 808091a:	f040 0004 	orr.w	r0, r0, #4
 808091e:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister);// Write it to the register
 8080920:	f002 fc40 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080924:	7829      	ldrb	r1, [r5, #0]
 8080926:	2004      	movs	r0, #4
 8080928:	f7ff fbda 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
    PMICreset();                                               // Change the power management Settings
 808092c:	f7ff fcf2 	bl	8080314 <_Z9PMICresetv>
 8080930:	4b19      	ldr	r3, [pc, #100]	; (8080998 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
 8080932:	2200      	movs	r2, #0
 8080934:	781b      	ldrb	r3, [r3, #0]
 8080936:	f88d 2000 	strb.w	r2, [sp]
 808093a:	4a18      	ldr	r2, [pc, #96]	; (808099c <_Z12setSolarMode6String+0xa4>)
 808093c:	e01c      	b.n	8080978 <_Z12setSolarMode6String+0x80>
 808093e:	4918      	ldr	r1, [pc, #96]	; (80809a0 <_Z12setSolarMode6String+0xa8>)
 8080940:	4628      	mov	r0, r5
 8080942:	f002 f8be 	bl	8082ac2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 8080946:	b1f8      	cbz	r0, 8080988 <_Z12setSolarMode6String+0x90>
  {
    solarPowerMode = false;
 8080948:	4b11      	ldr	r3, [pc, #68]	; (8080990 <_Z12setSolarMode6String+0x98>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 808094a:	4d12      	ldr	r5, [pc, #72]	; (8080994 <_Z12setSolarMode6String+0x9c>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
 808094c:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 808094e:	f002 fc29 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080952:	2004      	movs	r0, #4
 8080954:	f7ff fbc2 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 8080958:	f020 0004 	bic.w	r0, r0, #4
 808095c:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 808095e:	f002 fc21 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080962:	7829      	ldrb	r1, [r5, #0]
 8080964:	2004      	movs	r0, #4
 8080966:	f7ff fbbb 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
    PMICreset();                                                // Change the power management settings
 808096a:	f7ff fcd3 	bl	8080314 <_Z9PMICresetv>
 808096e:	4b0a      	ldr	r3, [pc, #40]	; (8080998 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Cleared Solar Powered Mode",PRIVATE);
 8080970:	4a0c      	ldr	r2, [pc, #48]	; (80809a4 <_Z12setSolarMode6String+0xac>)
 8080972:	781b      	ldrb	r3, [r3, #0]
 8080974:	f88d 4000 	strb.w	r4, [sp]
 8080978:	490b      	ldr	r1, [pc, #44]	; (80809a8 <_Z12setSolarMode6String+0xb0>)
 808097a:	a802      	add	r0, sp, #8
 808097c:	f7ff fbb2 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8080980:	a803      	add	r0, sp, #12
 8080982:	f7ff fd67 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 8080986:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080988:	b005      	add	sp, #20
 808098a:	bd30      	pop	{r4, r5, pc}
 808098c:	08085428 	.word	0x08085428
 8080990:	200005e0 	.word	0x200005e0
 8080994:	200005f1 	.word	0x200005f1
 8080998:	2000050c 	.word	0x2000050c
 808099c:	080851a1 	.word	0x080851a1
 80809a0:	080851b8 	.word	0x080851b8
 80809a4:	080851ba 	.word	0x080851ba
 80809a8:	080851d0 	.word	0x080851d0

080809ac <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 80809ac:	b530      	push	{r4, r5, lr}
 80809ae:	4922      	ldr	r1, [pc, #136]	; (8080a38 <_Z14setVerboseMode6String+0x8c>)
 80809b0:	b085      	sub	sp, #20
 80809b2:	4605      	mov	r5, r0
 80809b4:	f002 f885 	bl	8082ac2 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80809b8:	4604      	mov	r4, r0
 80809ba:	b1c0      	cbz	r0, 80809ee <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
 80809bc:	4b1f      	ldr	r3, [pc, #124]	; (8080a3c <_Z14setVerboseMode6String+0x90>)
 80809be:	2401      	movs	r4, #1
 80809c0:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80809c2:	f002 fbef 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 80809c6:	2004      	movs	r0, #4
 80809c8:	f7ff fb88 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 80809cc:	4d1c      	ldr	r5, [pc, #112]	; (8080a40 <_Z14setVerboseMode6String+0x94>)
 80809ce:	f040 0008 	orr.w	r0, r0, #8
 80809d2:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80809d4:	f002 fbe6 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 80809d8:	7829      	ldrb	r1, [r5, #0]
 80809da:	2004      	movs	r0, #4
 80809dc:	f7ff fb80 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
 80809e0:	4b18      	ldr	r3, [pc, #96]	; (8080a44 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 80809e2:	2200      	movs	r2, #0
 80809e4:	781b      	ldrb	r3, [r3, #0]
 80809e6:	f88d 2000 	strb.w	r2, [sp]
 80809ea:	4a17      	ldr	r2, [pc, #92]	; (8080a48 <_Z14setVerboseMode6String+0x9c>)
 80809ec:	e01a      	b.n	8080a24 <_Z14setVerboseMode6String+0x78>
 80809ee:	4917      	ldr	r1, [pc, #92]	; (8080a4c <_Z14setVerboseMode6String+0xa0>)
 80809f0:	4628      	mov	r0, r5
 80809f2:	f002 f866 	bl	8082ac2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 80809f6:	b1e8      	cbz	r0, 8080a34 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 80809f8:	4b10      	ldr	r3, [pc, #64]	; (8080a3c <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 80809fa:	4d11      	ldr	r5, [pc, #68]	; (8080a40 <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 80809fc:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80809fe:	f002 fbd1 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080a02:	2004      	movs	r0, #4
 8080a04:	f7ff fb6a 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.15>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080a08:	f020 0008 	bic.w	r0, r0, #8
 8080a0c:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080a0e:	f002 fbc9 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080a12:	7829      	ldrb	r1, [r5, #0]
 8080a14:	2004      	movs	r0, #4
 8080a16:	f7ff fb63 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
 8080a1a:	4b0a      	ldr	r3, [pc, #40]	; (8080a44 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080a1c:	4a0c      	ldr	r2, [pc, #48]	; (8080a50 <_Z14setVerboseMode6String+0xa4>)
 8080a1e:	781b      	ldrb	r3, [r3, #0]
 8080a20:	f88d 4000 	strb.w	r4, [sp]
 8080a24:	490b      	ldr	r1, [pc, #44]	; (8080a54 <_Z14setVerboseMode6String+0xa8>)
 8080a26:	a802      	add	r0, sp, #8
 8080a28:	f7ff fb5c 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8080a2c:	a803      	add	r0, sp, #12
 8080a2e:	f7ff fd11 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 8080a32:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080a34:	b005      	add	sp, #20
 8080a36:	bd30      	pop	{r4, r5, pc}
 8080a38:	08085428 	.word	0x08085428
 8080a3c:	2000059b 	.word	0x2000059b
 8080a40:	200005f1 	.word	0x200005f1
 8080a44:	2000050c 	.word	0x2000050c
 8080a48:	080851d5 	.word	0x080851d5
 8080a4c:	080851b8 	.word	0x080851b8
 8080a50:	080851e6 	.word	0x080851e6
 8080a54:	080851d0 	.word	0x080851d0

08080a58 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 8080a58:	b570      	push	{r4, r5, r6, lr}
 8080a5a:	b0cc      	sub	sp, #304	; 0x130
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080a5c:	220a      	movs	r2, #10
 8080a5e:	a905      	add	r1, sp, #20
 8080a60:	6800      	ldr	r0, [r0, #0]
 8080a62:	f003 ff03 	bl	808486c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080a66:	b2c5      	uxtb	r5, r0
 8080a68:	f105 030c 	add.w	r3, r5, #12
 8080a6c:	b2db      	uxtb	r3, r3
 8080a6e:	2b18      	cmp	r3, #24
 8080a70:	d83d      	bhi.n	8080aee <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080a72:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 8080a74:	4620      	mov	r0, r4
 8080a76:	f003 fa53 	bl	8083f20 <__aeabi_i2f>
 8080a7a:	f002 f8b9 	bl	8082bf0 <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8080a7e:	f002 fb91 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080a82:	4629      	mov	r1, r5
 8080a84:	2003      	movs	r0, #3
 8080a86:	f7ff fb2b 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
  t = Time.now();
 8080a8a:	f002 f910 	bl	8082cae <_ZN9TimeClass3nowEv>
 8080a8e:	4e19      	ldr	r6, [pc, #100]	; (8080af4 <_Z11setTimeZone6String+0x9c>)
 8080a90:	4d19      	ldr	r5, [pc, #100]	; (8080af8 <_Z11setTimeZone6String+0xa0>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080a92:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 8080a94:	6030      	str	r0, [r6, #0]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080a96:	4a19      	ldr	r2, [pc, #100]	; (8080afc <_Z11setTimeZone6String+0xa4>)
 8080a98:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080a9c:	2400      	movs	r4, #0
 8080a9e:	a80c      	add	r0, sp, #48	; 0x30
 8080aa0:	f000 ff2c 	bl	80818fc <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080aa4:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
 8080aa6:	aa0c      	add	r2, sp, #48	; 0x30
 8080aa8:	4915      	ldr	r1, [pc, #84]	; (8080b00 <_Z11setTimeZone6String+0xa8>)
 8080aaa:	a808      	add	r0, sp, #32
 8080aac:	f88d 4000 	strb.w	r4, [sp]
 8080ab0:	f7ff fb18 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8080ab4:	a809      	add	r0, sp, #36	; 0x24
 8080ab6:	f7ff fccd 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080aba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080abe:	f000 ff35 	bl	808192c <delay>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 8080ac2:	6831      	ldr	r1, [r6, #0]
 8080ac4:	a808      	add	r0, sp, #32
 8080ac6:	f002 f8af 	bl	8082c28 <_ZN9TimeClass7timeStrEl>
 8080aca:	9b08      	ldr	r3, [sp, #32]
 8080acc:	490c      	ldr	r1, [pc, #48]	; (8080b00 <_Z11setTimeZone6String+0xa8>)
 8080ace:	9303      	str	r3, [sp, #12]
 8080ad0:	9a03      	ldr	r2, [sp, #12]
 8080ad2:	782b      	ldrb	r3, [r5, #0]
 8080ad4:	a806      	add	r0, sp, #24
 8080ad6:	f88d 4000 	strb.w	r4, [sp]
 8080ada:	f7ff fb03 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8080ade:	a807      	add	r0, sp, #28
 8080ae0:	f7ff fcb8 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080ae4:	a808      	add	r0, sp, #32
 8080ae6:	f001 ff78 	bl	80829da <_ZN6StringD1Ev>
  return 1;
 8080aea:	2001      	movs	r0, #1
 8080aec:	e000      	b.n	8080af0 <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080aee:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  return 1;
}
 8080af0:	b04c      	add	sp, #304	; 0x130
 8080af2:	bd70      	pop	{r4, r5, r6, pc}
 8080af4:	20000524 	.word	0x20000524
 8080af8:	2000050c 	.word	0x2000050c
 8080afc:	080851fb 	.word	0x080851fb
 8080b00:	0808520f 	.word	0x0808520f

08080b04 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 8080b04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8080b06:	4926      	ldr	r1, [pc, #152]	; (8080ba0 <_Z15setLowPowerMode6String+0x9c>)
 8080b08:	4605      	mov	r5, r0
 8080b0a:	f001 ffda 	bl	8082ac2 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 8080b0e:	b928      	cbnz	r0, 8080b1c <_Z15setLowPowerMode6String+0x18>
 8080b10:	4924      	ldr	r1, [pc, #144]	; (8080ba4 <_Z15setLowPowerMode6String+0xa0>)
 8080b12:	4628      	mov	r0, r5
 8080b14:	f001 ffd5 	bl	8082ac2 <_ZNK6String6equalsEPKc>
 8080b18:	2800      	cmp	r0, #0
 8080b1a:	d03f      	beq.n	8080b9c <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080b1c:	f002 fb42 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080b20:	2004      	movs	r0, #4
 8080b22:	f7ff fadb 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.15>
 8080b26:	4c20      	ldr	r4, [pc, #128]	; (8080ba8 <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080b28:	491d      	ldr	r1, [pc, #116]	; (8080ba0 <_Z15setLowPowerMode6String+0x9c>)
 8080b2a:	7020      	strb	r0, [r4, #0]
 8080b2c:	4628      	mov	r0, r5
 8080b2e:	f001 ffc8 	bl	8082ac2 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 8080b32:	4606      	mov	r6, r0
 8080b34:	b1a0      	cbz	r0, 8080b60 <_Z15setLowPowerMode6String+0x5c>
 8080b36:	4b1d      	ldr	r3, [pc, #116]	; (8080bac <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
 8080b38:	2200      	movs	r2, #0
 8080b3a:	781b      	ldrb	r3, [r3, #0]
 8080b3c:	491c      	ldr	r1, [pc, #112]	; (8080bb0 <_Z15setLowPowerMode6String+0xac>)
 8080b3e:	f88d 2000 	strb.w	r2, [sp]
 8080b42:	a802      	add	r0, sp, #8
 8080b44:	4a1b      	ldr	r2, [pc, #108]	; (8080bb4 <_Z15setLowPowerMode6String+0xb0>)
 8080b46:	f7ff facd 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8080b4a:	a803      	add	r0, sp, #12
 8080b4c:	f7ff fc82 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 8080b50:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
 8080b52:	2201      	movs	r2, #1
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    Particle.publish("Mode","Low Power",PRIVATE);
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 8080b54:	f043 0301 	orr.w	r3, r3, #1
 8080b58:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
 8080b5a:	4b17      	ldr	r3, [pc, #92]	; (8080bb8 <_Z15setLowPowerMode6String+0xb4>)
 8080b5c:	701a      	strb	r2, [r3, #0]
 8080b5e:	e016      	b.n	8080b8e <_Z15setLowPowerMode6String+0x8a>
 8080b60:	4910      	ldr	r1, [pc, #64]	; (8080ba4 <_Z15setLowPowerMode6String+0xa0>)
 8080b62:	4628      	mov	r0, r5
 8080b64:	f001 ffad 	bl	8082ac2 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 8080b68:	b188      	cbz	r0, 8080b8e <_Z15setLowPowerMode6String+0x8a>
 8080b6a:	4b10      	ldr	r3, [pc, #64]	; (8080bac <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
 8080b6c:	4a13      	ldr	r2, [pc, #76]	; (8080bbc <_Z15setLowPowerMode6String+0xb8>)
 8080b6e:	781b      	ldrb	r3, [r3, #0]
 8080b70:	490f      	ldr	r1, [pc, #60]	; (8080bb0 <_Z15setLowPowerMode6String+0xac>)
 8080b72:	a802      	add	r0, sp, #8
 8080b74:	f88d 6000 	strb.w	r6, [sp]
 8080b78:	f7ff fab4 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8080b7c:	a803      	add	r0, sp, #12
 8080b7e:	f7ff fc69 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
 8080b82:	7823      	ldrb	r3, [r4, #0]
 8080b84:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8080b88:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
 8080b8a:	4b0b      	ldr	r3, [pc, #44]	; (8080bb8 <_Z15setLowPowerMode6String+0xb4>)
 8080b8c:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080b8e:	f002 fb09 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080b92:	2004      	movs	r0, #4
 8080b94:	7821      	ldrb	r1, [r4, #0]
 8080b96:	f7ff faa3 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
 8080b9a:	2001      	movs	r0, #1
  return 1;
}
 8080b9c:	b004      	add	sp, #16
 8080b9e:	bd70      	pop	{r4, r5, r6, pc}
 8080ba0:	08085428 	.word	0x08085428
 8080ba4:	080851b8 	.word	0x080851b8
 8080ba8:	200005f1 	.word	0x200005f1
 8080bac:	2000050c 	.word	0x2000050c
 8080bb0:	080851d0 	.word	0x080851d0
 8080bb4:	08085214 	.word	0x08085214
 8080bb8:	2000059a 	.word	0x2000059a
 8080bbc:	0808521e 	.word	0x0808521e

08080bc0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080bc0:	2300      	movs	r3, #0
 8080bc2:	2204      	movs	r2, #4
 8080bc4:	f000 bdca 	b.w	808175c <spark_variable>

08080bc8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080bc8:	4602      	mov	r2, r0
 8080bca:	4801      	ldr	r0, [pc, #4]	; (8080bd0 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080bcc:	f001 b844 	b.w	8081c58 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080bd0:	08081c2d 	.word	0x08081c2d

08080bd4 <setup>:
float soilTempInC = 0;
float soilVolumetricWater = 0;


void setup()                                                      // Note: Disconnected Setup()
{
 8080bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080bd6:	b0b9      	sub	sp, #228	; 0xe4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080bd8:	aa08      	add	r2, sp, #32
 8080bda:	4616      	mov	r6, r2
 8080bdc:	4b92      	ldr	r3, [pc, #584]	; (8080e28 <setup+0x254>)
 8080bde:	f103 0510 	add.w	r5, r3, #16
 8080be2:	4614      	mov	r4, r2
 8080be4:	6818      	ldr	r0, [r3, #0]
 8080be6:	6859      	ldr	r1, [r3, #4]
 8080be8:	3308      	adds	r3, #8
 8080bea:	c403      	stmia	r4!, {r0, r1}
 8080bec:	42ab      	cmp	r3, r5
 8080bee:	4622      	mov	r2, r4
 8080bf0:	d1f7      	bne.n	8080be2 <setup+0xe>
 8080bf2:	8819      	ldrh	r1, [r3, #0]
 8080bf4:	789b      	ldrb	r3, [r3, #2]
 8080bf6:	222d      	movs	r2, #45	; 0x2d
 8080bf8:	8021      	strh	r1, [r4, #0]
 8080bfa:	70a3      	strb	r3, [r4, #2]
 8080bfc:	2100      	movs	r1, #0
 8080bfe:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8080c02:	f003 fd1e 	bl	8084642 <memset>
  state = IDLE_STATE;
 8080c06:	4b89      	ldr	r3, [pc, #548]	; (8080e2c <setup+0x258>)
 8080c08:	2502      	movs	r5, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080c0a:	2101      	movs	r1, #1
 8080c0c:	2007      	movs	r0, #7


void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
 8080c0e:	701d      	strb	r5, [r3, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080c10:	f002 fa68 	bl	80830e4 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080c14:	2100      	movs	r1, #0
 8080c16:	2005      	movs	r0, #5
 8080c18:	f002 fa64 	bl	80830e4 <pinMode>
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
 8080c1c:	2101      	movs	r1, #1
 8080c1e:	2006      	movs	r0, #6
 8080c20:	f002 fa60 	bl	80830e4 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080c24:	2100      	movs	r1, #0
 8080c26:	2011      	movs	r0, #17
 8080c28:	f002 fa5c 	bl	80830e4 <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8080c2c:	a804      	add	r0, sp, #16
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8080c2e:	2400      	movs	r4, #0
 8080c30:	f000 fdc4 	bl	80817bc <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080c34:	2300      	movs	r3, #0
 8080c36:	227d      	movs	r2, #125	; 0x7d
 8080c38:	a918      	add	r1, sp, #96	; 0x60
 8080c3a:	a804      	add	r0, sp, #16
 8080c3c:	f001 ff53 	bl	8082ae6 <_ZNK6String8getBytesEPhjj>
 8080c40:	4623      	mov	r3, r4
 8080c42:	4622      	mov	r2, r4
 8080c44:	497a      	ldr	r1, [pc, #488]	; (8080e30 <setup+0x25c>)
 8080c46:	9401      	str	r4, [sp, #4]
 8080c48:	9400      	str	r4, [sp, #0]
 8080c4a:	a818      	add	r0, sp, #96	; 0x60
 8080c4c:	f000 fdc6 	bl	80817dc <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
 8080c50:	4978      	ldr	r1, [pc, #480]	; (8080e34 <setup+0x260>)
 8080c52:	4879      	ldr	r0, [pc, #484]	; (8080e38 <setup+0x264>)
 8080c54:	f7ff ffb4 	bl	8080bc0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080c58:	4623      	mov	r3, r4
 8080c5a:	462a      	mov	r2, r5
 8080c5c:	4977      	ldr	r1, [pc, #476]	; (8080e3c <setup+0x268>)
 8080c5e:	4878      	ldr	r0, [pc, #480]	; (8080e40 <setup+0x26c>)
 8080c60:	f000 fd7c 	bl	808175c <spark_variable>
 8080c64:	4977      	ldr	r1, [pc, #476]	; (8080e44 <setup+0x270>)
 8080c66:	4623      	mov	r3, r4
 8080c68:	2204      	movs	r2, #4
 8080c6a:	6809      	ldr	r1, [r1, #0]
 8080c6c:	4876      	ldr	r0, [pc, #472]	; (8080e48 <setup+0x274>)
 8080c6e:	f000 fd75 	bl	808175c <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", batteryString);
 8080c72:	4976      	ldr	r1, [pc, #472]	; (8080e4c <setup+0x278>)
 8080c74:	4876      	ldr	r0, [pc, #472]	; (8080e50 <setup+0x27c>)
 8080c76:	f7ff ffa3 	bl	8080bc0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
 8080c7a:	4623      	mov	r3, r4
 8080c7c:	2201      	movs	r2, #1
 8080c7e:	4975      	ldr	r1, [pc, #468]	; (8080e54 <setup+0x280>)
 8080c80:	4875      	ldr	r0, [pc, #468]	; (8080e58 <setup+0x284>)
 8080c82:	f000 fd6b 	bl	808175c <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
 8080c86:	4975      	ldr	r1, [pc, #468]	; (8080e5c <setup+0x288>)
 8080c88:	4875      	ldr	r0, [pc, #468]	; (8080e60 <setup+0x28c>)
 8080c8a:	f7ff ff99 	bl	8080bc0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("humidity", humidityString);
 8080c8e:	4975      	ldr	r1, [pc, #468]	; (8080e64 <setup+0x290>)
 8080c90:	4875      	ldr	r0, [pc, #468]	; (8080e68 <setup+0x294>)
 8080c92:	f7ff ff95 	bl	8080bc0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Conductivity",soilConductivityString);
 8080c96:	4975      	ldr	r1, [pc, #468]	; (8080e6c <setup+0x298>)
 8080c98:	4875      	ldr	r0, [pc, #468]	; (8080e70 <setup+0x29c>)
 8080c9a:	f7ff ff91 	bl	8080bc0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilTemp",soilTempInCString);
 8080c9e:	4975      	ldr	r1, [pc, #468]	; (8080e74 <setup+0x2a0>)
 8080ca0:	4875      	ldr	r0, [pc, #468]	; (8080e78 <setup+0x2a4>)
 8080ca2:	f7ff ff8d 	bl	8080bc0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("VolumetricH2O",soilVolumetricWaterString);
 8080ca6:	4975      	ldr	r1, [pc, #468]	; (8080e7c <setup+0x2a8>)
 8080ca8:	4875      	ldr	r0, [pc, #468]	; (8080e80 <setup+0x2ac>)
 8080caa:	f7ff ff89 	bl	8080bc0 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  
  Particle.function("Measure-Now",measureNow);
 8080cae:	4975      	ldr	r1, [pc, #468]	; (8080e84 <setup+0x2b0>)
 8080cb0:	4875      	ldr	r0, [pc, #468]	; (8080e88 <setup+0x2b4>)
 8080cb2:	f7ff ff89 	bl	8080bc8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 8080cb6:	4975      	ldr	r1, [pc, #468]	; (8080e8c <setup+0x2b8>)
 8080cb8:	4875      	ldr	r0, [pc, #468]	; (8080e90 <setup+0x2bc>)
 8080cba:	f7ff ff85 	bl	8080bc8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
 8080cbe:	4975      	ldr	r1, [pc, #468]	; (8080e94 <setup+0x2c0>)
 8080cc0:	4875      	ldr	r0, [pc, #468]	; (8080e98 <setup+0x2c4>)
 8080cc2:	f7ff ff81 	bl	8080bc8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8080cc6:	4975      	ldr	r1, [pc, #468]	; (8080e9c <setup+0x2c8>)
 8080cc8:	4875      	ldr	r0, [pc, #468]	; (8080ea0 <setup+0x2cc>)
 8080cca:	f7ff ff7d 	bl	8080bc8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
 8080cce:	4975      	ldr	r1, [pc, #468]	; (8080ea4 <setup+0x2d0>)
 8080cd0:	4875      	ldr	r0, [pc, #468]	; (8080ea8 <setup+0x2d4>)
 8080cd2:	f7ff ff79 	bl	8080bc8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
 8080cd6:	f002 fa65 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080cda:	4620      	mov	r0, r4
 8080cdc:	f7ff f9fe 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.15>
 8080ce0:	2801      	cmp	r0, #1
 8080ce2:	d119      	bne.n	8080d18 <setup+0x144>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                     // Retrive system recount data from FRAM
 8080ce4:	f002 fa5e 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080ce8:	2002      	movs	r0, #2
 8080cea:	f7ff f9f7 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.15>
 8080cee:	4c53      	ldr	r4, [pc, #332]	; (8080e3c <setup+0x268>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080cf0:	2200      	movs	r2, #0
 8080cf2:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080cf4:	4611      	mov	r1, r2
 8080cf6:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080cf8:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080cfa:	f000 fb6b 	bl	80813d4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080cfe:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8080d00:	2b14      	cmp	r3, #20
 8080d02:	d11e      	bne.n	8080d42 <setup+0x16e>
  {
    resetCount++;
 8080d04:	6823      	ldr	r3, [r4, #0]
 8080d06:	3301      	adds	r3, #1
 8080d08:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                    // If so, store incremented number - watchdog must have done This
 8080d0a:	f002 fa4b 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080d0e:	7821      	ldrb	r1, [r4, #0]
 8080d10:	2002      	movs	r0, #2
 8080d12:	f7ff f9e5 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
 8080d16:	e014      	b.n	8080d42 <setup+0x16e>
  Particle.function("Solar-Mode",setSolarMode);
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
 8080d18:	f002 fa44 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080d1c:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080d1e:	2204      	movs	r2, #4
 8080d20:	a902      	add	r1, sp, #8
 8080d22:	4620      	mov	r0, r4
 8080d24:	9502      	str	r5, [sp, #8]
 8080d26:	f000 fb8d 	bl	8081444 <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
 8080d2a:	f002 fa3b 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080d2e:	4628      	mov	r0, r5
 8080d30:	2204      	movs	r2, #4
 8080d32:	a902      	add	r1, sp, #8
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080d34:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
 8080d36:	9402      	str	r4, [sp, #8]
 8080d38:	f000 fb84 	bl	8081444 <HAL_EEPROM_Put>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080d3c:	2d0a      	cmp	r5, #10
 8080d3e:	d1f4      	bne.n	8080d2a <setup+0x156>
 8080d40:	e7d0      	b.n	8080ce4 <setup+0x110>
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                    // If so, store incremented number - watchdog must have done This
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8080d42:	6823      	ldr	r3, [r4, #0]
 8080d44:	2b05      	cmp	r3, #5
 8080d46:	dd07      	ble.n	8080d58 <setup+0x184>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8080d48:	f002 fa2c 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080d4c:	2104      	movs	r1, #4
 8080d4e:	2002      	movs	r0, #2
 8080d50:	f7ff f9c6 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8080d54:	f7ff fb42 	bl	80803dc <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
 8080d58:	f002 fa24 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080d5c:	2003      	movs	r0, #3
 8080d5e:	f7ff f9bd 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.15>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
 8080d62:	f100 030c 	add.w	r3, r0, #12
 8080d66:	b2db      	uxtb	r3, r3
 8080d68:	2b18      	cmp	r3, #24
 8080d6a:	d803      	bhi.n	8080d74 <setup+0x1a0>
 8080d6c:	b240      	sxtb	r0, r0
 8080d6e:	f003 f8d7 	bl	8083f20 <__aeabi_i2f>
 8080d72:	e000      	b.n	8080d76 <setup+0x1a2>
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM
 8080d74:	2000      	movs	r0, #0
 8080d76:	f001 ff3b 	bl	8082bf0 <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
 8080d7a:	f002 fa13 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080d7e:	2004      	movs	r0, #4
 8080d80:	f7ff f9ac 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.15>
 8080d84:	4f49      	ldr	r7, [pc, #292]	; (8080eac <setup+0x2d8>)
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080d86:	4c33      	ldr	r4, [pc, #204]	; (8080e54 <setup+0x280>)
 8080d88:	f000 0301 	and.w	r3, r0, #1
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080d8c:	4d48      	ldr	r5, [pc, #288]	; (8080eb0 <setup+0x2dc>)
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080d8e:	f3c0 0280 	ubfx	r2, r0, #2, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
 8080d92:	7038      	strb	r0, [r7, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080d94:	7023      	strb	r3, [r4, #0]
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080d96:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080d9a:	4b46      	ldr	r3, [pc, #280]	; (8080eb4 <setup+0x2e0>)
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode

  vcs.init(0x63);                                                       // Initialize the soil sensor
 8080d9c:	2163      	movs	r1, #99	; 0x63

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080d9e:	7028      	strb	r0, [r5, #0]

  vcs.init(0x63);                                                       // Initialize the soil sensor
 8080da0:	4845      	ldr	r0, [pc, #276]	; (8080eb8 <setup+0x2e4>)
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080da2:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode

  vcs.init(0x63);                                                       // Initialize the soil sensor
 8080da4:	f000 fa43 	bl	808122e <_ZN5SVCS34initEi>

  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
 8080da8:	f7ff fab4 	bl	8080314 <_Z9PMICresetv>

  takeMeasurements();                                                   // For the benefit of monitoring the device
 8080dac:	f7ff f9d4 	bl	8080158 <_Z16takeMeasurementsv>

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
 8080db0:	2005      	movs	r0, #5
 8080db2:	f002 f9c1 	bl	8083138 <digitalRead>
 8080db6:	b950      	cbnz	r0, 8080dce <setup+0x1fa>
  lowPowerMode = false;                                                 // Press the user switch while resetting the device
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080db8:	783b      	ldrb	r3, [r7, #0]
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
  lowPowerMode = false;                                                 // Press the user switch while resetting the device
 8080dba:	7020      	strb	r0, [r4, #0]
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080dbc:	f023 0301 	bic.w	r3, r3, #1
 8080dc0:	703b      	strb	r3, [r7, #0]
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
 8080dc2:	f002 f9ef 	bl	80831a4 <_Z21__fetch_global_EEPROMv>
 8080dc6:	2104      	movs	r1, #4
 8080dc8:	7838      	ldrb	r0, [r7, #0]
 8080dca:	f7ff f989 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.16>
  }

  if (!lowPowerMode && (stateOfCharge >= lowBattLimit)) connectToParticle();  // If not lowpower or sleeping, we can connect
 8080dce:	7823      	ldrb	r3, [r4, #0]
 8080dd0:	b93b      	cbnz	r3, 8080de2 <setup+0x20e>
 8080dd2:	4b3a      	ldr	r3, [pc, #232]	; (8080ebc <setup+0x2e8>)
 8080dd4:	681a      	ldr	r2, [r3, #0]
 8080dd6:	4b3a      	ldr	r3, [pc, #232]	; (8080ec0 <setup+0x2ec>)
 8080dd8:	681b      	ldr	r3, [r3, #0]
 8080dda:	429a      	cmp	r2, r3
 8080ddc:	db01      	blt.n	8080de2 <setup+0x20e>
 8080dde:	f7ff fa4b 	bl	8080278 <_Z17connectToParticlev>
  connectToParticle();  // For now, let's just connect

  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered
 8080de2:	2400      	movs	r4, #0
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
  }

  if (!lowPowerMode && (stateOfCharge >= lowBattLimit)) connectToParticle();  // If not lowpower or sleeping, we can connect
  connectToParticle();  // For now, let's just connect
 8080de4:	f7ff fa48 	bl	8080278 <_Z17connectToParticlev>

  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered
 8080de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080dec:	9400      	str	r4, [sp, #0]
 8080dee:	2201      	movs	r2, #1
 8080df0:	4934      	ldr	r1, [pc, #208]	; (8080ec4 <setup+0x2f0>)
 8080df2:	2011      	movs	r0, #17
 8080df4:	f001 fa9c 	bl	8082330 <_Z15attachInterrupttPFvvE13InterruptModeah>

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);           // Let Particle know how the startup process went
 8080df8:	782b      	ldrb	r3, [r5, #0]
 8080dfa:	b15b      	cbz	r3, 8080e14 <setup+0x240>
 8080dfc:	4b32      	ldr	r3, [pc, #200]	; (8080ec8 <setup+0x2f4>)
 8080dfe:	a802      	add	r0, sp, #8
 8080e00:	781b      	ldrb	r3, [r3, #0]
 8080e02:	4632      	mov	r2, r6
 8080e04:	f88d 4000 	strb.w	r4, [sp]
 8080e08:	4930      	ldr	r1, [pc, #192]	; (8080ecc <setup+0x2f8>)
 8080e0a:	f7ff f96b 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.41>
 8080e0e:	a803      	add	r0, sp, #12
 8080e10:	f7ff fb20 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e14:	f000 faee 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080e18:	4b2d      	ldr	r3, [pc, #180]	; (8080ed0 <setup+0x2fc>)
 8080e1a:	6018      	str	r0, [r3, #0]
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
 8080e1c:	a804      	add	r0, sp, #16
 8080e1e:	f001 fddc 	bl	80829da <_ZN6StringD1Ev>

  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);           // Let Particle know how the startup process went
  lastPublish = millis();
}
 8080e22:	b039      	add	sp, #228	; 0xe4
 8080e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080e26:	bf00      	nop
 8080e28:	08084fc4 	.word	0x08084fc4
 8080e2c:	20000531 	.word	0x20000531
 8080e30:	08080861 	.word	0x08080861
 8080e34:	20000544 	.word	0x20000544
 8080e38:	08085230 	.word	0x08085230
 8080e3c:	20000584 	.word	0x20000584
 8080e40:	08085237 	.word	0x08085237
 8080e44:	20000408 	.word	0x20000408
 8080e48:	08085242 	.word	0x08085242
 8080e4c:	200005e1 	.word	0x200005e1
 8080e50:	0808524a 	.word	0x0808524a
 8080e54:	2000059a 	.word	0x2000059a
 8080e58:	08085255 	.word	0x08085255
 8080e5c:	200004f4 	.word	0x200004f4
 8080e60:	08085262 	.word	0x08085262
 8080e64:	200005d0 	.word	0x200005d0
 8080e68:	0808526e 	.word	0x0808526e
 8080e6c:	200005ac 	.word	0x200005ac
 8080e70:	08085277 	.word	0x08085277
 8080e74:	200005f3 	.word	0x200005f3
 8080e78:	08085284 	.word	0x08085284
 8080e7c:	2000059c 	.word	0x2000059c
 8080e80:	0808528d 	.word	0x0808528d
 8080e84:	080800c1 	.word	0x080800c1
 8080e88:	0808529b 	.word	0x0808529b
 8080e8c:	08080b05 	.word	0x08080b05
 8080e90:	080852a7 	.word	0x080852a7
 8080e94:	080808f9 	.word	0x080808f9
 8080e98:	080852b4 	.word	0x080852b4
 8080e9c:	080809ad 	.word	0x080809ad
 8080ea0:	080852bf 	.word	0x080852bf
 8080ea4:	08080a59 	.word	0x08080a59
 8080ea8:	080852cc 	.word	0x080852cc
 8080eac:	200005f1 	.word	0x200005f1
 8080eb0:	2000059b 	.word	0x2000059b
 8080eb4:	200005e0 	.word	0x200005e0
 8080eb8:	200005cc 	.word	0x200005cc
 8080ebc:	20000540 	.word	0x20000540
 8080ec0:	20000504 	.word	0x20000504
 8080ec4:	080800b5 	.word	0x080800b5
 8080ec8:	2000050c 	.word	0x2000050c
 8080ecc:	080852d8 	.word	0x080852d8
 8080ed0:	20000534 	.word	0x20000534

08080ed4 <_GLOBAL__sub_I_sht1x>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080ed4:	4b1c      	ldr	r3, [pc, #112]	; (8080f48 <_GLOBAL__sub_I_sht1x+0x74>)

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 8080ed6:	b570      	push	{r4, r5, r6, lr}
 8080ed8:	2400      	movs	r4, #0
 8080eda:	601c      	str	r4, [r3, #0]
 8080edc:	4b1b      	ldr	r3, [pc, #108]	; (8080f4c <_GLOBAL__sub_I_sht1x+0x78>)
 8080ede:	2501      	movs	r5, #1
 8080ee0:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080ee2:	f000 fac7 	bl	8081474 <HAL_Pin_Map>
#include "vcs3i2c.h"

// Specify data and clock connections and instantiate SHT1x object
#define dataPin  C4
#define clockPin C5
SHT1x sht1x(dataPin, clockPin);
 8080ee6:	2122      	movs	r1, #34	; 0x22
 8080ee8:	2223      	movs	r2, #35	; 0x23
 8080eea:	4819      	ldr	r0, [pc, #100]	; (8080f50 <_GLOBAL__sub_I_sht1x+0x7c>)
 8080eec:	f000 f840 	bl	8080f70 <_ZN5SHT1xC1Eii>

// Initialize the Soil Sensor object
SVCS3 vcs;
 8080ef0:	4818      	ldr	r0, [pc, #96]	; (8080f54 <_GLOBAL__sub_I_sht1x+0x80>)
 8080ef2:	f000 f999 	bl	8081228 <_ZN5SVCS3C1Ev>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8080efa:	4b17      	ldr	r3, [pc, #92]	; (8080f58 <_GLOBAL__sub_I_sht1x+0x84>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080efc:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080efe:	701c      	strb	r4, [r3, #0]
 8080f00:	805c      	strh	r4, [r3, #2]
 8080f02:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080f04:	f000 fbde 	bl	80816c4 <set_system_mode>
#define SEALEVELPRESSURE_HPA (1013.25)              // Universal variables
#define MEMORYMAPVERSION 1                          // Lets us know if we need to reinitialize the memory map

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
 8080f08:	4621      	mov	r1, r4
 8080f0a:	4628      	mov	r0, r5
 8080f0c:	f000 fbf2 	bl	80816f4 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8080f10:	4629      	mov	r1, r5
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8080f12:	4d12      	ldr	r5, [pc, #72]	; (8080f5c <_GLOBAL__sub_I_sht1x+0x88>)
 8080f14:	2004      	movs	r0, #4
 8080f16:	f000 fa4d 	bl	80813b4 <HAL_Feature_Set>
 8080f1a:	4e11      	ldr	r6, [pc, #68]	; (8080f60 <_GLOBAL__sub_I_sht1x+0x8c>)
 8080f1c:	4621      	mov	r1, r4
 8080f1e:	4628      	mov	r0, r5
 8080f20:	f001 f92a 	bl	8082178 <_ZN9FuelGaugeC1Eb>
 8080f24:	4628      	mov	r0, r5
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8080f26:	4d0f      	ldr	r5, [pc, #60]	; (8080f64 <_GLOBAL__sub_I_sht1x+0x90>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8080f28:	4632      	mov	r2, r6
 8080f2a:	490f      	ldr	r1, [pc, #60]	; (8080f68 <_GLOBAL__sub_I_sht1x+0x94>)
 8080f2c:	f002 f9d4 	bl	80832d8 <__aeabi_atexit>
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8080f30:	4621      	mov	r1, r4
 8080f32:	4628      	mov	r0, r5
 8080f34:	f001 faf7 	bl	8082526 <_ZN4PMICC1Eb>
 8080f38:	4632      	mov	r2, r6
 8080f3a:	4628      	mov	r0, r5

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 8080f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8080f40:	490a      	ldr	r1, [pc, #40]	; (8080f6c <_GLOBAL__sub_I_sht1x+0x98>)
 8080f42:	f002 b9c9 	b.w	80832d8 <__aeabi_atexit>
 8080f46:	bf00      	nop
 8080f48:	20000590 	.word	0x20000590
 8080f4c:	2000050c 	.word	0x2000050c
 8080f50:	20000510 	.word	0x20000510
 8080f54:	200005cc 	.word	0x200005cc
 8080f58:	20000594 	.word	0x20000594
 8080f5c:	20000528 	.word	0x20000528
 8080f60:	200004f0 	.word	0x200004f0
 8080f64:	20000532 	.word	0x20000532
 8080f68:	08082197 	.word	0x08082197
 8080f6c:	08082545 	.word	0x08082545

08080f70 <_ZN5SHT1xC1Eii>:
#include "SHT1x.h"

SHT1x::SHT1x(int dataPin, int clockPin)
{
    _dataPin = dataPin;
    _clockPin = clockPin;
 8080f70:	e880 0006 	stmia.w	r0, {r1, r2}
}
 8080f74:	4770      	bx	lr

08080f76 <_ZN5SHT1x7shiftInEiii>:
}

/**
 */
int SHT1x::shiftIn(int _dataPin, int _clockPin, int _numBits)
{
 8080f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    int i;
    
    for (i=0; i<_numBits; ++i)
 8080f7a:	2500      	movs	r5, #0
}

/**
 */
int SHT1x::shiftIn(int _dataPin, int _clockPin, int _numBits)
{
 8080f7c:	460f      	mov	r7, r1
 8080f7e:	4698      	mov	r8, r3
    int ret = 0;
 8080f80:	462c      	mov	r4, r5
    int i;
    
    for (i=0; i<_numBits; ++i)
    {
        digitalWrite(_clockPin, HIGH);
 8080f82:	b296      	uxth	r6, r2
int SHT1x::shiftIn(int _dataPin, int _clockPin, int _numBits)
{
    int ret = 0;
    int i;
    
    for (i=0; i<_numBits; ++i)
 8080f84:	4545      	cmp	r5, r8
 8080f86:	da11      	bge.n	8080fac <_ZN5SHT1x7shiftInEiii+0x36>
    {
        digitalWrite(_clockPin, HIGH);
 8080f88:	2101      	movs	r1, #1
 8080f8a:	4630      	mov	r0, r6
 8080f8c:	f002 f8bb 	bl	8083106 <digitalWrite>
        delay(10);  // I don't know why I need this, but without it I don't get my 8 lsb of temp
 8080f90:	200a      	movs	r0, #10
 8080f92:	f000 fccb 	bl	808192c <delay>
        ret = ret*2 + digitalRead(_dataPin);
 8080f96:	b2b8      	uxth	r0, r7
 8080f98:	f002 f8ce 	bl	8083138 <digitalRead>
 8080f9c:	0064      	lsls	r4, r4, #1
 8080f9e:	4404      	add	r4, r0
        digitalWrite(_clockPin, LOW);
 8080fa0:	2100      	movs	r1, #0
 8080fa2:	4630      	mov	r0, r6
 8080fa4:	f002 f8af 	bl	8083106 <digitalWrite>
int SHT1x::shiftIn(int _dataPin, int _clockPin, int _numBits)
{
    int ret = 0;
    int i;
    
    for (i=0; i<_numBits; ++i)
 8080fa8:	3501      	adds	r5, #1
 8080faa:	e7eb      	b.n	8080f84 <_ZN5SHT1x7shiftInEiii+0xe>
        ret = ret*2 + digitalRead(_dataPin);
        digitalWrite(_clockPin, LOW);
    }
    
    return(ret);
}
 8080fac:	4620      	mov	r0, r4
 8080fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080fb2 <_ZN5SHT1x14sendCommandSHTEiii>:

/**
 */
void SHT1x::sendCommandSHT(int _command, int _dataPin, int _clockPin)
{
 8080fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080fb6:	461f      	mov	r7, r3
 8080fb8:	4616      	mov	r6, r2
 8080fba:	4688      	mov	r8, r1
    int ack;
    
    // Transmission Start
    pinMode(_dataPin, OUTPUT);
 8080fbc:	b294      	uxth	r4, r2
    pinMode(_clockPin, OUTPUT);
 8080fbe:	b2bd      	uxth	r5, r7
void SHT1x::sendCommandSHT(int _command, int _dataPin, int _clockPin)
{
    int ack;
    
    // Transmission Start
    pinMode(_dataPin, OUTPUT);
 8080fc0:	4620      	mov	r0, r4
 8080fc2:	2101      	movs	r1, #1
 8080fc4:	f002 f88e 	bl	80830e4 <pinMode>
    pinMode(_clockPin, OUTPUT);
 8080fc8:	4628      	mov	r0, r5
 8080fca:	2101      	movs	r1, #1
 8080fcc:	f002 f88a 	bl	80830e4 <pinMode>
    digitalWrite(_dataPin, HIGH);
 8080fd0:	4620      	mov	r0, r4
 8080fd2:	2101      	movs	r1, #1
 8080fd4:	f002 f897 	bl	8083106 <digitalWrite>
    digitalWrite(_clockPin, HIGH);
 8080fd8:	4628      	mov	r0, r5
 8080fda:	2101      	movs	r1, #1
 8080fdc:	f002 f893 	bl	8083106 <digitalWrite>
    digitalWrite(_dataPin, LOW);
 8080fe0:	4620      	mov	r0, r4
 8080fe2:	2100      	movs	r1, #0
 8080fe4:	f002 f88f 	bl	8083106 <digitalWrite>
    digitalWrite(_clockPin, LOW);
 8080fe8:	4628      	mov	r0, r5
 8080fea:	2100      	movs	r1, #0
 8080fec:	f002 f88b 	bl	8083106 <digitalWrite>
    digitalWrite(_clockPin, HIGH);
 8080ff0:	4628      	mov	r0, r5
 8080ff2:	2101      	movs	r1, #1
 8080ff4:	f002 f887 	bl	8083106 <digitalWrite>
    digitalWrite(_dataPin, HIGH);
 8080ff8:	4620      	mov	r0, r4
 8080ffa:	2101      	movs	r1, #1
 8080ffc:	f002 f883 	bl	8083106 <digitalWrite>
    digitalWrite(_clockPin, LOW);
 8081000:	4628      	mov	r0, r5
 8081002:	2100      	movs	r1, #0
 8081004:	f002 f87f 	bl	8083106 <digitalWrite>
    
    // The command (3 msb are address and must be 000, and last 5 bits are command)
    shiftOut(_dataPin, _clockPin, MSBFIRST, _command);
 8081008:	fa5f f388 	uxtb.w	r3, r8
 808100c:	2201      	movs	r2, #1
 808100e:	b2f9      	uxtb	r1, r7
 8081010:	b2f0      	uxtb	r0, r6
 8081012:	f002 f8a4 	bl	808315e <shiftOut>
    
    // Verify we get the correct ack
    digitalWrite(_clockPin, HIGH);
 8081016:	4628      	mov	r0, r5
 8081018:	2101      	movs	r1, #1
 808101a:	f002 f874 	bl	8083106 <digitalWrite>
    pinMode(_dataPin, INPUT);
 808101e:	2100      	movs	r1, #0
 8081020:	4620      	mov	r0, r4
 8081022:	f002 f85f 	bl	80830e4 <pinMode>
    ack = digitalRead(_dataPin);
 8081026:	4620      	mov	r0, r4
 8081028:	f002 f886 	bl	8083138 <digitalRead>
    if (ack != LOW) {
    //Serial.println("Ack Error 0");
    }
    digitalWrite(_clockPin, LOW);
 808102c:	4628      	mov	r0, r5
 808102e:	2100      	movs	r1, #0
 8081030:	f002 f869 	bl	8083106 <digitalWrite>
    ack = digitalRead(_dataPin);
 8081034:	4620      	mov	r0, r4
    if (ack != HIGH) {
    //Serial.println("Ack Error 1");
    }
}
 8081036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ack = digitalRead(_dataPin);
    if (ack != LOW) {
    //Serial.println("Ack Error 0");
    }
    digitalWrite(_clockPin, LOW);
    ack = digitalRead(_dataPin);
 808103a:	f002 b87d 	b.w	8083138 <digitalRead>

0808103e <_ZN5SHT1x16waitForResultSHTEi>:
}

/**
 */
void SHT1x::waitForResultSHT(int _dataPin)
{
 808103e:	b538      	push	{r3, r4, r5, lr}
    int i;
    int ack;
    
    pinMode(_dataPin, INPUT);
 8081040:	b28d      	uxth	r5, r1
 8081042:	4628      	mov	r0, r5
 8081044:	2100      	movs	r1, #0
 8081046:	f002 f84d 	bl	80830e4 <pinMode>
 808104a:	2464      	movs	r4, #100	; 0x64
    
    for(i= 0; i < 100; ++i)
    {
        delay(10);
 808104c:	200a      	movs	r0, #10
 808104e:	f000 fc6d 	bl	808192c <delay>
        ack = digitalRead(_dataPin);
 8081052:	4628      	mov	r0, r5
 8081054:	f002 f870 	bl	8083138 <digitalRead>
        
        if (ack == LOW) {
 8081058:	b108      	cbz	r0, 808105e <_ZN5SHT1x16waitForResultSHTEi+0x20>
    int i;
    int ack;
    
    pinMode(_dataPin, INPUT);
    
    for(i= 0; i < 100; ++i)
 808105a:	3c01      	subs	r4, #1
 808105c:	d1f6      	bne.n	808104c <_ZN5SHT1x16waitForResultSHTEi+0xe>
 808105e:	bd38      	pop	{r3, r4, r5, pc}

08081060 <_ZN5SHT1x12getData16SHTEii>:
}

/**
 */
int SHT1x::getData16SHT(int _dataPin, int _clockPin)
{
 8081060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8081064:	4616      	mov	r6, r2
 8081066:	4680      	mov	r8, r0
 8081068:	460d      	mov	r5, r1
    int val;
    
    // Get the most significant bits
    pinMode(_dataPin, INPUT);
 808106a:	b28c      	uxth	r4, r1
    pinMode(_clockPin, OUTPUT);
 808106c:	b2b7      	uxth	r7, r6
int SHT1x::getData16SHT(int _dataPin, int _clockPin)
{
    int val;
    
    // Get the most significant bits
    pinMode(_dataPin, INPUT);
 808106e:	4620      	mov	r0, r4
 8081070:	2100      	movs	r1, #0
 8081072:	f002 f837 	bl	80830e4 <pinMode>
    pinMode(_clockPin, OUTPUT);
 8081076:	4638      	mov	r0, r7
 8081078:	2101      	movs	r1, #1
 808107a:	f002 f833 	bl	80830e4 <pinMode>
    val = shiftIn(_dataPin, _clockPin, 8);
 808107e:	4632      	mov	r2, r6
 8081080:	2308      	movs	r3, #8
 8081082:	4629      	mov	r1, r5
 8081084:	4640      	mov	r0, r8
 8081086:	f7ff ff76 	bl	8080f76 <_ZN5SHT1x7shiftInEiii>
    val *= 256;
    
    // Send the required ack
    pinMode(_dataPin, OUTPUT);
 808108a:	2101      	movs	r1, #1
    
    // Get the most significant bits
    pinMode(_dataPin, INPUT);
    pinMode(_clockPin, OUTPUT);
    val = shiftIn(_dataPin, _clockPin, 8);
    val *= 256;
 808108c:	ea4f 2900 	mov.w	r9, r0, lsl #8
    
    // Send the required ack
    pinMode(_dataPin, OUTPUT);
 8081090:	4620      	mov	r0, r4
 8081092:	f002 f827 	bl	80830e4 <pinMode>
    digitalWrite(_dataPin, HIGH);
 8081096:	4620      	mov	r0, r4
 8081098:	2101      	movs	r1, #1
 808109a:	f002 f834 	bl	8083106 <digitalWrite>
    digitalWrite(_dataPin, LOW);
 808109e:	4620      	mov	r0, r4
 80810a0:	2100      	movs	r1, #0
 80810a2:	f002 f830 	bl	8083106 <digitalWrite>
    digitalWrite(_clockPin, HIGH);
 80810a6:	4638      	mov	r0, r7
 80810a8:	2101      	movs	r1, #1
 80810aa:	f002 f82c 	bl	8083106 <digitalWrite>
    digitalWrite(_clockPin, LOW);
 80810ae:	4638      	mov	r0, r7
 80810b0:	2100      	movs	r1, #0
 80810b2:	f002 f828 	bl	8083106 <digitalWrite>
    
    // Get the least significant bits
    pinMode(_dataPin, INPUT);
 80810b6:	4620      	mov	r0, r4
 80810b8:	2100      	movs	r1, #0
 80810ba:	f002 f813 	bl	80830e4 <pinMode>
    val |= shiftIn(_dataPin, _clockPin, 8);
 80810be:	2308      	movs	r3, #8
 80810c0:	4632      	mov	r2, r6
 80810c2:	4629      	mov	r1, r5
 80810c4:	4640      	mov	r0, r8
 80810c6:	f7ff ff56 	bl	8080f76 <_ZN5SHT1x7shiftInEiii>
    
    return val;
}
 80810ca:	ea49 0000 	orr.w	r0, r9, r0
 80810ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080810d2 <_ZN5SHT1x10skipCrcSHTEii>:

/**
 */
void SHT1x::skipCrcSHT(int _dataPin, int _clockPin)
{
 80810d2:	b538      	push	{r3, r4, r5, lr}
 80810d4:	4614      	mov	r4, r2
    // Skip acknowledge to end trans (no CRC)
    pinMode(_dataPin, OUTPUT);
 80810d6:	b28d      	uxth	r5, r1
    pinMode(_clockPin, OUTPUT);
 80810d8:	b2a4      	uxth	r4, r4
/**
 */
void SHT1x::skipCrcSHT(int _dataPin, int _clockPin)
{
    // Skip acknowledge to end trans (no CRC)
    pinMode(_dataPin, OUTPUT);
 80810da:	4628      	mov	r0, r5
 80810dc:	2101      	movs	r1, #1
 80810de:	f002 f801 	bl	80830e4 <pinMode>
    pinMode(_clockPin, OUTPUT);
 80810e2:	4620      	mov	r0, r4
 80810e4:	2101      	movs	r1, #1
 80810e6:	f001 fffd 	bl	80830e4 <pinMode>
    
    digitalWrite(_dataPin, HIGH);
 80810ea:	4628      	mov	r0, r5
 80810ec:	2101      	movs	r1, #1
 80810ee:	f002 f80a 	bl	8083106 <digitalWrite>
    digitalWrite(_clockPin, HIGH);
 80810f2:	4620      	mov	r0, r4
 80810f4:	2101      	movs	r1, #1
 80810f6:	f002 f806 	bl	8083106 <digitalWrite>
    digitalWrite(_clockPin, LOW);
 80810fa:	4620      	mov	r0, r4
}
 80810fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pinMode(_dataPin, OUTPUT);
    pinMode(_clockPin, OUTPUT);
    
    digitalWrite(_dataPin, HIGH);
    digitalWrite(_clockPin, HIGH);
    digitalWrite(_clockPin, LOW);
 8081100:	2100      	movs	r1, #0
 8081102:	f002 b800 	b.w	8083106 <digitalWrite>

08081106 <_ZN5SHT1x18readTemperatureRawEv>:

/**
 * Reads the current raw temperature value
 */
float SHT1x::readTemperatureRaw()
{
 8081106:	b538      	push	{r3, r4, r5, lr}
 8081108:	4604      	mov	r4, r0
    int _val;
    
    // Command to send to the SHT1x to request Temperature
    int _gTempCmd  = 0b00000011;
    
    sendCommandSHT(_gTempCmd, _dataPin, _clockPin);
 808110a:	e890 000c 	ldmia.w	r0, {r2, r3}
 808110e:	2103      	movs	r1, #3
 8081110:	f7ff ff4f 	bl	8080fb2 <_ZN5SHT1x14sendCommandSHTEiii>
    waitForResultSHT(_dataPin);
 8081114:	6821      	ldr	r1, [r4, #0]
 8081116:	4620      	mov	r0, r4
 8081118:	f7ff ff91 	bl	808103e <_ZN5SHT1x16waitForResultSHTEi>
    _val = getData16SHT(_dataPin, _clockPin);
 808111c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8081120:	4620      	mov	r0, r4
 8081122:	f7ff ff9d 	bl	8081060 <_ZN5SHT1x12getData16SHTEii>
    skipCrcSHT(_dataPin, _clockPin);
 8081126:	e894 0006 	ldmia.w	r4, {r1, r2}
    // Command to send to the SHT1x to request Temperature
    int _gTempCmd  = 0b00000011;
    
    sendCommandSHT(_gTempCmd, _dataPin, _clockPin);
    waitForResultSHT(_dataPin);
    _val = getData16SHT(_dataPin, _clockPin);
 808112a:	4605      	mov	r5, r0
    skipCrcSHT(_dataPin, _clockPin);
 808112c:	4620      	mov	r0, r4
 808112e:	f7ff ffd0 	bl	80810d2 <_ZN5SHT1x10skipCrcSHTEii>
    
    return (_val);
 8081132:	4628      	mov	r0, r5
 8081134:	f002 fef4 	bl	8083f20 <__aeabi_i2f>
}
 8081138:	bd38      	pop	{r3, r4, r5, pc}
	...

0808113c <_ZN5SHT1x16readTemperatureCEv>:

/**
 * Reads the current temperature in degrees Celsius
 */
float SHT1x::readTemperatureC()
{
 808113c:	b508      	push	{r3, lr}
    // Conversion coefficients from SHT15 datasheet
    const float Dat1 = -40.0;  // for 14 Bit @ 5V
    const float Dat2 =   0.01; // for 14 Bit DEGC
    
    // Fetch raw value
    _val = readTemperatureRaw();
 808113e:	f7ff ffe2 	bl	8081106 <_ZN5SHT1x18readTemperatureRawEv>
    
    // Convert raw value to degrees Celsius
    _temperature = (_val * Dat2) + Dat1;
    
    return (_temperature);
 8081142:	f003 f907 	bl	8084354 <__aeabi_f2iz>
 8081146:	f002 feeb 	bl	8083f20 <__aeabi_i2f>
 808114a:	4903      	ldr	r1, [pc, #12]	; (8081158 <_ZN5SHT1x16readTemperatureCEv+0x1c>)
 808114c:	f002 ff3c 	bl	8083fc8 <__aeabi_fmul>
 8081150:	4902      	ldr	r1, [pc, #8]	; (808115c <_ZN5SHT1x16readTemperatureCEv+0x20>)
 8081152:	f002 fe2f 	bl	8083db4 <__aeabi_fsub>
}
 8081156:	bd08      	pop	{r3, pc}
 8081158:	3c23d70a 	.word	0x3c23d70a
 808115c:	42200000 	.word	0x42200000

08081160 <_ZN5SHT1x12readHumidityEv>:

/**
 * Reads current temperature-corrected relative humidity
 */
float SHT1x::readHumidity()
{
 8081160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081162:	4604      	mov	r4, r0
    
    // Command to send to the SHT1x to request humidity
    int _gHumidCmd = 0b00000101;
    
    // Fetch the value from the sensor
    sendCommandSHT(_gHumidCmd, _dataPin, _clockPin);
 8081164:	e890 000c 	ldmia.w	r0, {r2, r3}
 8081168:	2105      	movs	r1, #5
 808116a:	f7ff ff22 	bl	8080fb2 <_ZN5SHT1x14sendCommandSHTEiii>
    waitForResultSHT(_dataPin);
 808116e:	6821      	ldr	r1, [r4, #0]
 8081170:	4620      	mov	r0, r4
 8081172:	f7ff ff64 	bl	808103e <_ZN5SHT1x16waitForResultSHTEi>
    _val = getData16SHT(_dataPin, _clockPin);
 8081176:	e894 0006 	ldmia.w	r4, {r1, r2}
 808117a:	4620      	mov	r0, r4
 808117c:	f7ff ff70 	bl	8081060 <_ZN5SHT1x12getData16SHTEii>
    skipCrcSHT(_dataPin, _clockPin);
 8081180:	e894 0006 	ldmia.w	r4, {r1, r2}
    int _gHumidCmd = 0b00000101;
    
    // Fetch the value from the sensor
    sendCommandSHT(_gHumidCmd, _dataPin, _clockPin);
    waitForResultSHT(_dataPin);
    _val = getData16SHT(_dataPin, _clockPin);
 8081184:	4605      	mov	r5, r0
    skipCrcSHT(_dataPin, _clockPin);
 8081186:	4620      	mov	r0, r4
 8081188:	f7ff ffa3 	bl	80810d2 <_ZN5SHT1x10skipCrcSHTEii>
    
    // Apply linear conversion to raw value
    _linearHumidity = X1 + X2 * _val + X3 * _val * _val;
 808118c:	4628      	mov	r0, r5
 808118e:	f002 fec7 	bl	8083f20 <__aeabi_i2f>
 8081192:	491f      	ldr	r1, [pc, #124]	; (8081210 <_ZN5SHT1x12readHumidityEv+0xb0>)
 8081194:	4605      	mov	r5, r0
 8081196:	f002 ff17 	bl	8083fc8 <__aeabi_fmul>
 808119a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 808119e:	f002 fe09 	bl	8083db4 <__aeabi_fsub>
 80811a2:	491c      	ldr	r1, [pc, #112]	; (8081214 <_ZN5SHT1x12readHumidityEv+0xb4>)
 80811a4:	4606      	mov	r6, r0
 80811a6:	4628      	mov	r0, r5
 80811a8:	f002 ff0e 	bl	8083fc8 <__aeabi_fmul>
 80811ac:	4629      	mov	r1, r5
 80811ae:	f002 ff0b 	bl	8083fc8 <__aeabi_fmul>
 80811b2:	4601      	mov	r1, r0
 80811b4:	4630      	mov	r0, r6
 80811b6:	f002 fdff 	bl	8083db8 <__addsf3>
 80811ba:	4606      	mov	r6, r0
    
    // Get current temperature for humidity correction
    _temperature = readTemperatureC();
 80811bc:	4620      	mov	r0, r4
 80811be:	f7ff ffbd 	bl	808113c <_ZN5SHT1x16readTemperatureCEv>
    
    // Correct humidity value for current temperature
    _correctedHumidity = (_temperature - 25.0 ) * (T1 + T2 * _val) + _linearHumidity;
    
    return (_correctedHumidity);
 80811c2:	4915      	ldr	r1, [pc, #84]	; (8081218 <_ZN5SHT1x12readHumidityEv+0xb8>)
    
    // Apply linear conversion to raw value
    _linearHumidity = X1 + X2 * _val + X3 * _val * _val;
    
    // Get current temperature for humidity correction
    _temperature = readTemperatureC();
 80811c4:	4607      	mov	r7, r0
    
    // Correct humidity value for current temperature
    _correctedHumidity = (_temperature - 25.0 ) * (T1 + T2 * _val) + _linearHumidity;
    
    return (_correctedHumidity);
 80811c6:	4628      	mov	r0, r5
 80811c8:	f002 fefe 	bl	8083fc8 <__aeabi_fmul>
 80811cc:	4913      	ldr	r1, [pc, #76]	; (808121c <_ZN5SHT1x12readHumidityEv+0xbc>)
 80811ce:	f002 fdf3 	bl	8083db8 <__addsf3>
 80811d2:	f002 fb35 	bl	8083840 <__aeabi_f2d>
 80811d6:	4604      	mov	r4, r0
 80811d8:	4638      	mov	r0, r7
 80811da:	460d      	mov	r5, r1
 80811dc:	f002 fb30 	bl	8083840 <__aeabi_f2d>
 80811e0:	2200      	movs	r2, #0
 80811e2:	4b0f      	ldr	r3, [pc, #60]	; (8081220 <_ZN5SHT1x12readHumidityEv+0xc0>)
 80811e4:	f002 f9cc 	bl	8083580 <__aeabi_dsub>
 80811e8:	4602      	mov	r2, r0
 80811ea:	460b      	mov	r3, r1
 80811ec:	4620      	mov	r0, r4
 80811ee:	4629      	mov	r1, r5
 80811f0:	f002 fb7a 	bl	80838e8 <__aeabi_dmul>
 80811f4:	4604      	mov	r4, r0
 80811f6:	4630      	mov	r0, r6
 80811f8:	460d      	mov	r5, r1
 80811fa:	f002 fb21 	bl	8083840 <__aeabi_f2d>
 80811fe:	4602      	mov	r2, r0
 8081200:	460b      	mov	r3, r1
 8081202:	4620      	mov	r0, r4
 8081204:	4629      	mov	r1, r5
 8081206:	f002 f9bd 	bl	8083584 <__adddf3>
 808120a:	f002 fd7f 	bl	8083d0c <__aeabi_d2f>
}
 808120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8081210:	3d25e354 	.word	0x3d25e354
 8081214:	b63be7a2 	.word	0xb63be7a2
 8081218:	38a7c5ac 	.word	0x38a7c5ac
 808121c:	3c23d70a 	.word	0x3c23d70a
 8081220:	40390000 	.word	0x40390000

08081224 <_GLOBAL__sub_I__ZN5SHT1xC2Eii>:
 8081224:	f000 b926 	b.w	8081474 <HAL_Pin_Map>

08081228 <_ZN5SVCS3C1Ev>:
 */
#include "vcs3i2c.h"


SVCS3::SVCS3(){
  addr=0x63;
 8081228:	2363      	movs	r3, #99	; 0x63
 808122a:	6003      	str	r3, [r0, #0]
}
 808122c:	4770      	bx	lr

0808122e <_ZN5SVCS34initEi>:

int SVCS3::init(int address) {
 808122e:	b508      	push	{r3, lr}
  addr = address;
 8081230:	6001      	str	r1, [r0, #0]
  Wire.begin();
 8081232:	f001 ffcb 	bl	80831cc <_Z19__fetch_global_Wirev>
 8081236:	f001 f841 	bl	80822bc <_ZN7TwoWire5beginEv>
  return 1;
}
 808123a:	2001      	movs	r0, #1
 808123c:	bd08      	pop	{r3, pc}

0808123e <_ZN5SVCS38getStateEv>:


int SVCS3::getState(){ //-1:no data, 0:err, 1:ok
 808123e:	b510      	push	{r4, lr}
 8081240:	4604      	mov	r4, r0
  Wire.requestFrom(addr, 1, false);
 8081242:	f001 ffc3 	bl	80831cc <_Z19__fetch_global_Wirev>
 8081246:	2300      	movs	r3, #0
 8081248:	2201      	movs	r2, #1
 808124a:	6821      	ldr	r1, [r4, #0]
 808124c:	f001 f845 	bl	80822da <_ZN7TwoWire11requestFromEiii>
  if(Wire.available()>0){
 8081250:	f001 ffbc 	bl	80831cc <_Z19__fetch_global_Wirev>
 8081254:	6803      	ldr	r3, [r0, #0]
 8081256:	691b      	ldr	r3, [r3, #16]
 8081258:	4798      	blx	r3
 808125a:	2800      	cmp	r0, #0
 808125c:	dd06      	ble.n	808126c <_ZN5SVCS38getStateEv+0x2e>
    return Wire.read();
 808125e:	f001 ffb5 	bl	80831cc <_Z19__fetch_global_Wirev>
  }else{
    return -1;
  }
}
 8081262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


int SVCS3::getState(){ //-1:no data, 0:err, 1:ok
  Wire.requestFrom(addr, 1, false);
  if(Wire.available()>0){
    return Wire.read();
 8081266:	6803      	ldr	r3, [r0, #0]
 8081268:	695b      	ldr	r3, [r3, #20]
 808126a:	4718      	bx	r3
  }else{
    return -1;
  }
}
 808126c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8081270:	bd10      	pop	{r4, pc}

08081272 <_ZN5SVCS36getValEh>:

int16_t SVCS3::getVal(byte reg){
 8081272:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081274:	4604      	mov	r4, r0
 8081276:	460d      	mov	r5, r1

  Wire.beginTransmission(addr); // transmit to device
 8081278:	f001 ffa8 	bl	80831cc <_Z19__fetch_global_Wirev>
 808127c:	6821      	ldr	r1, [r4, #0]
 808127e:	f001 f835 	bl	80822ec <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);              // sends one byte
 8081282:	f001 ffa3 	bl	80831cc <_Z19__fetch_global_Wirev>
 8081286:	6803      	ldr	r3, [r0, #0]
 8081288:	4629      	mov	r1, r5
 808128a:	689b      	ldr	r3, [r3, #8]
 808128c:	4798      	blx	r3
  Wire.endTransmission();    // stop transmitting
 808128e:	f001 ff9d 	bl	80831cc <_Z19__fetch_global_Wirev>
 8081292:	f001 f832 	bl	80822fa <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(addr, 2, false);
 8081296:	f001 ff99 	bl	80831cc <_Z19__fetch_global_Wirev>
 808129a:	2202      	movs	r2, #2
 808129c:	6821      	ldr	r1, [r4, #0]
 808129e:	2300      	movs	r3, #0
 80812a0:	f001 f81b 	bl	80822da <_ZN7TwoWire11requestFromEiii>
  int16_t ret=0;
 80812a4:	2300      	movs	r3, #0
 80812a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(Wire.available()>1){
 80812aa:	f001 ff8f 	bl	80831cc <_Z19__fetch_global_Wirev>
 80812ae:	6803      	ldr	r3, [r0, #0]
 80812b0:	691b      	ldr	r3, [r3, #16]
 80812b2:	4798      	blx	r3
 80812b4:	2801      	cmp	r0, #1
 80812b6:	dd0d      	ble.n	80812d4 <_ZN5SVCS36getValEh+0x62>
    byte *pointer = (byte *)&ret;
    pointer[0] = Wire.read();
 80812b8:	f001 ff88 	bl	80831cc <_Z19__fetch_global_Wirev>
 80812bc:	6803      	ldr	r3, [r0, #0]
 80812be:	695b      	ldr	r3, [r3, #20]
 80812c0:	4798      	blx	r3
 80812c2:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = Wire.read();
 80812c6:	f001 ff81 	bl	80831cc <_Z19__fetch_global_Wirev>
 80812ca:	6803      	ldr	r3, [r0, #0]
 80812cc:	695b      	ldr	r3, [r3, #20]
 80812ce:	4798      	blx	r3
 80812d0:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 80812d4:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80812d8:	b003      	add	sp, #12
 80812da:	bd30      	pop	{r4, r5, pc}

080812dc <_ZN5SVCS36setRegEh>:
  Wire.write(val);              // sends one byte
  Wire.endTransmission();    // stop transmitting
  return getState();
}

int SVCS3::setReg(byte reg){
 80812dc:	b538      	push	{r3, r4, r5, lr}
 80812de:	4604      	mov	r4, r0
 80812e0:	460d      	mov	r5, r1
  Wire.beginTransmission(addr); // transmit to device
 80812e2:	f001 ff73 	bl	80831cc <_Z19__fetch_global_Wirev>
 80812e6:	6821      	ldr	r1, [r4, #0]
 80812e8:	f001 f800 	bl	80822ec <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);              // sends one byte
 80812ec:	f001 ff6e 	bl	80831cc <_Z19__fetch_global_Wirev>
 80812f0:	6803      	ldr	r3, [r0, #0]
 80812f2:	4629      	mov	r1, r5
 80812f4:	689b      	ldr	r3, [r3, #8]
 80812f6:	4798      	blx	r3
  Wire.endTransmission();    // stop transmitting
 80812f8:	f001 ff68 	bl	80831cc <_Z19__fetch_global_Wirev>
 80812fc:	f000 fffd 	bl	80822fa <_ZN7TwoWire15endTransmissionEv>
  return getState();
 8081300:	4620      	mov	r0, r4
}
 8081302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

int SVCS3::setReg(byte reg){
  Wire.beginTransmission(addr); // transmit to device
  Wire.write(reg);              // sends one byte
  Wire.endTransmission();    // stop transmitting
  return getState();
 8081306:	f7ff bf9a 	b.w	808123e <_ZN5SVCS38getStateEv>

0808130a <_ZN5SVCS310newReadingEv>:
  }
  return 1;
}

int SVCS3::newReading(){
  return setReg(REG_READ_START);
 808130a:	2101      	movs	r1, #1
 808130c:	f7ff bfe6 	b.w	80812dc <_ZN5SVCS36setRegEh>

08081310 <_ZN5SVCS35getECEv>:
{
  return getVal(REG_READ_E25)/100.0;
}

float SVCS3::getEC()
{
 8081310:	b508      	push	{r3, lr}
  return getVal(REG_READ_EC)/10.0;
 8081312:	2103      	movs	r1, #3
 8081314:	f7ff ffad 	bl	8081272 <_ZN5SVCS36getValEh>
 8081318:	f002 fa80 	bl	808381c <__aeabi_i2d>
 808131c:	2200      	movs	r2, #0
 808131e:	4b03      	ldr	r3, [pc, #12]	; (808132c <_ZN5SVCS35getECEv+0x1c>)
 8081320:	f002 fc0c 	bl	8083b3c <__aeabi_ddiv>
 8081324:	f002 fcf2 	bl	8083d0c <__aeabi_d2f>
}
 8081328:	bd08      	pop	{r3, pc}
 808132a:	bf00      	nop
 808132c:	40240000 	.word	0x40240000

08081330 <_ZN5SVCS37getTempEv>:

float SVCS3::getTemp()
{
 8081330:	b508      	push	{r3, lr}
  return getVal(REG_READ_TEMP)/100.0;
 8081332:	2104      	movs	r1, #4
 8081334:	f7ff ff9d 	bl	8081272 <_ZN5SVCS36getValEh>
 8081338:	f002 fa70 	bl	808381c <__aeabi_i2d>
 808133c:	2200      	movs	r2, #0
 808133e:	4b03      	ldr	r3, [pc, #12]	; (808134c <_ZN5SVCS37getTempEv+0x1c>)
 8081340:	f002 fbfc 	bl	8083b3c <__aeabi_ddiv>
 8081344:	f002 fce2 	bl	8083d0c <__aeabi_d2f>
}
 8081348:	bd08      	pop	{r3, pc}
 808134a:	bf00      	nop
 808134c:	40590000 	.word	0x40590000

08081350 <_ZN5SVCS36getVWCEv>:

float SVCS3::getVWC()
{
 8081350:	b508      	push	{r3, lr}
  return getVal(REG_READ_VWC)/10.0;
 8081352:	2105      	movs	r1, #5
 8081354:	f7ff ff8d 	bl	8081272 <_ZN5SVCS36getValEh>
 8081358:	f002 fa60 	bl	808381c <__aeabi_i2d>
 808135c:	2200      	movs	r2, #0
 808135e:	4b03      	ldr	r3, [pc, #12]	; (808136c <_ZN5SVCS36getVWCEv+0x1c>)
 8081360:	f002 fbec 	bl	8083b3c <__aeabi_ddiv>
 8081364:	f002 fcd2 	bl	8083d0c <__aeabi_d2f>
}
 8081368:	bd08      	pop	{r3, pc}
 808136a:	bf00      	nop
 808136c:	40240000 	.word	0x40240000

08081370 <_GLOBAL__sub_I__ZN5SVCS3C2Ev>:
 8081370:	f000 b880 	b.w	8081474 <HAL_Pin_Map>

08081374 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081374:	b508      	push	{r3, lr}
 8081376:	4b02      	ldr	r3, [pc, #8]	; (8081380 <inet_gethostbyname+0xc>)
 8081378:	681b      	ldr	r3, [r3, #0]
 808137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808137c:	9301      	str	r3, [sp, #4]
 808137e:	bd08      	pop	{r3, pc}
 8081380:	08060020 	.word	0x08060020

08081384 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081384:	b508      	push	{r3, lr}
 8081386:	4b02      	ldr	r3, [pc, #8]	; (8081390 <cellular_signal+0xc>)
 8081388:	681b      	ldr	r3, [r3, #0]
 808138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808138c:	9301      	str	r3, [sp, #4]
 808138e:	bd08      	pop	{r3, pc}
 8081390:	08060020 	.word	0x08060020

08081394 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081394:	b508      	push	{r3, lr}
 8081396:	4b02      	ldr	r3, [pc, #8]	; (80813a0 <cellular_command+0xc>)
 8081398:	681b      	ldr	r3, [r3, #0]
 808139a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808139c:	9301      	str	r3, [sp, #4]
 808139e:	bd08      	pop	{r3, pc}
 80813a0:	08060020 	.word	0x08060020

080813a4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80813a4:	b508      	push	{r3, lr}
 80813a6:	4b02      	ldr	r3, [pc, #8]	; (80813b0 <os_mutex_create+0xc>)
 80813a8:	681b      	ldr	r3, [r3, #0]
 80813aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80813ac:	9301      	str	r3, [sp, #4]
 80813ae:	bd08      	pop	{r3, pc}
 80813b0:	080401d0 	.word	0x080401d0

080813b4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80813b4:	b508      	push	{r3, lr}
 80813b6:	4b02      	ldr	r3, [pc, #8]	; (80813c0 <HAL_Feature_Set+0xc>)
 80813b8:	681b      	ldr	r3, [r3, #0]
 80813ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80813bc:	9301      	str	r3, [sp, #4]
 80813be:	bd08      	pop	{r3, pc}
 80813c0:	080401b8 	.word	0x080401b8

080813c4 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80813c4:	b508      	push	{r3, lr}
 80813c6:	4b02      	ldr	r3, [pc, #8]	; (80813d0 <HAL_Core_System_Reset_Ex+0xc>)
 80813c8:	681b      	ldr	r3, [r3, #0]
 80813ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80813cc:	9301      	str	r3, [sp, #4]
 80813ce:	bd08      	pop	{r3, pc}
 80813d0:	080401b8 	.word	0x080401b8

080813d4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80813d4:	b508      	push	{r3, lr}
 80813d6:	4b02      	ldr	r3, [pc, #8]	; (80813e0 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80813d8:	681b      	ldr	r3, [r3, #0]
 80813da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80813dc:	9301      	str	r3, [sp, #4]
 80813de:	bd08      	pop	{r3, pc}
 80813e0:	080401b8 	.word	0x080401b8

080813e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80813e4:	b508      	push	{r3, lr}
 80813e6:	4b02      	ldr	r3, [pc, #8]	; (80813f0 <HAL_RNG_GetRandomNumber+0xc>)
 80813e8:	681b      	ldr	r3, [r3, #0]
 80813ea:	685b      	ldr	r3, [r3, #4]
 80813ec:	9301      	str	r3, [sp, #4]
 80813ee:	bd08      	pop	{r3, pc}
 80813f0:	0804019c 	.word	0x0804019c

080813f4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80813f4:	b508      	push	{r3, lr}
 80813f6:	4b02      	ldr	r3, [pc, #8]	; (8081400 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80813f8:	681b      	ldr	r3, [r3, #0]
 80813fa:	695b      	ldr	r3, [r3, #20]
 80813fc:	9301      	str	r3, [sp, #4]
 80813fe:	bd08      	pop	{r3, pc}
 8081400:	0804019c 	.word	0x0804019c

08081404 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081404:	b508      	push	{r3, lr}
 8081406:	4b02      	ldr	r3, [pc, #8]	; (8081410 <HAL_RTC_Get_UnixTime+0xc>)
 8081408:	681b      	ldr	r3, [r3, #0]
 808140a:	69db      	ldr	r3, [r3, #28]
 808140c:	9301      	str	r3, [sp, #4]
 808140e:	bd08      	pop	{r3, pc}
 8081410:	0804019c 	.word	0x0804019c

08081414 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 8081414:	b508      	push	{r3, lr}
 8081416:	4b02      	ldr	r3, [pc, #8]	; (8081420 <HAL_EEPROM_Init+0xc>)
 8081418:	681b      	ldr	r3, [r3, #0]
 808141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808141c:	9301      	str	r3, [sp, #4]
 808141e:	bd08      	pop	{r3, pc}
 8081420:	0804019c 	.word	0x0804019c

08081424 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 8081424:	b508      	push	{r3, lr}
 8081426:	4b02      	ldr	r3, [pc, #8]	; (8081430 <HAL_EEPROM_Read+0xc>)
 8081428:	681b      	ldr	r3, [r3, #0]
 808142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808142c:	9301      	str	r3, [sp, #4]
 808142e:	bd08      	pop	{r3, pc}
 8081430:	0804019c 	.word	0x0804019c

08081434 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 8081434:	b508      	push	{r3, lr}
 8081436:	4b02      	ldr	r3, [pc, #8]	; (8081440 <HAL_EEPROM_Write+0xc>)
 8081438:	681b      	ldr	r3, [r3, #0]
 808143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808143c:	9301      	str	r3, [sp, #4]
 808143e:	bd08      	pop	{r3, pc}
 8081440:	0804019c 	.word	0x0804019c

08081444 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 8081444:	b508      	push	{r3, lr}
 8081446:	4b02      	ldr	r3, [pc, #8]	; (8081450 <HAL_EEPROM_Put+0xc>)
 8081448:	681b      	ldr	r3, [r3, #0]
 808144a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808144c:	9301      	str	r3, [sp, #4]
 808144e:	bd08      	pop	{r3, pc}
 8081450:	0804019c 	.word	0x0804019c

08081454 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081454:	b508      	push	{r3, lr}
 8081456:	4b02      	ldr	r3, [pc, #8]	; (8081460 <HAL_RTC_Time_Is_Valid+0xc>)
 8081458:	681b      	ldr	r3, [r3, #0]
 808145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808145c:	9301      	str	r3, [sp, #4]
 808145e:	bd08      	pop	{r3, pc}
 8081460:	0804019c 	.word	0x0804019c

08081464 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081464:	b508      	push	{r3, lr}
 8081466:	4b02      	ldr	r3, [pc, #8]	; (8081470 <hal_timer_millis+0xc>)
 8081468:	681b      	ldr	r3, [r3, #0]
 808146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808146c:	9301      	str	r3, [sp, #4]
 808146e:	bd08      	pop	{r3, pc}
 8081470:	0804019c 	.word	0x0804019c

08081474 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8081474:	b508      	push	{r3, lr}
 8081476:	4b02      	ldr	r3, [pc, #8]	; (8081480 <HAL_Pin_Map+0xc>)
 8081478:	681b      	ldr	r3, [r3, #0]
 808147a:	681b      	ldr	r3, [r3, #0]
 808147c:	9301      	str	r3, [sp, #4]
 808147e:	bd08      	pop	{r3, pc}
 8081480:	080401b0 	.word	0x080401b0

08081484 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081484:	b508      	push	{r3, lr}
 8081486:	4b02      	ldr	r3, [pc, #8]	; (8081490 <HAL_Pin_Mode+0xc>)
 8081488:	681b      	ldr	r3, [r3, #0]
 808148a:	689b      	ldr	r3, [r3, #8]
 808148c:	9301      	str	r3, [sp, #4]
 808148e:	bd08      	pop	{r3, pc}
 8081490:	080401b0 	.word	0x080401b0

08081494 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081494:	b508      	push	{r3, lr}
 8081496:	4b02      	ldr	r3, [pc, #8]	; (80814a0 <HAL_Get_Pin_Mode+0xc>)
 8081498:	681b      	ldr	r3, [r3, #0]
 808149a:	68db      	ldr	r3, [r3, #12]
 808149c:	9301      	str	r3, [sp, #4]
 808149e:	bd08      	pop	{r3, pc}
 80814a0:	080401b0 	.word	0x080401b0

080814a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80814a4:	b508      	push	{r3, lr}
 80814a6:	4b02      	ldr	r3, [pc, #8]	; (80814b0 <HAL_GPIO_Write+0xc>)
 80814a8:	681b      	ldr	r3, [r3, #0]
 80814aa:	691b      	ldr	r3, [r3, #16]
 80814ac:	9301      	str	r3, [sp, #4]
 80814ae:	bd08      	pop	{r3, pc}
 80814b0:	080401b0 	.word	0x080401b0

080814b4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80814b4:	b508      	push	{r3, lr}
 80814b6:	4b02      	ldr	r3, [pc, #8]	; (80814c0 <HAL_GPIO_Read+0xc>)
 80814b8:	681b      	ldr	r3, [r3, #0]
 80814ba:	695b      	ldr	r3, [r3, #20]
 80814bc:	9301      	str	r3, [sp, #4]
 80814be:	bd08      	pop	{r3, pc}
 80814c0:	080401b0 	.word	0x080401b0

080814c4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80814c4:	b508      	push	{r3, lr}
 80814c6:	4b02      	ldr	r3, [pc, #8]	; (80814d0 <HAL_Interrupts_Attach+0xc>)
 80814c8:	681b      	ldr	r3, [r3, #0]
 80814ca:	699b      	ldr	r3, [r3, #24]
 80814cc:	9301      	str	r3, [sp, #4]
 80814ce:	bd08      	pop	{r3, pc}
 80814d0:	080401b0 	.word	0x080401b0

080814d4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80814d4:	b508      	push	{r3, lr}
 80814d6:	4b02      	ldr	r3, [pc, #8]	; (80814e0 <HAL_Interrupts_Detach+0xc>)
 80814d8:	681b      	ldr	r3, [r3, #0]
 80814da:	69db      	ldr	r3, [r3, #28]
 80814dc:	9301      	str	r3, [sp, #4]
 80814de:	bd08      	pop	{r3, pc}
 80814e0:	080401b0 	.word	0x080401b0

080814e4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80814e4:	b508      	push	{r3, lr}
 80814e6:	4b02      	ldr	r3, [pc, #8]	; (80814f0 <HAL_I2C_Begin+0xc>)
 80814e8:	681b      	ldr	r3, [r3, #0]
 80814ea:	68db      	ldr	r3, [r3, #12]
 80814ec:	9301      	str	r3, [sp, #4]
 80814ee:	bd08      	pop	{r3, pc}
 80814f0:	080401ac 	.word	0x080401ac

080814f4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80814f4:	b508      	push	{r3, lr}
 80814f6:	4b02      	ldr	r3, [pc, #8]	; (8081500 <HAL_I2C_Request_Data+0xc>)
 80814f8:	681b      	ldr	r3, [r3, #0]
 80814fa:	695b      	ldr	r3, [r3, #20]
 80814fc:	9301      	str	r3, [sp, #4]
 80814fe:	bd08      	pop	{r3, pc}
 8081500:	080401ac 	.word	0x080401ac

08081504 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8081504:	b508      	push	{r3, lr}
 8081506:	4b02      	ldr	r3, [pc, #8]	; (8081510 <HAL_I2C_Begin_Transmission+0xc>)
 8081508:	681b      	ldr	r3, [r3, #0]
 808150a:	699b      	ldr	r3, [r3, #24]
 808150c:	9301      	str	r3, [sp, #4]
 808150e:	bd08      	pop	{r3, pc}
 8081510:	080401ac 	.word	0x080401ac

08081514 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081514:	b508      	push	{r3, lr}
 8081516:	4b02      	ldr	r3, [pc, #8]	; (8081520 <HAL_I2C_End_Transmission+0xc>)
 8081518:	681b      	ldr	r3, [r3, #0]
 808151a:	69db      	ldr	r3, [r3, #28]
 808151c:	9301      	str	r3, [sp, #4]
 808151e:	bd08      	pop	{r3, pc}
 8081520:	080401ac 	.word	0x080401ac

08081524 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081524:	b508      	push	{r3, lr}
 8081526:	4b02      	ldr	r3, [pc, #8]	; (8081530 <HAL_I2C_Write_Data+0xc>)
 8081528:	681b      	ldr	r3, [r3, #0]
 808152a:	6a1b      	ldr	r3, [r3, #32]
 808152c:	9301      	str	r3, [sp, #4]
 808152e:	bd08      	pop	{r3, pc}
 8081530:	080401ac 	.word	0x080401ac

08081534 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081534:	b508      	push	{r3, lr}
 8081536:	4b02      	ldr	r3, [pc, #8]	; (8081540 <HAL_I2C_Available_Data+0xc>)
 8081538:	681b      	ldr	r3, [r3, #0]
 808153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808153c:	9301      	str	r3, [sp, #4]
 808153e:	bd08      	pop	{r3, pc}
 8081540:	080401ac 	.word	0x080401ac

08081544 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081544:	b508      	push	{r3, lr}
 8081546:	4b02      	ldr	r3, [pc, #8]	; (8081550 <HAL_I2C_Read_Data+0xc>)
 8081548:	681b      	ldr	r3, [r3, #0]
 808154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808154c:	9301      	str	r3, [sp, #4]
 808154e:	bd08      	pop	{r3, pc}
 8081550:	080401ac 	.word	0x080401ac

08081554 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081554:	b508      	push	{r3, lr}
 8081556:	4b02      	ldr	r3, [pc, #8]	; (8081560 <HAL_I2C_Peek_Data+0xc>)
 8081558:	681b      	ldr	r3, [r3, #0]
 808155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808155c:	9301      	str	r3, [sp, #4]
 808155e:	bd08      	pop	{r3, pc}
 8081560:	080401ac 	.word	0x080401ac

08081564 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081564:	b508      	push	{r3, lr}
 8081566:	4b02      	ldr	r3, [pc, #8]	; (8081570 <HAL_I2C_Flush_Data+0xc>)
 8081568:	681b      	ldr	r3, [r3, #0]
 808156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808156c:	9301      	str	r3, [sp, #4]
 808156e:	bd08      	pop	{r3, pc}
 8081570:	080401ac 	.word	0x080401ac

08081574 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081574:	b508      	push	{r3, lr}
 8081576:	4b02      	ldr	r3, [pc, #8]	; (8081580 <HAL_I2C_Is_Enabled+0xc>)
 8081578:	681b      	ldr	r3, [r3, #0]
 808157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808157c:	9301      	str	r3, [sp, #4]
 808157e:	bd08      	pop	{r3, pc}
 8081580:	080401ac 	.word	0x080401ac

08081584 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081584:	b508      	push	{r3, lr}
 8081586:	4b02      	ldr	r3, [pc, #8]	; (8081590 <HAL_I2C_Init+0xc>)
 8081588:	681b      	ldr	r3, [r3, #0]
 808158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808158c:	9301      	str	r3, [sp, #4]
 808158e:	bd08      	pop	{r3, pc}
 8081590:	080401ac 	.word	0x080401ac

08081594 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8081594:	b508      	push	{r3, lr}
 8081596:	4b02      	ldr	r3, [pc, #8]	; (80815a0 <HAL_I2C_Acquire+0xc>)
 8081598:	681b      	ldr	r3, [r3, #0]
 808159a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808159c:	9301      	str	r3, [sp, #4]
 808159e:	bd08      	pop	{r3, pc}
 80815a0:	080401ac 	.word	0x080401ac

080815a4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80815a4:	b508      	push	{r3, lr}
 80815a6:	4b02      	ldr	r3, [pc, #8]	; (80815b0 <HAL_I2C_Release+0xc>)
 80815a8:	681b      	ldr	r3, [r3, #0]
 80815aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80815ac:	9301      	str	r3, [sp, #4]
 80815ae:	bd08      	pop	{r3, pc}
 80815b0:	080401ac 	.word	0x080401ac

080815b4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80815b4:	b508      	push	{r3, lr}
 80815b6:	4b02      	ldr	r3, [pc, #8]	; (80815c0 <HAL_SPI_Init+0xc>)
 80815b8:	681b      	ldr	r3, [r3, #0]
 80815ba:	69db      	ldr	r3, [r3, #28]
 80815bc:	9301      	str	r3, [sp, #4]
 80815be:	bd08      	pop	{r3, pc}
 80815c0:	080401b4 	.word	0x080401b4

080815c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80815c4:	b508      	push	{r3, lr}
 80815c6:	4b02      	ldr	r3, [pc, #8]	; (80815d0 <HAL_SPI_Is_Enabled+0xc>)
 80815c8:	681b      	ldr	r3, [r3, #0]
 80815ca:	6a1b      	ldr	r3, [r3, #32]
 80815cc:	9301      	str	r3, [sp, #4]
 80815ce:	bd08      	pop	{r3, pc}
 80815d0:	080401b4 	.word	0x080401b4

080815d4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80815d4:	b508      	push	{r3, lr}
 80815d6:	4b02      	ldr	r3, [pc, #8]	; (80815e0 <HAL_USART_Init+0xc>)
 80815d8:	681b      	ldr	r3, [r3, #0]
 80815da:	699b      	ldr	r3, [r3, #24]
 80815dc:	9301      	str	r3, [sp, #4]
 80815de:	bd08      	pop	{r3, pc}
 80815e0:	080401c4 	.word	0x080401c4

080815e4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80815e4:	b508      	push	{r3, lr}
 80815e6:	4b02      	ldr	r3, [pc, #8]	; (80815f0 <HAL_USART_Write_Data+0xc>)
 80815e8:	681b      	ldr	r3, [r3, #0]
 80815ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80815ec:	9301      	str	r3, [sp, #4]
 80815ee:	bd08      	pop	{r3, pc}
 80815f0:	080401c4 	.word	0x080401c4

080815f4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80815f4:	b508      	push	{r3, lr}
 80815f6:	4b02      	ldr	r3, [pc, #8]	; (8081600 <HAL_USART_Available_Data+0xc>)
 80815f8:	681b      	ldr	r3, [r3, #0]
 80815fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80815fc:	9301      	str	r3, [sp, #4]
 80815fe:	bd08      	pop	{r3, pc}
 8081600:	080401c4 	.word	0x080401c4

08081604 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081604:	b508      	push	{r3, lr}
 8081606:	4b02      	ldr	r3, [pc, #8]	; (8081610 <HAL_USART_Read_Data+0xc>)
 8081608:	681b      	ldr	r3, [r3, #0]
 808160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808160c:	9301      	str	r3, [sp, #4]
 808160e:	bd08      	pop	{r3, pc}
 8081610:	080401c4 	.word	0x080401c4

08081614 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081614:	b508      	push	{r3, lr}
 8081616:	4b02      	ldr	r3, [pc, #8]	; (8081620 <HAL_USART_Peek_Data+0xc>)
 8081618:	681b      	ldr	r3, [r3, #0]
 808161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808161c:	9301      	str	r3, [sp, #4]
 808161e:	bd08      	pop	{r3, pc}
 8081620:	080401c4 	.word	0x080401c4

08081624 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081624:	b508      	push	{r3, lr}
 8081626:	4b02      	ldr	r3, [pc, #8]	; (8081630 <HAL_USART_Flush_Data+0xc>)
 8081628:	681b      	ldr	r3, [r3, #0]
 808162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808162c:	9301      	str	r3, [sp, #4]
 808162e:	bd08      	pop	{r3, pc}
 8081630:	080401c4 	.word	0x080401c4

08081634 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081634:	b508      	push	{r3, lr}
 8081636:	4b02      	ldr	r3, [pc, #8]	; (8081640 <HAL_USART_Is_Enabled+0xc>)
 8081638:	681b      	ldr	r3, [r3, #0]
 808163a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808163c:	9301      	str	r3, [sp, #4]
 808163e:	bd08      	pop	{r3, pc}
 8081640:	080401c4 	.word	0x080401c4

08081644 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081644:	b508      	push	{r3, lr}
 8081646:	4b02      	ldr	r3, [pc, #8]	; (8081650 <HAL_USART_Available_Data_For_Write+0xc>)
 8081648:	681b      	ldr	r3, [r3, #0]
 808164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808164c:	9301      	str	r3, [sp, #4]
 808164e:	bd08      	pop	{r3, pc}
 8081650:	080401c4 	.word	0x080401c4

08081654 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081654:	b508      	push	{r3, lr}
 8081656:	4b02      	ldr	r3, [pc, #8]	; (8081660 <HAL_USB_USART_Init+0xc>)
 8081658:	681b      	ldr	r3, [r3, #0]
 808165a:	681b      	ldr	r3, [r3, #0]
 808165c:	9301      	str	r3, [sp, #4]
 808165e:	bd08      	pop	{r3, pc}
 8081660:	0806001c 	.word	0x0806001c

08081664 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081664:	b508      	push	{r3, lr}
 8081666:	4b02      	ldr	r3, [pc, #8]	; (8081670 <HAL_USB_USART_Available_Data+0xc>)
 8081668:	681b      	ldr	r3, [r3, #0]
 808166a:	691b      	ldr	r3, [r3, #16]
 808166c:	9301      	str	r3, [sp, #4]
 808166e:	bd08      	pop	{r3, pc}
 8081670:	0806001c 	.word	0x0806001c

08081674 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081674:	b508      	push	{r3, lr}
 8081676:	4b02      	ldr	r3, [pc, #8]	; (8081680 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081678:	681b      	ldr	r3, [r3, #0]
 808167a:	695b      	ldr	r3, [r3, #20]
 808167c:	9301      	str	r3, [sp, #4]
 808167e:	bd08      	pop	{r3, pc}
 8081680:	0806001c 	.word	0x0806001c

08081684 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081684:	b508      	push	{r3, lr}
 8081686:	4b02      	ldr	r3, [pc, #8]	; (8081690 <HAL_USB_USART_Receive_Data+0xc>)
 8081688:	681b      	ldr	r3, [r3, #0]
 808168a:	699b      	ldr	r3, [r3, #24]
 808168c:	9301      	str	r3, [sp, #4]
 808168e:	bd08      	pop	{r3, pc}
 8081690:	0806001c 	.word	0x0806001c

08081694 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081694:	b508      	push	{r3, lr}
 8081696:	4b02      	ldr	r3, [pc, #8]	; (80816a0 <HAL_USB_USART_Send_Data+0xc>)
 8081698:	681b      	ldr	r3, [r3, #0]
 808169a:	69db      	ldr	r3, [r3, #28]
 808169c:	9301      	str	r3, [sp, #4]
 808169e:	bd08      	pop	{r3, pc}
 80816a0:	0806001c 	.word	0x0806001c

080816a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80816a4:	b508      	push	{r3, lr}
 80816a6:	4b02      	ldr	r3, [pc, #8]	; (80816b0 <HAL_USB_USART_Flush_Data+0xc>)
 80816a8:	681b      	ldr	r3, [r3, #0]
 80816aa:	6a1b      	ldr	r3, [r3, #32]
 80816ac:	9301      	str	r3, [sp, #4]
 80816ae:	bd08      	pop	{r3, pc}
 80816b0:	0806001c 	.word	0x0806001c

080816b4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80816b4:	b508      	push	{r3, lr}
 80816b6:	4b02      	ldr	r3, [pc, #8]	; (80816c0 <system_mode+0xc>)
 80816b8:	681b      	ldr	r3, [r3, #0]
 80816ba:	681b      	ldr	r3, [r3, #0]
 80816bc:	9301      	str	r3, [sp, #4]
 80816be:	bd08      	pop	{r3, pc}
 80816c0:	080401a4 	.word	0x080401a4

080816c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80816c4:	b508      	push	{r3, lr}
 80816c6:	4b02      	ldr	r3, [pc, #8]	; (80816d0 <set_system_mode+0xc>)
 80816c8:	681b      	ldr	r3, [r3, #0]
 80816ca:	685b      	ldr	r3, [r3, #4]
 80816cc:	9301      	str	r3, [sp, #4]
 80816ce:	bd08      	pop	{r3, pc}
 80816d0:	080401a4 	.word	0x080401a4

080816d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80816d4:	b508      	push	{r3, lr}
 80816d6:	4b02      	ldr	r3, [pc, #8]	; (80816e0 <system_delay_ms+0xc>)
 80816d8:	681b      	ldr	r3, [r3, #0]
 80816da:	695b      	ldr	r3, [r3, #20]
 80816dc:	9301      	str	r3, [sp, #4]
 80816de:	bd08      	pop	{r3, pc}
 80816e0:	080401a4 	.word	0x080401a4

080816e4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80816e4:	b508      	push	{r3, lr}
 80816e6:	4b02      	ldr	r3, [pc, #8]	; (80816f0 <system_sleep+0xc>)
 80816e8:	681b      	ldr	r3, [r3, #0]
 80816ea:	699b      	ldr	r3, [r3, #24]
 80816ec:	9301      	str	r3, [sp, #4]
 80816ee:	bd08      	pop	{r3, pc}
 80816f0:	080401a4 	.word	0x080401a4

080816f4 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80816f4:	b508      	push	{r3, lr}
 80816f6:	4b02      	ldr	r3, [pc, #8]	; (8081700 <system_thread_set_state+0xc>)
 80816f8:	681b      	ldr	r3, [r3, #0]
 80816fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80816fc:	9301      	str	r3, [sp, #4]
 80816fe:	bd08      	pop	{r3, pc}
 8081700:	080401a4 	.word	0x080401a4

08081704 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081704:	b508      	push	{r3, lr}
 8081706:	4b02      	ldr	r3, [pc, #8]	; (8081710 <application_thread_current+0xc>)
 8081708:	681b      	ldr	r3, [r3, #0]
 808170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808170c:	9301      	str	r3, [sp, #4]
 808170e:	bd08      	pop	{r3, pc}
 8081710:	080401a4 	.word	0x080401a4

08081714 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081714:	b508      	push	{r3, lr}
 8081716:	4b02      	ldr	r3, [pc, #8]	; (8081720 <application_thread_invoke+0xc>)
 8081718:	681b      	ldr	r3, [r3, #0]
 808171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808171c:	9301      	str	r3, [sp, #4]
 808171e:	bd08      	pop	{r3, pc}
 8081720:	080401a4 	.word	0x080401a4

08081724 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081724:	b508      	push	{r3, lr}
 8081726:	4b02      	ldr	r3, [pc, #8]	; (8081730 <system_thread_get_state+0xc>)
 8081728:	681b      	ldr	r3, [r3, #0]
 808172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808172c:	9301      	str	r3, [sp, #4]
 808172e:	bd08      	pop	{r3, pc}
 8081730:	080401a4 	.word	0x080401a4

08081734 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081734:	b508      	push	{r3, lr}
 8081736:	4b03      	ldr	r3, [pc, #12]	; (8081744 <system_ctrl_set_app_request_handler+0x10>)
 8081738:	681b      	ldr	r3, [r3, #0]
 808173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808173e:	9301      	str	r3, [sp, #4]
 8081740:	bd08      	pop	{r3, pc}
 8081742:	0000      	.short	0x0000
 8081744:	080401a4 	.word	0x080401a4

08081748 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081748:	b508      	push	{r3, lr}
 808174a:	4b03      	ldr	r3, [pc, #12]	; (8081758 <system_ctrl_set_result+0x10>)
 808174c:	681b      	ldr	r3, [r3, #0]
 808174e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081752:	9301      	str	r3, [sp, #4]
 8081754:	bd08      	pop	{r3, pc}
 8081756:	0000      	.short	0x0000
 8081758:	080401a4 	.word	0x080401a4

0808175c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 808175c:	b508      	push	{r3, lr}
 808175e:	4b02      	ldr	r3, [pc, #8]	; (8081768 <spark_variable+0xc>)
 8081760:	681b      	ldr	r3, [r3, #0]
 8081762:	681b      	ldr	r3, [r3, #0]
 8081764:	9301      	str	r3, [sp, #4]
 8081766:	bd08      	pop	{r3, pc}
 8081768:	080401cc 	.word	0x080401cc

0808176c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808176c:	b508      	push	{r3, lr}
 808176e:	4b02      	ldr	r3, [pc, #8]	; (8081778 <spark_function+0xc>)
 8081770:	681b      	ldr	r3, [r3, #0]
 8081772:	685b      	ldr	r3, [r3, #4]
 8081774:	9301      	str	r3, [sp, #4]
 8081776:	bd08      	pop	{r3, pc}
 8081778:	080401cc 	.word	0x080401cc

0808177c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808177c:	b508      	push	{r3, lr}
 808177e:	4b02      	ldr	r3, [pc, #8]	; (8081788 <spark_process+0xc>)
 8081780:	681b      	ldr	r3, [r3, #0]
 8081782:	689b      	ldr	r3, [r3, #8]
 8081784:	9301      	str	r3, [sp, #4]
 8081786:	bd08      	pop	{r3, pc}
 8081788:	080401cc 	.word	0x080401cc

0808178c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808178c:	b508      	push	{r3, lr}
 808178e:	4b02      	ldr	r3, [pc, #8]	; (8081798 <spark_cloud_flag_connect+0xc>)
 8081790:	681b      	ldr	r3, [r3, #0]
 8081792:	68db      	ldr	r3, [r3, #12]
 8081794:	9301      	str	r3, [sp, #4]
 8081796:	bd08      	pop	{r3, pc}
 8081798:	080401cc 	.word	0x080401cc

0808179c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 808179c:	b508      	push	{r3, lr}
 808179e:	4b02      	ldr	r3, [pc, #8]	; (80817a8 <spark_cloud_flag_disconnect+0xc>)
 80817a0:	681b      	ldr	r3, [r3, #0]
 80817a2:	691b      	ldr	r3, [r3, #16]
 80817a4:	9301      	str	r3, [sp, #4]
 80817a6:	bd08      	pop	{r3, pc}
 80817a8:	080401cc 	.word	0x080401cc

080817ac <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80817ac:	b508      	push	{r3, lr}
 80817ae:	4b02      	ldr	r3, [pc, #8]	; (80817b8 <spark_cloud_flag_connected+0xc>)
 80817b0:	681b      	ldr	r3, [r3, #0]
 80817b2:	695b      	ldr	r3, [r3, #20]
 80817b4:	9301      	str	r3, [sp, #4]
 80817b6:	bd08      	pop	{r3, pc}
 80817b8:	080401cc 	.word	0x080401cc

080817bc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80817bc:	b508      	push	{r3, lr}
 80817be:	4b02      	ldr	r3, [pc, #8]	; (80817c8 <spark_deviceID+0xc>)
 80817c0:	681b      	ldr	r3, [r3, #0]
 80817c2:	69db      	ldr	r3, [r3, #28]
 80817c4:	9301      	str	r3, [sp, #4]
 80817c6:	bd08      	pop	{r3, pc}
 80817c8:	080401cc 	.word	0x080401cc

080817cc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80817cc:	b508      	push	{r3, lr}
 80817ce:	4b02      	ldr	r3, [pc, #8]	; (80817d8 <spark_send_event+0xc>)
 80817d0:	681b      	ldr	r3, [r3, #0]
 80817d2:	6a1b      	ldr	r3, [r3, #32]
 80817d4:	9301      	str	r3, [sp, #4]
 80817d6:	bd08      	pop	{r3, pc}
 80817d8:	080401cc 	.word	0x080401cc

080817dc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80817dc:	b508      	push	{r3, lr}
 80817de:	4b02      	ldr	r3, [pc, #8]	; (80817e8 <spark_subscribe+0xc>)
 80817e0:	681b      	ldr	r3, [r3, #0]
 80817e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80817e4:	9301      	str	r3, [sp, #4]
 80817e6:	bd08      	pop	{r3, pc}
 80817e8:	080401cc 	.word	0x080401cc

080817ec <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80817ec:	b508      	push	{r3, lr}
 80817ee:	4b02      	ldr	r3, [pc, #8]	; (80817f8 <spark_sync_time_pending+0xc>)
 80817f0:	681b      	ldr	r3, [r3, #0]
 80817f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80817f4:	9301      	str	r3, [sp, #4]
 80817f6:	bd08      	pop	{r3, pc}
 80817f8:	080401cc 	.word	0x080401cc

080817fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80817fc:	b508      	push	{r3, lr}
 80817fe:	4b02      	ldr	r3, [pc, #8]	; (8081808 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081800:	681b      	ldr	r3, [r3, #0]
 8081802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081804:	9301      	str	r3, [sp, #4]
 8081806:	bd08      	pop	{r3, pc}
 8081808:	080401cc 	.word	0x080401cc

0808180c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808180c:	b508      	push	{r3, lr}
 808180e:	4b02      	ldr	r3, [pc, #8]	; (8081818 <network_connect+0xc>)
 8081810:	681b      	ldr	r3, [r3, #0]
 8081812:	685b      	ldr	r3, [r3, #4]
 8081814:	9301      	str	r3, [sp, #4]
 8081816:	bd08      	pop	{r3, pc}
 8081818:	080401c8 	.word	0x080401c8

0808181c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808181c:	b508      	push	{r3, lr}
 808181e:	4b02      	ldr	r3, [pc, #8]	; (8081828 <network_connecting+0xc>)
 8081820:	681b      	ldr	r3, [r3, #0]
 8081822:	689b      	ldr	r3, [r3, #8]
 8081824:	9301      	str	r3, [sp, #4]
 8081826:	bd08      	pop	{r3, pc}
 8081828:	080401c8 	.word	0x080401c8

0808182c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808182c:	b508      	push	{r3, lr}
 808182e:	4b02      	ldr	r3, [pc, #8]	; (8081838 <network_disconnect+0xc>)
 8081830:	681b      	ldr	r3, [r3, #0]
 8081832:	68db      	ldr	r3, [r3, #12]
 8081834:	9301      	str	r3, [sp, #4]
 8081836:	bd08      	pop	{r3, pc}
 8081838:	080401c8 	.word	0x080401c8

0808183c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808183c:	b508      	push	{r3, lr}
 808183e:	4b02      	ldr	r3, [pc, #8]	; (8081848 <network_ready+0xc>)
 8081840:	681b      	ldr	r3, [r3, #0]
 8081842:	691b      	ldr	r3, [r3, #16]
 8081844:	9301      	str	r3, [sp, #4]
 8081846:	bd08      	pop	{r3, pc}
 8081848:	080401c8 	.word	0x080401c8

0808184c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808184c:	b508      	push	{r3, lr}
 808184e:	4b02      	ldr	r3, [pc, #8]	; (8081858 <network_on+0xc>)
 8081850:	681b      	ldr	r3, [r3, #0]
 8081852:	695b      	ldr	r3, [r3, #20]
 8081854:	9301      	str	r3, [sp, #4]
 8081856:	bd08      	pop	{r3, pc}
 8081858:	080401c8 	.word	0x080401c8

0808185c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808185c:	b508      	push	{r3, lr}
 808185e:	4b02      	ldr	r3, [pc, #8]	; (8081868 <network_off+0xc>)
 8081860:	681b      	ldr	r3, [r3, #0]
 8081862:	699b      	ldr	r3, [r3, #24]
 8081864:	9301      	str	r3, [sp, #4]
 8081866:	bd08      	pop	{r3, pc}
 8081868:	080401c8 	.word	0x080401c8

0808186c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808186c:	b508      	push	{r3, lr}
 808186e:	4b02      	ldr	r3, [pc, #8]	; (8081878 <network_listen+0xc>)
 8081870:	681b      	ldr	r3, [r3, #0]
 8081872:	69db      	ldr	r3, [r3, #28]
 8081874:	9301      	str	r3, [sp, #4]
 8081876:	bd08      	pop	{r3, pc}
 8081878:	080401c8 	.word	0x080401c8

0808187c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808187c:	b508      	push	{r3, lr}
 808187e:	4b02      	ldr	r3, [pc, #8]	; (8081888 <network_listening+0xc>)
 8081880:	681b      	ldr	r3, [r3, #0]
 8081882:	6a1b      	ldr	r3, [r3, #32]
 8081884:	9301      	str	r3, [sp, #4]
 8081886:	bd08      	pop	{r3, pc}
 8081888:	080401c8 	.word	0x080401c8

0808188c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808188c:	b508      	push	{r3, lr}
 808188e:	4b02      	ldr	r3, [pc, #8]	; (8081898 <network_set_listen_timeout+0xc>)
 8081890:	681b      	ldr	r3, [r3, #0]
 8081892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081894:	9301      	str	r3, [sp, #4]
 8081896:	bd08      	pop	{r3, pc}
 8081898:	080401c8 	.word	0x080401c8

0808189c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808189c:	b508      	push	{r3, lr}
 808189e:	4b02      	ldr	r3, [pc, #8]	; (80818a8 <network_get_listen_timeout+0xc>)
 80818a0:	681b      	ldr	r3, [r3, #0]
 80818a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80818a4:	9301      	str	r3, [sp, #4]
 80818a6:	bd08      	pop	{r3, pc}
 80818a8:	080401c8 	.word	0x080401c8

080818ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80818ac:	b508      	push	{r3, lr}
 80818ae:	4b02      	ldr	r3, [pc, #8]	; (80818b8 <malloc+0xc>)
 80818b0:	681b      	ldr	r3, [r3, #0]
 80818b2:	681b      	ldr	r3, [r3, #0]
 80818b4:	9301      	str	r3, [sp, #4]
 80818b6:	bd08      	pop	{r3, pc}
 80818b8:	080401a0 	.word	0x080401a0

080818bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80818bc:	b508      	push	{r3, lr}
 80818be:	4b02      	ldr	r3, [pc, #8]	; (80818c8 <free+0xc>)
 80818c0:	681b      	ldr	r3, [r3, #0]
 80818c2:	685b      	ldr	r3, [r3, #4]
 80818c4:	9301      	str	r3, [sp, #4]
 80818c6:	bd08      	pop	{r3, pc}
 80818c8:	080401a0 	.word	0x080401a0

080818cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80818cc:	b508      	push	{r3, lr}
 80818ce:	4b02      	ldr	r3, [pc, #8]	; (80818d8 <realloc+0xc>)
 80818d0:	681b      	ldr	r3, [r3, #0]
 80818d2:	689b      	ldr	r3, [r3, #8]
 80818d4:	9301      	str	r3, [sp, #4]
 80818d6:	bd08      	pop	{r3, pc}
 80818d8:	080401a0 	.word	0x080401a0

080818dc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80818dc:	b508      	push	{r3, lr}
 80818de:	4b02      	ldr	r3, [pc, #8]	; (80818e8 <siprintf+0xc>)
 80818e0:	681b      	ldr	r3, [r3, #0]
 80818e2:	691b      	ldr	r3, [r3, #16]
 80818e4:	9301      	str	r3, [sp, #4]
 80818e6:	bd08      	pop	{r3, pc}
 80818e8:	080401a0 	.word	0x080401a0

080818ec <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80818ec:	b508      	push	{r3, lr}
 80818ee:	4b02      	ldr	r3, [pc, #8]	; (80818f8 <siscanf+0xc>)
 80818f0:	681b      	ldr	r3, [r3, #0]
 80818f2:	699b      	ldr	r3, [r3, #24]
 80818f4:	9301      	str	r3, [sp, #4]
 80818f6:	bd08      	pop	{r3, pc}
 80818f8:	080401a0 	.word	0x080401a0

080818fc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80818fc:	b508      	push	{r3, lr}
 80818fe:	4b02      	ldr	r3, [pc, #8]	; (8081908 <snprintf+0xc>)
 8081900:	681b      	ldr	r3, [r3, #0]
 8081902:	69db      	ldr	r3, [r3, #28]
 8081904:	9301      	str	r3, [sp, #4]
 8081906:	bd08      	pop	{r3, pc}
 8081908:	080401a0 	.word	0x080401a0

0808190c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808190c:	b508      	push	{r3, lr}
 808190e:	4b02      	ldr	r3, [pc, #8]	; (8081918 <abort+0xc>)
 8081910:	681b      	ldr	r3, [r3, #0]
 8081912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081914:	9301      	str	r3, [sp, #4]
 8081916:	bd08      	pop	{r3, pc}
 8081918:	080401a0 	.word	0x080401a0

0808191c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808191c:	b508      	push	{r3, lr}
 808191e:	4b02      	ldr	r3, [pc, #8]	; (8081928 <_malloc_r+0xc>)
 8081920:	681b      	ldr	r3, [r3, #0]
 8081922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081924:	9301      	str	r3, [sp, #4]
 8081926:	bd08      	pop	{r3, pc}
 8081928:	080401a0 	.word	0x080401a0

0808192c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808192c:	2100      	movs	r1, #0
 808192e:	f7ff bed1 	b.w	80816d4 <system_delay_ms>

08081932 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081932:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081934:	6883      	ldr	r3, [r0, #8]
 8081936:	4604      	mov	r4, r0
 8081938:	b90b      	cbnz	r3, 808193e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808193a:	f001 fcd2 	bl	80832e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808193e:	68c3      	ldr	r3, [r0, #12]
 8081940:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081942:	68a3      	ldr	r3, [r4, #8]
 8081944:	b11b      	cbz	r3, 808194e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081946:	2203      	movs	r2, #3
 8081948:	4621      	mov	r1, r4
 808194a:	4620      	mov	r0, r4
 808194c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808194e:	4620      	mov	r0, r4
}
 8081950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081954:	f7fe bba3 	b.w	808009e <_ZdlPv>

08081958 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081958:	2200      	movs	r2, #0
 808195a:	4611      	mov	r1, r2
 808195c:	6840      	ldr	r0, [r0, #4]
 808195e:	f7ff bf6d 	b.w	808183c <network_ready>

08081962 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081962:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8081966:	2600      	movs	r6, #0
 8081968:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808196a:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808196c:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808196e:	4688      	mov	r8, r1
 8081970:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8081972:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081976:	f002 fec2 	bl	80846fe <strlen>
 808197a:	9600      	str	r6, [sp, #0]
 808197c:	b281      	uxth	r1, r0
 808197e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8081982:	4622      	mov	r2, r4
 8081984:	4638      	mov	r0, r7
 8081986:	f7ff fcf5 	bl	8081374 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808198a:	b120      	cbz	r0, 8081996 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808198c:	4631      	mov	r1, r6
 808198e:	4628      	mov	r0, r5
 8081990:	f000 fd28 	bl	80823e4 <_ZN9IPAddressC1Em>
 8081994:	e003      	b.n	808199e <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8081996:	4621      	mov	r1, r4
 8081998:	4628      	mov	r0, r5
 808199a:	f000 fd1b 	bl	80823d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808199e:	4628      	mov	r0, r5
 80819a0:	b004      	add	sp, #16
 80819a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080819a6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80819a6:	2200      	movs	r2, #0
 80819a8:	4611      	mov	r1, r2
 80819aa:	6840      	ldr	r0, [r0, #4]
 80819ac:	f7ff bf66 	b.w	808187c <network_listening>

080819b0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80819b0:	2200      	movs	r2, #0
 80819b2:	4611      	mov	r1, r2
 80819b4:	6840      	ldr	r0, [r0, #4]
 80819b6:	f7ff bf71 	b.w	808189c <network_get_listen_timeout>

080819ba <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80819ba:	2200      	movs	r2, #0
 80819bc:	6840      	ldr	r0, [r0, #4]
 80819be:	f7ff bf65 	b.w	808188c <network_set_listen_timeout>

080819c2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80819c2:	2200      	movs	r2, #0
 80819c4:	f081 0101 	eor.w	r1, r1, #1
 80819c8:	6840      	ldr	r0, [r0, #4]
 80819ca:	f7ff bf4f 	b.w	808186c <network_listen>

080819ce <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80819ce:	2300      	movs	r3, #0
 80819d0:	461a      	mov	r2, r3
 80819d2:	4619      	mov	r1, r3
 80819d4:	6840      	ldr	r0, [r0, #4]
 80819d6:	f7ff bf41 	b.w	808185c <network_off>

080819da <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80819da:	2300      	movs	r3, #0
 80819dc:	461a      	mov	r2, r3
 80819de:	4619      	mov	r1, r3
 80819e0:	6840      	ldr	r0, [r0, #4]
 80819e2:	f7ff bf33 	b.w	808184c <network_on>

080819e6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80819e6:	2200      	movs	r2, #0
 80819e8:	4611      	mov	r1, r2
 80819ea:	6840      	ldr	r0, [r0, #4]
 80819ec:	f7ff bf16 	b.w	808181c <network_connecting>

080819f0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80819f0:	2200      	movs	r2, #0
 80819f2:	2102      	movs	r1, #2
 80819f4:	6840      	ldr	r0, [r0, #4]
 80819f6:	f7ff bf19 	b.w	808182c <network_disconnect>

080819fa <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80819fa:	2300      	movs	r3, #0
 80819fc:	461a      	mov	r2, r3
 80819fe:	6840      	ldr	r0, [r0, #4]
 8081a00:	f7ff bf04 	b.w	808180c <network_connect>

08081a04 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081a06:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8081a08:	4b1a      	ldr	r3, [pc, #104]	; (8081a74 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8081a0a:	2500      	movs	r5, #0
 8081a0c:	6003      	str	r3, [r0, #0]
 8081a0e:	2618      	movs	r6, #24
 8081a10:	3328      	adds	r3, #40	; 0x28
 8081a12:	b089      	sub	sp, #36	; 0x24
 8081a14:	6043      	str	r3, [r0, #4]
 8081a16:	6085      	str	r5, [r0, #8]
 8081a18:	60c5      	str	r5, [r0, #12]
 8081a1a:	4632      	mov	r2, r6
 8081a1c:	4629      	mov	r1, r5
 8081a1e:	4604      	mov	r4, r0
 8081a20:	3010      	adds	r0, #16
 8081a22:	f002 fe0e 	bl	8084642 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8081a26:	462a      	mov	r2, r5
 8081a28:	4629      	mov	r1, r5
 8081a2a:	6878      	ldr	r0, [r7, #4]
 8081a2c:	f7ff ff06 	bl	808183c <network_ready>
 8081a30:	b908      	cbnz	r0, 8081a36 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8081a32:	60a0      	str	r0, [r4, #8]
            return sig;
 8081a34:	e01b      	b.n	8081a6e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8081a36:	4629      	mov	r1, r5
 8081a38:	4632      	mov	r2, r6
 8081a3a:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8081a3c:	9500      	str	r5, [sp, #0]
 8081a3e:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8081a40:	f002 fdff 	bl	8084642 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081a44:	a902      	add	r1, sp, #8
 8081a46:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8081a48:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081a4c:	f7ff fc9a 	bl	8081384 <cellular_signal>
 8081a50:	b110      	cbz	r0, 8081a58 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8081a52:	2301      	movs	r3, #1
 8081a54:	60a3      	str	r3, [r4, #8]
            return sig;
 8081a56:	e00a      	b.n	8081a6e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8081a58:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8081a5a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8081a5c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8081a5e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8081a60:	b90b      	cbnz	r3, 8081a66 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8081a62:	2302      	movs	r3, #2
 8081a64:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8081a66:	a902      	add	r1, sp, #8
 8081a68:	4620      	mov	r0, r4
 8081a6a:	f000 f89d 	bl	8081ba8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8081a6e:	4620      	mov	r0, r4
 8081a70:	b009      	add	sp, #36	; 0x24
 8081a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081a74:	08085350 	.word	0x08085350

08081a78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081a78:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081a7a:	4c0c      	ldr	r4, [pc, #48]	; (8081aac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8081a7c:	2528      	movs	r5, #40	; 0x28
 8081a7e:	462a      	mov	r2, r5
 8081a80:	2100      	movs	r1, #0
 8081a82:	4620      	mov	r0, r4
 8081a84:	f002 fddd 	bl	8084642 <memset>
        cid = -1;
 8081a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081a8c:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8081a8e:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081a90:	4c07      	ldr	r4, [pc, #28]	; (8081ab0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8081a92:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081a94:	4620      	mov	r0, r4
 8081a96:	6063      	str	r3, [r4, #4]
 8081a98:	4b06      	ldr	r3, [pc, #24]	; (8081ab4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8081a9a:	252c      	movs	r5, #44	; 0x2c
 8081a9c:	f840 3b08 	str.w	r3, [r0], #8
 8081aa0:	462a      	mov	r2, r5
 8081aa2:	2100      	movs	r1, #0
 8081aa4:	f002 fdcd 	bl	8084642 <memset>
        size = sizeof(*this);
 8081aa8:	8125      	strh	r5, [r4, #8]
 8081aaa:	bd38      	pop	{r3, r4, r5, pc}
 8081aac:	20000638 	.word	0x20000638
 8081ab0:	20000604 	.word	0x20000604
 8081ab4:	0808531c 	.word	0x0808531c

08081ab8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081ab8:	4770      	bx	lr

08081aba <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8081aba:	7d00      	ldrb	r0, [r0, #20]
 8081abc:	4770      	bx	lr
	...

08081ac0 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8081ac0:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8081ac2:	7d03      	ldrb	r3, [r0, #20]
 8081ac4:	b11b      	cbz	r3, 8081ace <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8081ac6:	6980      	ldr	r0, [r0, #24]
 8081ac8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081acc:	d101      	bne.n	8081ad2 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8081ace:	2000      	movs	r0, #0
 8081ad0:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8081ad2:	f002 fa25 	bl	8083f20 <__aeabi_i2f>
 8081ad6:	4902      	ldr	r1, [pc, #8]	; (8081ae0 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081ad8:	f002 fb2a 	bl	8084130 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081adc:	bd08      	pop	{r3, pc}
 8081ade:	bf00      	nop
 8081ae0:	42c80000 	.word	0x42c80000

08081ae4 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8081ae4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081ae6:	7d03      	ldrb	r3, [r0, #20]
 8081ae8:	b11b      	cbz	r3, 8081af2 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8081aea:	6a00      	ldr	r0, [r0, #32]
 8081aec:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081af0:	d101      	bne.n	8081af6 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8081af2:	2000      	movs	r0, #0
 8081af4:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8081af6:	f002 fa13 	bl	8083f20 <__aeabi_i2f>
 8081afa:	4902      	ldr	r1, [pc, #8]	; (8081b04 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081afc:	f002 fb18 	bl	8084130 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081b00:	bd08      	pop	{r3, pc}
 8081b02:	bf00      	nop
 8081b04:	42c80000 	.word	0x42c80000

08081b08 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8081b08:	b570      	push	{r4, r5, r6, lr}
 8081b0a:	460d      	mov	r5, r1
 8081b0c:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081b0e:	220a      	movs	r2, #10
 8081b10:	6881      	ldr	r1, [r0, #8]
 8081b12:	4628      	mov	r0, r5
 8081b14:	f000 ff2b 	bl	808296e <_ZN5Print5printEii>
    n += p.print(',');
 8081b18:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081b1a:	4604      	mov	r4, r0
    n += p.print(',');
 8081b1c:	4628      	mov	r0, r5
 8081b1e:	f000 fed5 	bl	80828cc <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8081b22:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8081b24:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8081b26:	68f1      	ldr	r1, [r6, #12]
 8081b28:	4628      	mov	r0, r5
 8081b2a:	f000 ff20 	bl	808296e <_ZN5Print5printEii>
    return n;
}
 8081b2e:	4420      	add	r0, r4
 8081b30:	bd70      	pop	{r4, r5, r6, pc}

08081b32 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081b32:	f1a0 0004 	sub.w	r0, r0, #4
 8081b36:	f7ff bfe7 	b.w	8081b08 <_ZNK14CellularSignal7printToER5Print>

08081b3a <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081b3a:	b510      	push	{r4, lr}
 8081b3c:	4604      	mov	r4, r0
 8081b3e:	f7fe faae 	bl	808009e <_ZdlPv>
 8081b42:	4620      	mov	r0, r4
 8081b44:	bd10      	pop	{r4, pc}
	...

08081b48 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8081b48:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8081b4a:	7d03      	ldrb	r3, [r0, #20]
 8081b4c:	b15b      	cbz	r3, 8081b66 <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081b4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081b50:	2800      	cmp	r0, #0
 8081b52:	db08      	blt.n	8081b66 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081b54:	f002 f9e4 	bl	8083f20 <__aeabi_i2f>
 8081b58:	4904      	ldr	r1, [pc, #16]	; (8081b6c <_ZNK14CellularSignal10getQualityEv+0x24>)
 8081b5a:	f002 fae9 	bl	8084130 <__aeabi_fdiv>
 8081b5e:	4904      	ldr	r1, [pc, #16]	; (8081b70 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8081b60:	f002 fa32 	bl	8083fc8 <__aeabi_fmul>
 8081b64:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081b66:	4803      	ldr	r0, [pc, #12]	; (8081b74 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8081b68:	bd08      	pop	{r3, pc}
 8081b6a:	bf00      	nop
 8081b6c:	477fff00 	.word	0x477fff00
 8081b70:	42c80000 	.word	0x42c80000
 8081b74:	bf800000 	.word	0xbf800000

08081b78 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8081b78:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8081b7a:	7d03      	ldrb	r3, [r0, #20]
 8081b7c:	b15b      	cbz	r3, 8081b96 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8081b7e:	69c0      	ldr	r0, [r0, #28]
 8081b80:	2800      	cmp	r0, #0
 8081b82:	db08      	blt.n	8081b96 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081b84:	f002 f9cc 	bl	8083f20 <__aeabi_i2f>
 8081b88:	4904      	ldr	r1, [pc, #16]	; (8081b9c <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8081b8a:	f002 fad1 	bl	8084130 <__aeabi_fdiv>
 8081b8e:	4904      	ldr	r1, [pc, #16]	; (8081ba0 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8081b90:	f002 fa1a 	bl	8083fc8 <__aeabi_fmul>
 8081b94:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081b96:	4803      	ldr	r0, [pc, #12]	; (8081ba4 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8081b98:	bd08      	pop	{r3, pc}
 8081b9a:	bf00      	nop
 8081b9c:	477fff00 	.word	0x477fff00
 8081ba0:	42c80000 	.word	0x42c80000
 8081ba4:	bf800000 	.word	0xbf800000

08081ba8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8081ba8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8081baa:	460d      	mov	r5, r1
 8081bac:	f100 0410 	add.w	r4, r0, #16
 8081bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081bb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081bb8:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8081bbc:	2001      	movs	r0, #1
 8081bbe:	bd30      	pop	{r4, r5, pc}

08081bc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081bc0:	4770      	bx	lr

08081bc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081bc2:	2000      	movs	r0, #0
 8081bc4:	4770      	bx	lr

08081bc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081bc6:	b510      	push	{r4, lr}
 8081bc8:	4604      	mov	r4, r0
 8081bca:	f7fe fa68 	bl	808009e <_ZdlPv>
 8081bce:	4620      	mov	r0, r4
 8081bd0:	bd10      	pop	{r4, pc}

08081bd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081bd2:	b508      	push	{r3, lr}
      { delete this; }
 8081bd4:	b108      	cbz	r0, 8081bda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081bd6:	f7ff fff6 	bl	8081bc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081bda:	bd08      	pop	{r3, pc}

08081bdc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081bdc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081bde:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081be0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081be2:	b113      	cbz	r3, 8081bea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081be4:	2203      	movs	r2, #3
 8081be6:	4601      	mov	r1, r0
 8081be8:	4798      	blx	r3
    }
 8081bea:	4620      	mov	r0, r4
 8081bec:	bd10      	pop	{r4, pc}

08081bee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081bee:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081bf0:	68c4      	ldr	r4, [r0, #12]
 8081bf2:	b1d4      	cbz	r4, 8081c2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081bf4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081bf6:	2b02      	cmp	r3, #2
 8081bf8:	d102      	bne.n	8081c00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081bfa:	68e0      	ldr	r0, [r4, #12]
 8081bfc:	f7ff fe5e 	bl	80818bc <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081c00:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081c02:	b12d      	cbz	r5, 8081c10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081c04:	4628      	mov	r0, r5
 8081c06:	f7ff ffe9 	bl	8081bdc <_ZNSt14_Function_baseD1Ev>
 8081c0a:	4628      	mov	r0, r5
 8081c0c:	f7fe fa47 	bl	808009e <_ZdlPv>
 8081c10:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081c12:	b12d      	cbz	r5, 8081c20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8081c14:	4628      	mov	r0, r5
 8081c16:	f7ff ffe1 	bl	8081bdc <_ZNSt14_Function_baseD1Ev>
 8081c1a:	4628      	mov	r0, r5
 8081c1c:	f7fe fa3f 	bl	808009e <_ZdlPv>
 8081c20:	4620      	mov	r0, r4
 8081c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081c26:	f7fe ba3a 	b.w	808009e <_ZdlPv>
 8081c2a:	bd38      	pop	{r3, r4, r5, pc}

08081c2c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081c2c:	b510      	push	{r4, lr}
 8081c2e:	b088      	sub	sp, #32
 8081c30:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081c32:	4668      	mov	r0, sp
 8081c34:	f000 ff18 	bl	8082a68 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8081c38:	4669      	mov	r1, sp
 8081c3a:	a804      	add	r0, sp, #16
 8081c3c:	f000 ff36 	bl	8082aac <_ZN6StringC1ERKS_>
 8081c40:	a804      	add	r0, sp, #16
 8081c42:	47a0      	blx	r4
 8081c44:	4604      	mov	r4, r0
 8081c46:	a804      	add	r0, sp, #16
 8081c48:	f000 fec7 	bl	80829da <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081c4c:	4668      	mov	r0, sp
 8081c4e:	f000 fec4 	bl	80829da <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8081c52:	4620      	mov	r0, r4
 8081c54:	b008      	add	sp, #32
 8081c56:	bd10      	pop	{r4, pc}

08081c58 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8081c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081c5a:	4607      	mov	r7, r0
 8081c5c:	460e      	mov	r6, r1
 8081c5e:	4615      	mov	r5, r2
 8081c60:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 8081c62:	2410      	movs	r4, #16
 8081c64:	4622      	mov	r2, r4
 8081c66:	2100      	movs	r1, #0
 8081c68:	4668      	mov	r0, sp
 8081c6a:	f002 fcea 	bl	8084642 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081c6e:	2200      	movs	r2, #0
 8081c70:	4669      	mov	r1, sp
 8081c72:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 8081c74:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 8081c78:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8081c7a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8081c7c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081c7e:	f7ff fd75 	bl	808176c <spark_function>
}
 8081c82:	b005      	add	sp, #20
 8081c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081c86 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081c86:	b513      	push	{r0, r1, r4, lr}
 8081c88:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081c8a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8081c8e:	2300      	movs	r3, #0
 8081c90:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081c92:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081c94:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8081c96:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081c98:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081c9a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081c9c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081c9e:	f7fe fbd9 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081ca2:	4620      	mov	r0, r4
 8081ca4:	b002      	add	sp, #8
 8081ca6:	bd10      	pop	{r4, pc}

08081ca8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081ca8:	680b      	ldr	r3, [r1, #0]
 8081caa:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081cac:	b113      	cbz	r3, 8081cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081cae:	685a      	ldr	r2, [r3, #4]
 8081cb0:	3201      	adds	r2, #1
 8081cb2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081cb4:	4770      	bx	lr

08081cb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081cb8:	460c      	mov	r4, r1
 8081cba:	4606      	mov	r6, r0
 8081cbc:	460f      	mov	r7, r1
 8081cbe:	f854 3b04 	ldr.w	r3, [r4], #4
 8081cc2:	ad02      	add	r5, sp, #8
 8081cc4:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081cc8:	4621      	mov	r1, r4
 8081cca:	a801      	add	r0, sp, #4
 8081ccc:	f7ff ffec 	bl	8081ca8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8081cd0:	4629      	mov	r1, r5
 8081cd2:	4630      	mov	r0, r6
 8081cd4:	f7ff ffd7 	bl	8081c86 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081cd8:	a801      	add	r0, sp, #4
 8081cda:	f7fe fbbb 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081cde:	4620      	mov	r0, r4
 8081ce0:	f7fe fbb8 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8081ce4:	4638      	mov	r0, r7
 8081ce6:	f7fe f9da 	bl	808009e <_ZdlPv>
        return p;
    }
 8081cea:	4630      	mov	r0, r6
 8081cec:	b003      	add	sp, #12
 8081cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081cf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081cf0:	b513      	push	{r0, r1, r4, lr}
 8081cf2:	460b      	mov	r3, r1
 8081cf4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081cf6:	c803      	ldmia	r0, {r0, r1}
 8081cf8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081cfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081d00:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081d04:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081d08:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081d0c:	b002      	add	sp, #8
 8081d0e:	bd10      	pop	{r4, pc}

08081d10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d10:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081d12:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d14:	b90a      	cbnz	r2, 8081d1a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081d16:	f001 fae4 	bl	80832e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d1a:	68c3      	ldr	r3, [r0, #12]
    }
 8081d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d20:	4718      	bx	r3

08081d22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081d22:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081d24:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081d26:	f100 0110 	add.w	r1, r0, #16
 8081d2a:	f7ff fff1 	bl	8081d10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081d2e:	bd08      	pop	{r3, pc}

08081d30 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d30:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081d32:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d34:	b90a      	cbnz	r2, 8081d3a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081d36:	f001 fad4 	bl	80832e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d3a:	68c3      	ldr	r3, [r0, #12]
    }
 8081d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d40:	4718      	bx	r3

08081d42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081d42:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081d44:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081d46:	f100 0110 	add.w	r1, r0, #16
 8081d4a:	f7ff fff1 	bl	8081d30 <_ZNKSt8functionIFvRKbEEclES1_>
 8081d4e:	bd08      	pop	{r3, pc}

08081d50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081d50:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081d52:	2300      	movs	r3, #0
 8081d54:	6083      	str	r3, [r0, #8]
 8081d56:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081d58:	4604      	mov	r4, r0
 8081d5a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081d5c:	b12b      	cbz	r3, 8081d6a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081d5e:	2202      	movs	r2, #2
 8081d60:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081d62:	68eb      	ldr	r3, [r5, #12]
 8081d64:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081d66:	68ab      	ldr	r3, [r5, #8]
 8081d68:	60a3      	str	r3, [r4, #8]
	}
    }
 8081d6a:	4620      	mov	r0, r4
 8081d6c:	bd38      	pop	{r3, r4, r5, pc}
	...

08081d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8081d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8081d74:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8081d78:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081d7a:	f04f 0002 	mov.w	r0, #2
 8081d7e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081d80:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081d84:	808b      	strh	r3, [r1, #4]
 8081d86:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081d88:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081d8a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 8081d8e:	600b      	str	r3, [r1, #0]
 8081d90:	e8d4 1f4f 	ldrexb	r1, [r4]
 8081d94:	4299      	cmp	r1, r3
 8081d96:	d103      	bne.n	8081da0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8081d98:	e8c4 0f45 	strexb	r5, r0, [r4]
 8081d9c:	2d00      	cmp	r5, #0
 8081d9e:	d1f7      	bne.n	8081d90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8081da0:	d002      	beq.n	8081da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8081da2:	f88d 1000 	strb.w	r1, [sp]
 8081da6:	e06b      	b.n	8081e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081da8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081dac:	bf1c      	itt	ne
 8081dae:	60e7      	strne	r7, [r4, #12]
 8081db0:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081db2:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8081db6:	bf18      	it	ne
 8081db8:	461f      	movne	r7, r3
 8081dba:	2301      	movs	r3, #1
 8081dbc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081dbe:	f3bf 8f5f 	dmb	sy
 8081dc2:	f104 0308 	add.w	r3, r4, #8
 8081dc6:	2000      	movs	r0, #0
 8081dc8:	e853 6f00 	ldrex	r6, [r3]
 8081dcc:	e843 0200 	strex	r2, r0, [r3]
 8081dd0:	2a00      	cmp	r2, #0
 8081dd2:	d1f9      	bne.n	8081dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8081dd4:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081dd8:	2e00      	cmp	r6, #0
 8081dda:	d051      	beq.n	8081e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081ddc:	f7ff fc92 	bl	8081704 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081de0:	b120      	cbz	r0, 8081dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081de2:	4629      	mov	r1, r5
 8081de4:	4630      	mov	r0, r6
 8081de6:	f7ff ff93 	bl	8081d10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081dea:	e043      	b.n	8081e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081dec:	4631      	mov	r1, r6
 8081dee:	4668      	mov	r0, sp
 8081df0:	f7ff ffae 	bl	8081d50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081df4:	68e0      	ldr	r0, [r4, #12]
 8081df6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081dfa:	b108      	cbz	r0, 8081e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8081dfc:	f002 fc64 	bl	80846c8 <strdup>
 8081e00:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081e02:	2010      	movs	r0, #16
 8081e04:	f8ad 5014 	strh.w	r5, [sp, #20]
 8081e08:	f7fe f947 	bl	808009a <_Znwj>
 8081e0c:	4605      	mov	r5, r0
 8081e0e:	b330      	cbz	r0, 8081e5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081e10:	f04f 0800 	mov.w	r8, #0
 8081e14:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e18:	2018      	movs	r0, #24
 8081e1a:	f7fe f93e 	bl	808009a <_Znwj>
 8081e1e:	4604      	mov	r4, r0
 8081e20:	b1c0      	cbz	r0, 8081e54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081e22:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081e26:	4601      	mov	r1, r0
 8081e28:	4668      	mov	r0, sp
 8081e2a:	f7ff ff61 	bl	8081cf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e2e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8081e30:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081e32:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e34:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081e36:	9202      	str	r2, [sp, #8]
 8081e38:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081e3a:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081e3c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8081e40:	9203      	str	r2, [sp, #12]
 8081e42:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8081e44:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8081e48:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081e4c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8081e4e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081e52:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081e54:	4b0d      	ldr	r3, [pc, #52]	; (8081e8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e56:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081e58:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081e5a:	4b0d      	ldr	r3, [pc, #52]	; (8081e90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8081e5c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081e5e:	9804      	ldr	r0, [sp, #16]
 8081e60:	f7ff fd2c 	bl	80818bc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081e64:	4668      	mov	r0, sp
 8081e66:	f7ff feb9 	bl	8081bdc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081e6a:	2200      	movs	r2, #0
 8081e6c:	4629      	mov	r1, r5
 8081e6e:	4809      	ldr	r0, [pc, #36]	; (8081e94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8081e70:	f7ff fc50 	bl	8081714 <application_thread_invoke>
 8081e74:	4630      	mov	r0, r6
 8081e76:	f7ff feb1 	bl	8081bdc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081e7a:	4630      	mov	r0, r6
 8081e7c:	f7fe f90f 	bl	808009e <_ZdlPv>
 8081e80:	4638      	mov	r0, r7
 8081e82:	f7ff fd1b 	bl	80818bc <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8081e86:	b006      	add	sp, #24
 8081e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081e8c:	08081d23 	.word	0x08081d23
 8081e90:	08081f81 	.word	0x08081f81
 8081e94:	08081933 	.word	0x08081933

08081e98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081e9c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081e9e:	ad07      	add	r5, sp, #28
 8081ea0:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081ea4:	4606      	mov	r6, r0
 8081ea6:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081ea8:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081eaa:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081eac:	460f      	mov	r7, r1
 8081eae:	4690      	mov	r8, r2
 8081eb0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081eb4:	f8c5 b004 	str.w	fp, [r5, #4]
 8081eb8:	f8c5 b008 	str.w	fp, [r5, #8]
 8081ebc:	9307      	str	r3, [sp, #28]
 8081ebe:	f7fe f8ec 	bl	808009a <_Znwj>
 8081ec2:	4604      	mov	r4, r0
 8081ec4:	b138      	cbz	r0, 8081ed6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081ec6:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081eca:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081ece:	f8c0 b004 	str.w	fp, [r0, #4]
 8081ed2:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081ed6:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081ed8:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081eda:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081edc:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081ede:	f7fe f8dc 	bl	808009a <_Znwj>
 8081ee2:	b128      	cbz	r0, 8081ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081ee4:	2301      	movs	r3, #1
 8081ee6:	6043      	str	r3, [r0, #4]
 8081ee8:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081eea:	4b23      	ldr	r3, [pc, #140]	; (8081f78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8081eec:	60c4      	str	r4, [r0, #12]
 8081eee:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8081ef0:	4b22      	ldr	r3, [pc, #136]	; (8081f7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081ef2:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081ef4:	2008      	movs	r0, #8
 8081ef6:	9308      	str	r3, [sp, #32]
 8081ef8:	f7fe f8cf 	bl	808009a <_Znwj>
 8081efc:	4604      	mov	r4, r0
 8081efe:	b128      	cbz	r0, 8081f0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081f00:	9b03      	ldr	r3, [sp, #12]
 8081f02:	a904      	add	r1, sp, #16
 8081f04:	f840 3b04 	str.w	r3, [r0], #4
 8081f08:	f7ff fece 	bl	8081ca8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081f0c:	9500      	str	r5, [sp, #0]
 8081f0e:	fa5f f38a 	uxtb.w	r3, sl
 8081f12:	464a      	mov	r2, r9
 8081f14:	4641      	mov	r1, r8
 8081f16:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8081f18:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081f1a:	f7ff fc57 	bl	80817cc <spark_send_event>
 8081f1e:	b9b8      	cbnz	r0, 8081f50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081f20:	9b03      	ldr	r3, [sp, #12]
 8081f22:	785b      	ldrb	r3, [r3, #1]
 8081f24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081f28:	b993      	cbnz	r3, 8081f50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081f2a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8081f2e:	a905      	add	r1, sp, #20
 8081f30:	a803      	add	r0, sp, #12
 8081f32:	9205      	str	r2, [sp, #20]
 8081f34:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081f38:	f7ff ff1a 	bl	8081d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081f3c:	9805      	ldr	r0, [sp, #20]
 8081f3e:	f7ff fcbd 	bl	80818bc <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081f42:	a805      	add	r0, sp, #20
 8081f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081f46:	f7ff feb6 	bl	8081cb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081f4a:	a806      	add	r0, sp, #24
 8081f4c:	f7fe fa82 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081f50:	9b03      	ldr	r3, [sp, #12]
 8081f52:	a904      	add	r1, sp, #16
 8081f54:	a806      	add	r0, sp, #24
 8081f56:	9305      	str	r3, [sp, #20]
 8081f58:	f7ff fea6 	bl	8081ca8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8081f5c:	a905      	add	r1, sp, #20
 8081f5e:	4630      	mov	r0, r6
 8081f60:	f7ff fe91 	bl	8081c86 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081f64:	a806      	add	r0, sp, #24
 8081f66:	f7fe fa75 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081f6a:	a804      	add	r0, sp, #16
 8081f6c:	f7fe fa72 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081f70:	4630      	mov	r0, r6
 8081f72:	b00b      	add	sp, #44	; 0x2c
 8081f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081f78:	08085384 	.word	0x08085384
 8081f7c:	080820e9 	.word	0x080820e9

08081f80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081f80:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f84:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081f86:	d006      	beq.n	8081f96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081f88:	2a03      	cmp	r2, #3
 8081f8a:	d017      	beq.n	8081fbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081f8c:	2a01      	cmp	r2, #1
 8081f8e:	d120      	bne.n	8081fd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081f90:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081f92:	6003      	str	r3, [r0, #0]
	      break;
 8081f94:	e01d      	b.n	8081fd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081f96:	2018      	movs	r0, #24
 8081f98:	680e      	ldr	r6, [r1, #0]
 8081f9a:	f7fe f87e 	bl	808009a <_Znwj>
 8081f9e:	4605      	mov	r5, r0
 8081fa0:	b150      	cbz	r0, 8081fb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081fa2:	4631      	mov	r1, r6
 8081fa4:	f7ff fed4 	bl	8081d50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081fa8:	6930      	ldr	r0, [r6, #16]
 8081faa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081fae:	b108      	cbz	r0, 8081fb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8081fb0:	f002 fb8a 	bl	80846c8 <strdup>
 8081fb4:	6128      	str	r0, [r5, #16]
 8081fb6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081fb8:	6025      	str	r5, [r4, #0]
 8081fba:	e00a      	b.n	8081fd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081fbc:	6804      	ldr	r4, [r0, #0]
 8081fbe:	b144      	cbz	r4, 8081fd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081fc0:	6920      	ldr	r0, [r4, #16]
 8081fc2:	f7ff fc7b 	bl	80818bc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081fc6:	4620      	mov	r0, r4
 8081fc8:	f7ff fe08 	bl	8081bdc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081fcc:	4620      	mov	r0, r4
 8081fce:	f7fe f866 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081fd2:	2000      	movs	r0, #0
 8081fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081fd6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081fd6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081fd8:	2300      	movs	r3, #0
 8081fda:	6083      	str	r3, [r0, #8]
 8081fdc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081fde:	4604      	mov	r4, r0
 8081fe0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081fe2:	b12b      	cbz	r3, 8081ff0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081fe4:	2202      	movs	r2, #2
 8081fe6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081fe8:	68eb      	ldr	r3, [r5, #12]
 8081fea:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081fec:	68ab      	ldr	r3, [r5, #8]
 8081fee:	60a3      	str	r3, [r4, #8]
	}
    }
 8081ff0:	4620      	mov	r0, r4
 8081ff2:	bd38      	pop	{r3, r4, r5, pc}

08081ff4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081ff4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081ff6:	b570      	push	{r4, r5, r6, lr}
 8081ff8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081ffa:	d006      	beq.n	808200a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8081ffc:	2a03      	cmp	r2, #3
 8081ffe:	d011      	beq.n	8082024 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8082000:	2a01      	cmp	r2, #1
 8082002:	d117      	bne.n	8082034 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082004:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082006:	6003      	str	r3, [r0, #0]
	      break;
 8082008:	e014      	b.n	8082034 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808200a:	2014      	movs	r0, #20
 808200c:	680e      	ldr	r6, [r1, #0]
 808200e:	f7fe f844 	bl	808009a <_Znwj>
 8082012:	4605      	mov	r5, r0
 8082014:	b120      	cbz	r0, 8082020 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082016:	4631      	mov	r1, r6
 8082018:	f7ff ffdd 	bl	8081fd6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808201c:	7c33      	ldrb	r3, [r6, #16]
 808201e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082020:	6025      	str	r5, [r4, #0]
 8082022:	e007      	b.n	8082034 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082024:	6804      	ldr	r4, [r0, #0]
 8082026:	b12c      	cbz	r4, 8082034 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082028:	4620      	mov	r0, r4
 808202a:	f7ff fdd7 	bl	8081bdc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808202e:	4620      	mov	r0, r4
 8082030:	f7fe f835 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082034:	2000      	movs	r0, #0
 8082036:	bd70      	pop	{r4, r5, r6, pc}

08082038 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8082038:	b5f0      	push	{r4, r5, r6, r7, lr}
 808203a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808203c:	f3bf 8f5f 	dmb	sy
 8082040:	b087      	sub	sp, #28
 8082042:	2300      	movs	r3, #0
 8082044:	e850 6f00 	ldrex	r6, [r0]
 8082048:	e840 3200 	strex	r2, r3, [r0]
 808204c:	2a00      	cmp	r2, #0
 808204e:	d1f9      	bne.n	8082044 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8082050:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082054:	2e00      	cmp	r6, #0
 8082056:	d03e      	beq.n	80820d6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082058:	4618      	mov	r0, r3
 808205a:	f7ff fb53 	bl	8081704 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808205e:	4607      	mov	r7, r0
 8082060:	b120      	cbz	r0, 808206c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082062:	4621      	mov	r1, r4
 8082064:	4630      	mov	r0, r6
 8082066:	f7ff fe63 	bl	8081d30 <_ZNKSt8functionIFvRKbEEclES1_>
 808206a:	e02e      	b.n	80820ca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808206c:	4631      	mov	r1, r6
 808206e:	a801      	add	r0, sp, #4
 8082070:	f7ff ffb1 	bl	8081fd6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082074:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082076:	2010      	movs	r0, #16
 8082078:	f88d 3014 	strb.w	r3, [sp, #20]
 808207c:	f7fe f80d 	bl	808009a <_Znwj>
 8082080:	4605      	mov	r5, r0
 8082082:	b1d0      	cbz	r0, 80820ba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082084:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082086:	2014      	movs	r0, #20
 8082088:	f7fe f807 	bl	808009a <_Znwj>
 808208c:	4604      	mov	r4, r0
 808208e:	b178      	cbz	r0, 80820b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082090:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082092:	4601      	mov	r1, r0
 8082094:	a801      	add	r0, sp, #4
 8082096:	f7ff fe2b 	bl	8081cf0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808209a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808209c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808209e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80820a0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80820a2:	9203      	str	r2, [sp, #12]
 80820a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80820a6:	60e3      	str	r3, [r4, #12]
 80820a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80820ac:	9204      	str	r2, [sp, #16]
 80820ae:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80820b0:	4b0a      	ldr	r3, [pc, #40]	; (80820dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80820b2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80820b4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80820b6:	4b0a      	ldr	r3, [pc, #40]	; (80820e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80820b8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80820ba:	a801      	add	r0, sp, #4
 80820bc:	f7ff fd8e 	bl	8081bdc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80820c0:	2200      	movs	r2, #0
 80820c2:	4629      	mov	r1, r5
 80820c4:	4807      	ldr	r0, [pc, #28]	; (80820e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80820c6:	f7ff fb25 	bl	8081714 <application_thread_invoke>
 80820ca:	4630      	mov	r0, r6
 80820cc:	f7ff fd86 	bl	8081bdc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80820d0:	4630      	mov	r0, r6
 80820d2:	f7fd ffe4 	bl	808009e <_ZdlPv>
        }
    }
 80820d6:	b007      	add	sp, #28
 80820d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80820da:	bf00      	nop
 80820dc:	08081d43 	.word	0x08081d43
 80820e0:	08081ff5 	.word	0x08081ff5
 80820e4:	08081933 	.word	0x08081933

080820e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80820e8:	b530      	push	{r4, r5, lr}
 80820ea:	4604      	mov	r4, r0
 80820ec:	b085      	sub	sp, #20
 80820ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80820f0:	4668      	mov	r0, sp
 80820f2:	4611      	mov	r1, r2
 80820f4:	f7ff fddf 	bl	8081cb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80820f8:	b17c      	cbz	r4, 808211a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80820fa:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80820fc:	4628      	mov	r0, r5
 80820fe:	b10d      	cbz	r5, 8082104 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8082100:	f002 fae2 	bl	80846c8 <strdup>
 8082104:	9002      	str	r0, [sp, #8]
 8082106:	a902      	add	r1, sp, #8
 8082108:	4668      	mov	r0, sp
 808210a:	f8ad 400c 	strh.w	r4, [sp, #12]
 808210e:	f7ff fe2f 	bl	8081d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082112:	9802      	ldr	r0, [sp, #8]
 8082114:	f7ff fbd2 	bl	80818bc <free>
 8082118:	e01d      	b.n	8082156 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808211a:	f04f 0201 	mov.w	r2, #1
 808211e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082120:	f88d 4008 	strb.w	r4, [sp, #8]
 8082124:	e8d0 3f4f 	ldrexb	r3, [r0]
 8082128:	42a3      	cmp	r3, r4
 808212a:	d103      	bne.n	8082134 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808212c:	e8c0 2f41 	strexb	r1, r2, [r0]
 8082130:	2900      	cmp	r1, #0
 8082132:	d1f7      	bne.n	8082124 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082134:	d002      	beq.n	808213c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8082136:	f88d 3008 	strb.w	r3, [sp, #8]
 808213a:	e00c      	b.n	8082156 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808213c:	f110 010c 	adds.w	r1, r0, #12
 8082140:	f04f 0301 	mov.w	r3, #1
 8082144:	bf18      	it	ne
 8082146:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082148:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808214c:	3004      	adds	r0, #4
 808214e:	f800 3c03 	strb.w	r3, [r0, #-3]
 8082152:	f7ff ff71 	bl	8082038 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8082156:	a801      	add	r0, sp, #4
 8082158:	f7fe f97c 	bl	8080454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808215c:	b005      	add	sp, #20
 808215e:	bd30      	pop	{r4, r5, pc}

08082160 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8082160:	6800      	ldr	r0, [r0, #0]
 8082162:	f000 b8d1 	b.w	8082308 <_ZN7TwoWire4lockEv>

08082166 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8082166:	b510      	push	{r4, lr}
 8082168:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808216a:	6001      	str	r1, [r0, #0]
 808216c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808216e:	b10a      	cbz	r2, 8082174 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8082170:	f7ff fff6 	bl	8082160 <_ZN9FuelGauge4lockEv>
    }
}
 8082174:	4620      	mov	r0, r4
 8082176:	bd10      	pop	{r4, pc}

08082178 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8082178:	b538      	push	{r3, r4, r5, lr}
 808217a:	4604      	mov	r4, r0
 808217c:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808217e:	f001 f845 	bl	808320c <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8082182:	462a      	mov	r2, r5
 8082184:	4601      	mov	r1, r0
 8082186:	4620      	mov	r0, r4
 8082188:	f7ff ffed 	bl	8082166 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 808218c:	4620      	mov	r0, r4
 808218e:	bd38      	pop	{r3, r4, r5, pc}

08082190 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8082190:	6800      	ldr	r0, [r0, #0]
 8082192:	f000 b8c2 	b.w	808231a <_ZN7TwoWire6unlockEv>

08082196 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8082196:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082198:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808219a:	4604      	mov	r4, r0
{
    if (lock_) {
 808219c:	b10b      	cbz	r3, 80821a2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808219e:	f7ff fff7 	bl	8082190 <_ZN9FuelGauge6unlockEv>
    }
}
 80821a2:	4620      	mov	r0, r4
 80821a4:	bd10      	pop	{r4, pc}

080821a6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80821a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80821a8:	4604      	mov	r4, r0
 80821aa:	460f      	mov	r7, r1
 80821ac:	4616      	mov	r6, r2
 80821ae:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80821b0:	f7ff ffd6 	bl	8082160 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 80821b4:	6820      	ldr	r0, [r4, #0]
 80821b6:	2136      	movs	r1, #54	; 0x36
 80821b8:	f000 f898 	bl	80822ec <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 80821bc:	6820      	ldr	r0, [r4, #0]
 80821be:	4639      	mov	r1, r7
 80821c0:	6803      	ldr	r3, [r0, #0]
 80821c2:	689b      	ldr	r3, [r3, #8]
 80821c4:	4798      	blx	r3
    i2c_.endTransmission(true);
 80821c6:	2101      	movs	r1, #1
 80821c8:	6820      	ldr	r0, [r4, #0]
 80821ca:	f000 f892 	bl	80822f2 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 80821ce:	2202      	movs	r2, #2
 80821d0:	2136      	movs	r1, #54	; 0x36
 80821d2:	2301      	movs	r3, #1
 80821d4:	6820      	ldr	r0, [r4, #0]
 80821d6:	f000 f880 	bl	80822da <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80821da:	6820      	ldr	r0, [r4, #0]
 80821dc:	6803      	ldr	r3, [r0, #0]
 80821de:	695b      	ldr	r3, [r3, #20]
 80821e0:	4798      	blx	r3
 80821e2:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 80821e4:	6820      	ldr	r0, [r4, #0]
 80821e6:	6803      	ldr	r3, [r0, #0]
 80821e8:	695b      	ldr	r3, [r3, #20]
 80821ea:	4798      	blx	r3
 80821ec:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80821ee:	4620      	mov	r0, r4
}
 80821f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80821f4:	f7ff bfcc 	b.w	8082190 <_ZN9FuelGauge6unlockEv>

080821f8 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80821f8:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80821fa:	2200      	movs	r2, #0
	byte LSB = 0;
 80821fc:	ab02      	add	r3, sp, #8
 80821fe:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8082202:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8082206:	2104      	movs	r1, #4
 8082208:	f10d 0206 	add.w	r2, sp, #6
 808220c:	f7ff ffcb 	bl	80821a6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8082210:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8082214:	f001 fb02 	bl	808381c <__aeabi_i2d>
 8082218:	2200      	movs	r2, #0
 808221a:	4b08      	ldr	r3, [pc, #32]	; (808223c <_ZN9FuelGauge6getSoCEv+0x44>)
 808221c:	f001 fb64 	bl	80838e8 <__aeabi_dmul>
 8082220:	f001 fd74 	bl	8083d0c <__aeabi_d2f>
 8082224:	4604      	mov	r4, r0
 8082226:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808222a:	f001 fe79 	bl	8083f20 <__aeabi_i2f>
 808222e:	4601      	mov	r1, r0
 8082230:	4620      	mov	r0, r4
 8082232:	f001 fdc1 	bl	8083db8 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8082236:	b002      	add	sp, #8
 8082238:	bd10      	pop	{r4, pc}
 808223a:	bf00      	nop
 808223c:	3f700000 	.word	0x3f700000

08082240 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8082240:	4770      	bx	lr

08082242 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082244:	4606      	mov	r6, r0
 8082246:	4615      	mov	r5, r2
 8082248:	460c      	mov	r4, r1
 808224a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808224c:	42bc      	cmp	r4, r7
 808224e:	d006      	beq.n	808225e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8082250:	6833      	ldr	r3, [r6, #0]
 8082252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082256:	689b      	ldr	r3, [r3, #8]
 8082258:	4630      	mov	r0, r6
 808225a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808225c:	e7f6      	b.n	808224c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808225e:	4628      	mov	r0, r5
 8082260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082262 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8082262:	2200      	movs	r2, #0
 8082264:	7c00      	ldrb	r0, [r0, #16]
 8082266:	f7ff b95d 	b.w	8081524 <HAL_I2C_Write_Data>

0808226a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808226a:	2100      	movs	r1, #0
 808226c:	7c00      	ldrb	r0, [r0, #16]
 808226e:	f7ff b961 	b.w	8081534 <HAL_I2C_Available_Data>

08082272 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8082272:	2100      	movs	r1, #0
 8082274:	7c00      	ldrb	r0, [r0, #16]
 8082276:	f7ff b965 	b.w	8081544 <HAL_I2C_Read_Data>

0808227a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808227a:	2100      	movs	r1, #0
 808227c:	7c00      	ldrb	r0, [r0, #16]
 808227e:	f7ff b969 	b.w	8081554 <HAL_I2C_Peek_Data>

08082282 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8082282:	2100      	movs	r1, #0
 8082284:	7c00      	ldrb	r0, [r0, #16]
 8082286:	f7ff b96d 	b.w	8081564 <HAL_I2C_Flush_Data>

0808228a <_ZN7TwoWireD0Ev>:
 808228a:	b510      	push	{r4, lr}
 808228c:	4604      	mov	r4, r0
 808228e:	f7fd ff06 	bl	808009e <_ZdlPv>
 8082292:	4620      	mov	r0, r4
 8082294:	bd10      	pop	{r4, pc}
	...

08082298 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082298:	b510      	push	{r4, lr}
 808229a:	4604      	mov	r4, r0
 808229c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80822a2:	60a3      	str	r3, [r4, #8]
 80822a4:	4b04      	ldr	r3, [pc, #16]	; (80822b8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80822a6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80822a8:	7420      	strb	r0, [r4, #16]
 80822aa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80822ac:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80822ae:	f7ff f969 	bl	8081584 <HAL_I2C_Init>

}
 80822b2:	4620      	mov	r0, r4
 80822b4:	bd10      	pop	{r4, pc}
 80822b6:	bf00      	nop
 80822b8:	080853a0 	.word	0x080853a0

080822bc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80822bc:	2300      	movs	r3, #0
 80822be:	461a      	mov	r2, r3
 80822c0:	4619      	mov	r1, r3
 80822c2:	7c00      	ldrb	r0, [r0, #16]
 80822c4:	f7ff b90e 	b.w	80814e4 <HAL_I2C_Begin>

080822c8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80822c8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80822ca:	2400      	movs	r4, #0
 80822cc:	7c00      	ldrb	r0, [r0, #16]
 80822ce:	9400      	str	r4, [sp, #0]
 80822d0:	f7ff f910 	bl	80814f4 <HAL_I2C_Request_Data>
  return result;
}
 80822d4:	b2c0      	uxtb	r0, r0
 80822d6:	b002      	add	sp, #8
 80822d8:	bd10      	pop	{r4, pc}

080822da <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80822da:	b2db      	uxtb	r3, r3
 80822dc:	b2d2      	uxtb	r2, r2
 80822de:	b2c9      	uxtb	r1, r1
 80822e0:	f7ff bff2 	b.w	80822c8 <_ZN7TwoWire11requestFromEhhh>

080822e4 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80822e4:	2200      	movs	r2, #0
 80822e6:	7c00      	ldrb	r0, [r0, #16]
 80822e8:	f7ff b90c 	b.w	8081504 <HAL_I2C_Begin_Transmission>

080822ec <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80822ec:	b2c9      	uxtb	r1, r1
 80822ee:	f7ff bff9 	b.w	80822e4 <_ZN7TwoWire17beginTransmissionEh>

080822f2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80822f2:	2200      	movs	r2, #0
 80822f4:	7c00      	ldrb	r0, [r0, #16]
 80822f6:	f7ff b90d 	b.w	8081514 <HAL_I2C_End_Transmission>

080822fa <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80822fa:	2101      	movs	r1, #1
 80822fc:	f7ff bff9 	b.w	80822f2 <_ZN7TwoWire15endTransmissionEh>

08082300 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8082300:	2100      	movs	r1, #0
 8082302:	7c00      	ldrb	r0, [r0, #16]
 8082304:	f7ff b936 	b.w	8081574 <HAL_I2C_Is_Enabled>

08082308 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082308:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808230a:	2100      	movs	r1, #0
 808230c:	7c00      	ldrb	r0, [r0, #16]
 808230e:	f7ff f941 	bl	8081594 <HAL_I2C_Acquire>
}
 8082312:	fab0 f080 	clz	r0, r0
 8082316:	0940      	lsrs	r0, r0, #5
 8082318:	bd08      	pop	{r3, pc}

0808231a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808231a:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808231c:	2100      	movs	r1, #0
 808231e:	7c00      	ldrb	r0, [r0, #16]
 8082320:	f7ff f940 	bl	80815a4 <HAL_I2C_Release>
}
 8082324:	fab0 f080 	clz	r0, r0
 8082328:	0940      	lsrs	r0, r0, #5
 808232a:	bd08      	pop	{r3, pc}

0808232c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808232c:	4700      	bx	r0
	...

08082330 <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8082330:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082332:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8082336:	4605      	mov	r5, r0
 8082338:	460f      	mov	r7, r1
 808233a:	4690      	mov	r8, r2
 808233c:	461e      	mov	r6, r3
 808233e:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8082342:	d019      	beq.n	8082378 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
 8082344:	f7ff f8c6 	bl	80814d4 <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8082348:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808234a:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808234e:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082350:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8082354:	bfa2      	ittt	ge
 8082356:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    return &extra;
 808235a:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 808235c:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8082360:	4628      	mov	r0, r5
 8082362:	9400      	str	r4, [sp, #0]
 8082364:	4643      	mov	r3, r8
 8082366:	463a      	mov	r2, r7
 8082368:	4905      	ldr	r1, [pc, #20]	; (8082380 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808236a:	bfa8      	it	ge
 808236c:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8082370:	f7ff f8a8 	bl	80814c4 <HAL_Interrupts_Attach>
    return true;
 8082374:	2001      	movs	r0, #1
 8082376:	e000      	b.n	808237a <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8082378:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
 808237a:	b004      	add	sp, #16
 808237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082380:	0808232d 	.word	0x0808232d

08082384 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082384:	4770      	bx	lr

08082386 <_ZN9IPAddressD0Ev>:
 8082386:	b510      	push	{r4, lr}
 8082388:	4604      	mov	r4, r0
 808238a:	f7fd fe88 	bl	808009e <_ZdlPv>
 808238e:	4620      	mov	r0, r4
 8082390:	bd10      	pop	{r4, pc}

08082392 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082394:	460f      	mov	r7, r1
 8082396:	f100 0608 	add.w	r6, r0, #8
 808239a:	1d05      	adds	r5, r0, #4
 808239c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808239e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80823a2:	220a      	movs	r2, #10
 80823a4:	4638      	mov	r0, r7
 80823a6:	f000 fabe 	bl	8082926 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80823aa:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80823ac:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80823ae:	d007      	beq.n	80823c0 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80823b0:	2c00      	cmp	r4, #0
 80823b2:	d0f4      	beq.n	808239e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80823b4:	212e      	movs	r1, #46	; 0x2e
 80823b6:	4638      	mov	r0, r7
 80823b8:	f000 fa88 	bl	80828cc <_ZN5Print5printEc>
 80823bc:	4404      	add	r4, r0
 80823be:	e7ee      	b.n	808239e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80823c0:	4620      	mov	r0, r4
 80823c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080823c4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80823c4:	4a02      	ldr	r2, [pc, #8]	; (80823d0 <_ZN9IPAddressC1Ev+0xc>)
 80823c6:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80823c8:	2200      	movs	r2, #0
 80823ca:	6042      	str	r2, [r0, #4]
{
    clear();
}
 80823cc:	4770      	bx	lr
 80823ce:	bf00      	nop
 80823d0:	080853c8 	.word	0x080853c8

080823d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80823d4:	4a02      	ldr	r2, [pc, #8]	; (80823e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80823d6:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80823d8:	680a      	ldr	r2, [r1, #0]
 80823da:	6042      	str	r2, [r0, #4]
}
 80823dc:	4770      	bx	lr
 80823de:	bf00      	nop
 80823e0:	080853c8 	.word	0x080853c8

080823e4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80823e4:	4a01      	ldr	r2, [pc, #4]	; (80823ec <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80823e6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80823e8:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80823ea:	4770      	bx	lr
 80823ec:	080853c8 	.word	0x080853c8

080823f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80823f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80823f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80823f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80823fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80823fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8082402:	6041      	str	r1, [r0, #4]
 8082404:	bd10      	pop	{r4, pc}
	...

08082408 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808240a:	4d04      	ldr	r5, [pc, #16]	; (808241c <_ZN9IPAddressC1Ehhhh+0x14>)
 808240c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808240e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082412:	9500      	str	r5, [sp, #0]
 8082414:	f7ff ffec 	bl	80823f0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082418:	b003      	add	sp, #12
 808241a:	bd30      	pop	{r4, r5, pc}
 808241c:	080853c8 	.word	0x080853c8

08082420 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082420:	4a01      	ldr	r2, [pc, #4]	; (8082428 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082422:	4b02      	ldr	r3, [pc, #8]	; (808242c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082424:	601a      	str	r2, [r3, #0]
 8082426:	4770      	bx	lr
 8082428:	08085489 	.word	0x08085489
 808242c:	20000660 	.word	0x20000660

08082430 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082430:	2300      	movs	r3, #0
 8082432:	461a      	mov	r2, r3
 8082434:	6840      	ldr	r0, [r0, #4]
 8082436:	f7ff b9e9 	b.w	808180c <network_connect>

0808243a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808243a:	2200      	movs	r2, #0
 808243c:	2102      	movs	r1, #2
 808243e:	6840      	ldr	r0, [r0, #4]
 8082440:	f7ff b9f4 	b.w	808182c <network_disconnect>

08082444 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082444:	2200      	movs	r2, #0
 8082446:	4611      	mov	r1, r2
 8082448:	6840      	ldr	r0, [r0, #4]
 808244a:	f7ff b9e7 	b.w	808181c <network_connecting>

0808244e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808244e:	2200      	movs	r2, #0
 8082450:	4611      	mov	r1, r2
 8082452:	6840      	ldr	r0, [r0, #4]
 8082454:	f7ff b9f2 	b.w	808183c <network_ready>

08082458 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082458:	2300      	movs	r3, #0
 808245a:	461a      	mov	r2, r3
 808245c:	4619      	mov	r1, r3
 808245e:	6840      	ldr	r0, [r0, #4]
 8082460:	f7ff b9f4 	b.w	808184c <network_on>

08082464 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082464:	2300      	movs	r3, #0
 8082466:	461a      	mov	r2, r3
 8082468:	4619      	mov	r1, r3
 808246a:	6840      	ldr	r0, [r0, #4]
 808246c:	f7ff b9f6 	b.w	808185c <network_off>

08082470 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082470:	2200      	movs	r2, #0
 8082472:	f081 0101 	eor.w	r1, r1, #1
 8082476:	6840      	ldr	r0, [r0, #4]
 8082478:	f7ff b9f8 	b.w	808186c <network_listen>

0808247c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808247c:	2200      	movs	r2, #0
 808247e:	6840      	ldr	r0, [r0, #4]
 8082480:	f7ff ba04 	b.w	808188c <network_set_listen_timeout>

08082484 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082484:	2200      	movs	r2, #0
 8082486:	4611      	mov	r1, r2
 8082488:	6840      	ldr	r0, [r0, #4]
 808248a:	f7ff ba07 	b.w	808189c <network_get_listen_timeout>

0808248e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808248e:	2200      	movs	r2, #0
 8082490:	4611      	mov	r1, r2
 8082492:	6840      	ldr	r0, [r0, #4]
 8082494:	f7ff b9f2 	b.w	808187c <network_listening>

08082498 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082498:	b5f0      	push	{r4, r5, r6, r7, lr}
 808249a:	4617      	mov	r7, r2
 808249c:	b087      	sub	sp, #28
 808249e:	4605      	mov	r5, r0
    IPAddress addr;
 80824a0:	a804      	add	r0, sp, #16
 80824a2:	f7ff ff8f 	bl	80823c4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80824a6:	2600      	movs	r6, #0
 80824a8:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80824aa:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80824ac:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80824b0:	f002 f925 	bl	80846fe <strlen>
 80824b4:	4b0a      	ldr	r3, [pc, #40]	; (80824e0 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 80824b6:	9600      	str	r6, [sp, #0]
 80824b8:	b281      	uxth	r1, r0
 80824ba:	685b      	ldr	r3, [r3, #4]
 80824bc:	4622      	mov	r2, r4
 80824be:	4638      	mov	r0, r7
 80824c0:	f7fe ff58 	bl	8081374 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80824c4:	b120      	cbz	r0, 80824d0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80824c6:	4631      	mov	r1, r6
 80824c8:	4628      	mov	r0, r5
 80824ca:	f7ff ff8b 	bl	80823e4 <_ZN9IPAddressC1Em>
 80824ce:	e003      	b.n	80824d8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80824d0:	4621      	mov	r1, r4
 80824d2:	4628      	mov	r0, r5
 80824d4:	f7ff ff7e 	bl	80823d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80824d8:	4628      	mov	r0, r5
 80824da:	b007      	add	sp, #28
 80824dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80824de:	bf00      	nop
 80824e0:	20000604 	.word	0x20000604

080824e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80824e4:	4b02      	ldr	r3, [pc, #8]	; (80824f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80824e6:	4a03      	ldr	r2, [pc, #12]	; (80824f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80824e8:	601a      	str	r2, [r3, #0]
 80824ea:	2200      	movs	r2, #0
 80824ec:	605a      	str	r2, [r3, #4]
 80824ee:	4770      	bx	lr
 80824f0:	20000664 	.word	0x20000664
 80824f4:	080854bc 	.word	0x080854bc

080824f8 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 80824f8:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80824fa:	f000 fe87 	bl	808320c <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 80824fe:	f7ff feff 	bl	8082300 <_ZN7TwoWire9isEnabledEv>
 8082502:	b918      	cbnz	r0, 808250c <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082504:	f000 fe82 	bl	808320c <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 8082508:	f7ff fed8 	bl	80822bc <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808250c:	f000 fe7e 	bl	808320c <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 8082510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 8082514:	f7ff bef4 	b.w	8082300 <_ZN7TwoWire9isEnabledEv>

08082518 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8082518:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808251a:	f000 fe77 	bl	808320c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 808251e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8082522:	f7ff bef1 	b.w	8082308 <_ZN7TwoWire4lockEv>

08082526 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8082526:	b510      	push	{r4, lr}
 8082528:	4604      	mov	r4, r0
    lock_(_lock)
 808252a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 808252c:	b109      	cbz	r1, 8082532 <_ZN4PMICC1Eb+0xc>
        lock();
 808252e:	f7ff fff3 	bl	8082518 <_ZN4PMIC4lockEv>
    }
}
 8082532:	4620      	mov	r0, r4
 8082534:	bd10      	pop	{r4, pc}

08082536 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8082536:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082538:	f000 fe68 	bl	808320c <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 808253c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8082540:	f7ff beeb 	b.w	808231a <_ZN7TwoWire6unlockEv>

08082544 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082544:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082546:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082548:	4604      	mov	r4, r0
{
    if (lock_) {
 808254a:	b10b      	cbz	r3, 8082550 <_ZN4PMICD1Ev+0xc>
        unlock();
 808254c:	f7ff fff3 	bl	8082536 <_ZN4PMIC6unlockEv>
    }
}
 8082550:	4620      	mov	r0, r4
 8082552:	bd10      	pop	{r4, pc}

08082554 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8082554:	b510      	push	{r4, lr}
 8082556:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8082558:	6800      	ldr	r0, [r0, #0]
 808255a:	f7ff ffec 	bl	8082536 <_ZN4PMIC6unlockEv>
 808255e:	4620      	mov	r0, r4
 8082560:	bd10      	pop	{r4, pc}

08082562 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8082562:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082564:	ac02      	add	r4, sp, #8
 8082566:	460d      	mov	r5, r1
 8082568:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808256c:	f7ff ffd4 	bl	8082518 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082570:	f000 fe4c 	bl	808320c <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8082574:	216b      	movs	r1, #107	; 0x6b
 8082576:	f7ff feb9 	bl	80822ec <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808257a:	f000 fe47 	bl	808320c <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808257e:	6803      	ldr	r3, [r0, #0]
 8082580:	4629      	mov	r1, r5
 8082582:	689b      	ldr	r3, [r3, #8]
 8082584:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082586:	f000 fe41 	bl	808320c <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 808258a:	2101      	movs	r1, #1
 808258c:	f7ff feb1 	bl	80822f2 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082590:	f000 fe3c 	bl	808320c <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8082594:	2301      	movs	r3, #1
 8082596:	461a      	mov	r2, r3
 8082598:	216b      	movs	r1, #107	; 0x6b
 808259a:	f7ff fe9e 	bl	80822da <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808259e:	f000 fe35 	bl	808320c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 80825a2:	6803      	ldr	r3, [r0, #0]
 80825a4:	695b      	ldr	r3, [r3, #20]
 80825a6:	4798      	blx	r3
 80825a8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 80825aa:	4620      	mov	r0, r4
 80825ac:	f7ff ffd2 	bl	8082554 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 80825b0:	b2e8      	uxtb	r0, r5
 80825b2:	b003      	add	sp, #12
 80825b4:	bd30      	pop	{r4, r5, pc}

080825b6 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 80825b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80825b8:	ac02      	add	r4, sp, #8
 80825ba:	4615      	mov	r5, r2
 80825bc:	460e      	mov	r6, r1
 80825be:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80825c2:	f7ff ffa9 	bl	8082518 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80825c6:	f000 fe21 	bl	808320c <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80825ca:	216b      	movs	r1, #107	; 0x6b
 80825cc:	f7ff fe8e 	bl	80822ec <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80825d0:	f000 fe1c 	bl	808320c <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 80825d4:	6803      	ldr	r3, [r0, #0]
 80825d6:	4631      	mov	r1, r6
 80825d8:	689b      	ldr	r3, [r3, #8]
 80825da:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80825dc:	f000 fe16 	bl	808320c <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 80825e0:	6803      	ldr	r3, [r0, #0]
 80825e2:	4629      	mov	r1, r5
 80825e4:	689b      	ldr	r3, [r3, #8]
 80825e6:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80825e8:	f000 fe10 	bl	808320c <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 80825ec:	2101      	movs	r1, #1
 80825ee:	f7ff fe80 	bl	80822f2 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 80825f2:	4620      	mov	r0, r4
 80825f4:	f7ff ffae 	bl	8082554 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 80825f8:	b002      	add	sp, #8
 80825fa:	bd70      	pop	{r4, r5, r6, pc}

080825fc <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 80825fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80825fe:	4604      	mov	r4, r0
 8082600:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082602:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082604:	f7ff ff88 	bl	8082518 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8082608:	2100      	movs	r1, #0
 808260a:	4620      	mov	r0, r4
 808260c:	f7ff ffa9 	bl	8082562 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082610:	f241 1358 	movw	r3, #4440	; 0x1158
 8082614:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 8082616:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 808261a:	d05b      	beq.n	80826d4 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 808261c:	d820      	bhi.n	8082660 <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 808261e:	f241 0318 	movw	r3, #4120	; 0x1018
 8082622:	429d      	cmp	r5, r3
 8082624:	d04d      	beq.n	80826c2 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 8082626:	d80c      	bhi.n	8082642 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 8082628:	f640 7378 	movw	r3, #3960	; 0xf78
 808262c:	429d      	cmp	r5, r3
 808262e:	d042      	beq.n	80826b6 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 8082630:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8082634:	429d      	cmp	r5, r3
 8082636:	d041      	beq.n	80826bc <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8082638:	f640 7328 	movw	r3, #3880	; 0xf28
 808263c:	429d      	cmp	r5, r3
 808263e:	d160      	bne.n	8082702 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 8082640:	e059      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 8082642:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8082646:	429d      	cmp	r5, r3
 8082648:	d03e      	beq.n	80826c8 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 808264a:	f241 1308 	movw	r3, #4360	; 0x1108
 808264e:	429d      	cmp	r5, r3
 8082650:	d03d      	beq.n	80826ce <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 8082652:	f241 0368 	movw	r3, #4200	; 0x1068
 8082656:	429d      	cmp	r5, r3
 8082658:	d153      	bne.n	8082702 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 808265a:	f042 0220 	orr.w	r2, r2, #32
 808265e:	e04a      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082660:	f241 2398 	movw	r3, #4760	; 0x1298
 8082664:	429d      	cmp	r5, r3
 8082666:	d03e      	beq.n	80826e6 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8082668:	d80e      	bhi.n	8082688 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 808266a:	f241 13f8 	movw	r3, #4600	; 0x11f8
 808266e:	429d      	cmp	r5, r3
 8082670:	d033      	beq.n	80826da <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 8082672:	f241 2348 	movw	r3, #4680	; 0x1248
 8082676:	429d      	cmp	r5, r3
 8082678:	d032      	beq.n	80826e0 <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 808267a:	f241 13a8 	movw	r3, #4520	; 0x11a8
 808267e:	429d      	cmp	r5, r3
 8082680:	d13f      	bne.n	8082702 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 8082682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8082686:	e036      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082688:	f241 3338 	movw	r3, #4920	; 0x1338
 808268c:	429d      	cmp	r5, r3
 808268e:	d02d      	beq.n	80826ec <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 8082690:	d806      	bhi.n	80826a0 <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 8082692:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8082696:	429d      	cmp	r5, r3
 8082698:	d133      	bne.n	8082702 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 808269a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 808269e:	e02a      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 80826a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80826a4:	429d      	cmp	r5, r3
 80826a6:	d024      	beq.n	80826f2 <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 80826a8:	f241 33d8 	movw	r3, #5080	; 0x13d8
 80826ac:	429d      	cmp	r5, r3
 80826ae:	d128      	bne.n	8082702 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 80826b0:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 80826b4:	e01f      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 80826b6:	f042 0208 	orr.w	r2, r2, #8
 80826ba:	e01c      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 80826bc:	f042 0210 	orr.w	r2, r2, #16
 80826c0:	e019      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 80826c2:	f042 0218 	orr.w	r2, r2, #24
 80826c6:	e016      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 80826c8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80826cc:	e013      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 80826ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80826d2:	e010      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 80826d4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80826d8:	e00d      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 80826da:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 80826de:	e00a      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 80826e0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80826e4:	e007      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 80826e6:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80826ea:	e004      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 80826ec:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 80826f0:	e001      	b.n	80826f6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 80826f2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80826f6:	4620      	mov	r0, r4
 80826f8:	2100      	movs	r1, #0
 80826fa:	f7ff ff5c 	bl	80825b6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80826fe:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 8082700:	e000      	b.n	8082704 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8082702:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082704:	a801      	add	r0, sp, #4
 8082706:	f7ff ff25 	bl	8082554 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808270a:	4620      	mov	r0, r4
 808270c:	b003      	add	sp, #12
 808270e:	bd30      	pop	{r4, r5, pc}

08082710 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8082710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082712:	4604      	mov	r4, r0
 8082714:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082716:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082718:	f7ff fefe 	bl	8082518 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 808271c:	2100      	movs	r1, #0
 808271e:	4620      	mov	r0, r4
 8082720:	f7ff ff1f 	bl	8082562 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 8082724:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 8082728:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 808272c:	d023      	beq.n	8082776 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808272e:	d807      	bhi.n	8082740 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 8082730:	2d96      	cmp	r5, #150	; 0x96
 8082732:	d01a      	beq.n	808276a <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8082734:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8082738:	d01a      	beq.n	8082770 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 808273a:	2d64      	cmp	r5, #100	; 0x64
 808273c:	d129      	bne.n	8082792 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808273e:	e022      	b.n	8082786 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8082740:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8082744:	429d      	cmp	r5, r3
 8082746:	d019      	beq.n	808277c <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 8082748:	d805      	bhi.n	8082756 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 808274a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 808274e:	d120      	bne.n	8082792 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8082750:	f042 0204 	orr.w	r2, r2, #4
 8082754:	e017      	b.n	8082786 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8082756:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808275a:	d012      	beq.n	8082782 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 808275c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8082760:	429d      	cmp	r5, r3
 8082762:	d116      	bne.n	8082792 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8082764:	f042 0207 	orr.w	r2, r2, #7
 8082768:	e00d      	b.n	8082786 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 808276a:	f042 0201 	orr.w	r2, r2, #1
 808276e:	e00a      	b.n	8082786 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8082770:	f042 0202 	orr.w	r2, r2, #2
 8082774:	e007      	b.n	8082786 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8082776:	f042 0203 	orr.w	r2, r2, #3
 808277a:	e004      	b.n	8082786 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 808277c:	f042 0205 	orr.w	r2, r2, #5
 8082780:	e001      	b.n	8082786 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8082782:	f042 0206 	orr.w	r2, r2, #6
 8082786:	4620      	mov	r0, r4
 8082788:	2100      	movs	r1, #0
 808278a:	f7ff ff14 	bl	80825b6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808278e:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 8082790:	e000      	b.n	8082794 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8082792:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8082794:	a801      	add	r0, sp, #4
 8082796:	f7ff fedd 	bl	8082554 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808279a:	4620      	mov	r0, r4
 808279c:	b003      	add	sp, #12
 808279e:	bd30      	pop	{r4, r5, pc}

080827a0 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 80827a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80827a2:	460c      	mov	r4, r1
 80827a4:	4617      	mov	r7, r2
 80827a6:	4605      	mov	r5, r0
 80827a8:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80827aa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80827ac:	f7ff feb4 	bl	8082518 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 80827b0:	2c00      	cmp	r4, #0
 80827b2:	bf0c      	ite	eq
 80827b4:	2400      	moveq	r4, #0
 80827b6:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 80827b8:	b117      	cbz	r7, 80827c0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 80827ba:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80827be:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 80827c0:	b10e      	cbz	r6, 80827c6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 80827c2:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 80827c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80827ca:	b10b      	cbz	r3, 80827d0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 80827cc:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 80827d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80827d4:	b10b      	cbz	r3, 80827da <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 80827d6:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 80827da:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80827de:	b10b      	cbz	r3, 80827e4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 80827e0:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 80827e4:	2102      	movs	r1, #2
 80827e6:	4628      	mov	r0, r5
 80827e8:	f7ff febb 	bl	8082562 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 80827ec:	f000 0201 	and.w	r2, r0, #1
 80827f0:	4322      	orrs	r2, r4
 80827f2:	2102      	movs	r1, #2
 80827f4:	4628      	mov	r0, r5
 80827f6:	f7ff fede 	bl	80825b6 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 80827fa:	a801      	add	r0, sp, #4
 80827fc:	f7ff feaa 	bl	8082554 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8082800:	2001      	movs	r0, #1
 8082802:	b003      	add	sp, #12
 8082804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082806 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8082806:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082808:	4604      	mov	r4, r0
 808280a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808280c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808280e:	f7ff fe83 	bl	8082518 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8082812:	2104      	movs	r1, #4
 8082814:	4620      	mov	r0, r4
 8082816:	f7ff fea4 	bl	8082562 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 808281a:	f241 0310 	movw	r3, #4112	; 0x1010
 808281e:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 8082820:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8082824:	d006      	beq.n	8082834 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8082826:	f241 0370 	movw	r3, #4208	; 0x1070
 808282a:	429d      	cmp	r5, r3
 808282c:	d10a      	bne.n	8082844 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808282e:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8082832:	e001      	b.n	8082838 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8082834:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8082838:	4620      	mov	r0, r4
 808283a:	2104      	movs	r1, #4
 808283c:	f7ff febb 	bl	80825b6 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8082840:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8082842:	e000      	b.n	8082846 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8082844:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082846:	a801      	add	r0, sp, #4
 8082848:	f7ff fe84 	bl	8082554 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808284c:	4620      	mov	r0, r4
 808284e:	b003      	add	sp, #12
 8082850:	bd30      	pop	{r4, r5, pc}

08082852 <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
 8082852:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082854:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082856:	ac02      	add	r4, sp, #8
 8082858:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808285c:	f7ff fe5c 	bl	8082518 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
 8082860:	2105      	movs	r1, #5
 8082862:	4628      	mov	r0, r5
 8082864:	f7ff fe7d 	bl	8082562 <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
 8082868:	2105      	movs	r1, #5
 808286a:	f000 02ce 	and.w	r2, r0, #206	; 0xce
 808286e:	4628      	mov	r0, r5
 8082870:	f7ff fea1 	bl	80825b6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
 8082874:	4620      	mov	r0, r4
 8082876:	f7ff fe6d 	bl	8082554 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
 808287a:	2001      	movs	r0, #1
 808287c:	b003      	add	sp, #12
 808287e:	bd30      	pop	{r4, r5, pc}

08082880 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082882:	4606      	mov	r6, r0
 8082884:	460d      	mov	r5, r1
 8082886:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082888:	2400      	movs	r4, #0
  while (size--) {
 808288a:	42bd      	cmp	r5, r7
 808288c:	d00c      	beq.n	80828a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808288e:	6833      	ldr	r3, [r6, #0]
 8082890:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082894:	689b      	ldr	r3, [r3, #8]
 8082896:	4630      	mov	r0, r6
 8082898:	4798      	blx	r3
     if (chunk>=0)
 808289a:	2800      	cmp	r0, #0
 808289c:	db01      	blt.n	80828a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808289e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80828a0:	e7f3      	b.n	808288a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80828a2:	2c00      	cmp	r4, #0
 80828a4:	bf08      	it	eq
 80828a6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80828a8:	4620      	mov	r0, r4
 80828aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080828ac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80828ac:	b570      	push	{r4, r5, r6, lr}
 80828ae:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80828b0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80828b2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80828b4:	b149      	cbz	r1, 80828ca <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80828b6:	f001 ff22 	bl	80846fe <strlen>
 80828ba:	682b      	ldr	r3, [r5, #0]
 80828bc:	4602      	mov	r2, r0
 80828be:	4621      	mov	r1, r4
 80828c0:	4628      	mov	r0, r5
    }
 80828c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80828c6:	68db      	ldr	r3, [r3, #12]
 80828c8:	4718      	bx	r3
    }
 80828ca:	bd70      	pop	{r4, r5, r6, pc}

080828cc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80828cc:	6803      	ldr	r3, [r0, #0]
 80828ce:	689b      	ldr	r3, [r3, #8]
 80828d0:	4718      	bx	r3

080828d2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80828d2:	2a01      	cmp	r2, #1
 80828d4:	bf98      	it	ls
 80828d6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80828d8:	b530      	push	{r4, r5, lr}
 80828da:	460b      	mov	r3, r1
 80828dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80828de:	2100      	movs	r1, #0
 80828e0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80828e4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80828e8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80828ec:	fb05 3312 	mls	r3, r5, r2, r3
 80828f0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80828f2:	2b09      	cmp	r3, #9
 80828f4:	bf94      	ite	ls
 80828f6:	3330      	addls	r3, #48	; 0x30
 80828f8:	3337      	addhi	r3, #55	; 0x37
 80828fa:	b2db      	uxtb	r3, r3
 80828fc:	4621      	mov	r1, r4
 80828fe:	f804 3901 	strb.w	r3, [r4], #-1
 8082902:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8082904:	2d00      	cmp	r5, #0
 8082906:	d1ef      	bne.n	80828e8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082908:	f7ff ffd0 	bl	80828ac <_ZN5Print5writeEPKc>
}
 808290c:	b00b      	add	sp, #44	; 0x2c
 808290e:	bd30      	pop	{r4, r5, pc}

08082910 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8082910:	b410      	push	{r4}
  if (base == 0) return write(n);
 8082912:	b922      	cbnz	r2, 808291e <_ZN5Print5printEmi+0xe>
 8082914:	6803      	ldr	r3, [r0, #0]
 8082916:	b2c9      	uxtb	r1, r1
 8082918:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808291a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808291c:	4718      	bx	r3
  else return printNumber(n, base);
 808291e:	b2d2      	uxtb	r2, r2
}
 8082920:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8082922:	f7ff bfd6 	b.w	80828d2 <_ZN5Print11printNumberEmh>

08082926 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8082926:	f7ff bff3 	b.w	8082910 <_ZN5Print5printEmi>

0808292a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 808292a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808292e:	4607      	mov	r7, r0
 8082930:	460e      	mov	r6, r1
  if (base == 0) {
 8082932:	4615      	mov	r5, r2
 8082934:	b92a      	cbnz	r2, 8082942 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8082936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 808293a:	6803      	ldr	r3, [r0, #0]
 808293c:	b2c9      	uxtb	r1, r1
 808293e:	689b      	ldr	r3, [r3, #8]
 8082940:	4718      	bx	r3
  } else if (base == 10) {
 8082942:	2a0a      	cmp	r2, #10
 8082944:	d102      	bne.n	808294c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8082946:	2900      	cmp	r1, #0
 8082948:	da01      	bge.n	808294e <_ZN5Print5printEli+0x24>
 808294a:	e004      	b.n	8082956 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808294c:	b2d2      	uxtb	r2, r2
  }
}
 808294e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8082952:	f7ff bfbe 	b.w	80828d2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8082956:	212d      	movs	r1, #45	; 0x2d
 8082958:	f7ff ffb8 	bl	80828cc <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 808295c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808295e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8082960:	4271      	negs	r1, r6
 8082962:	4638      	mov	r0, r7
 8082964:	f7ff ffb5 	bl	80828d2 <_ZN5Print11printNumberEmh>
 8082968:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808296e <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808296e:	f7ff bfdc 	b.w	808292a <_ZN5Print5printEli>

08082972 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082972:	b510      	push	{r4, lr}
 8082974:	4604      	mov	r4, r0
 8082976:	f7ff f931 	bl	8081bdc <_ZNSt14_Function_baseD1Ev>
 808297a:	4620      	mov	r0, r4
 808297c:	bd10      	pop	{r4, pc}
	...

08082980 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082980:	4803      	ldr	r0, [pc, #12]	; (8082990 <_GLOBAL__sub_I_RGB+0x10>)
 8082982:	2300      	movs	r3, #0
 8082984:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8082986:	4a03      	ldr	r2, [pc, #12]	; (8082994 <_GLOBAL__sub_I_RGB+0x14>)
 8082988:	4903      	ldr	r1, [pc, #12]	; (8082998 <_GLOBAL__sub_I_RGB+0x18>)
 808298a:	f000 bca5 	b.w	80832d8 <__aeabi_atexit>
 808298e:	bf00      	nop
 8082990:	2000066c 	.word	0x2000066c
 8082994:	200004f0 	.word	0x200004f0
 8082998:	08082973 	.word	0x08082973

0808299c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 808299c:	4770      	bx	lr

0808299e <_ZN8SPIClassD0Ev>:
 808299e:	b510      	push	{r4, lr}
 80829a0:	4604      	mov	r4, r0
 80829a2:	f7fd fb7c 	bl	808009e <_ZdlPv>
 80829a6:	4620      	mov	r0, r4
 80829a8:	bd10      	pop	{r4, pc}
	...

080829ac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80829ac:	b570      	push	{r4, r5, r6, lr}
 80829ae:	4604      	mov	r4, r0
 80829b0:	460e      	mov	r6, r1
 80829b2:	4b07      	ldr	r3, [pc, #28]	; (80829d0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80829b4:	2500      	movs	r5, #0
 80829b6:	6003      	str	r3, [r0, #0]
 80829b8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80829bc:	f7fe fcf2 	bl	80813a4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80829c0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80829c2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80829c4:	f7fe fdf6 	bl	80815b4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80829c8:	60a5      	str	r5, [r4, #8]
}
 80829ca:	4620      	mov	r0, r4
 80829cc:	bd70      	pop	{r4, r5, r6, pc}
 80829ce:	bf00      	nop
 80829d0:	080854f0 	.word	0x080854f0

080829d4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80829d4:	7900      	ldrb	r0, [r0, #4]
 80829d6:	f7fe bdf5 	b.w	80815c4 <HAL_SPI_Is_Enabled>

080829da <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80829da:	b510      	push	{r4, lr}
 80829dc:	4604      	mov	r4, r0
{
	free(buffer);
 80829de:	6800      	ldr	r0, [r0, #0]
 80829e0:	f7fe ff6c 	bl	80818bc <free>
}
 80829e4:	4620      	mov	r0, r4
 80829e6:	bd10      	pop	{r4, pc}

080829e8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80829e8:	b510      	push	{r4, lr}
 80829ea:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80829ec:	6800      	ldr	r0, [r0, #0]
 80829ee:	b108      	cbz	r0, 80829f4 <_ZN6String10invalidateEv+0xc>
 80829f0:	f7fe ff64 	bl	80818bc <free>
	buffer = NULL;
 80829f4:	2300      	movs	r3, #0
 80829f6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80829f8:	60a3      	str	r3, [r4, #8]
 80829fa:	6063      	str	r3, [r4, #4]
 80829fc:	bd10      	pop	{r4, pc}

080829fe <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80829fe:	b538      	push	{r3, r4, r5, lr}
 8082a00:	4604      	mov	r4, r0
 8082a02:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082a04:	6800      	ldr	r0, [r0, #0]
 8082a06:	3101      	adds	r1, #1
 8082a08:	f7fe ff60 	bl	80818cc <realloc>
	if (newbuffer) {
 8082a0c:	b110      	cbz	r0, 8082a14 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082a0e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8082a12:	2001      	movs	r0, #1
	}
	return 0;
}
 8082a14:	bd38      	pop	{r3, r4, r5, pc}

08082a16 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082a16:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082a18:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082a1a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082a1c:	b113      	cbz	r3, 8082a24 <_ZN6String7reserveEj+0xe>
 8082a1e:	6843      	ldr	r3, [r0, #4]
 8082a20:	428b      	cmp	r3, r1
 8082a22:	d207      	bcs.n	8082a34 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8082a24:	4620      	mov	r0, r4
 8082a26:	f7ff ffea 	bl	80829fe <_ZN6String12changeBufferEj>
 8082a2a:	b120      	cbz	r0, 8082a36 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082a2c:	68a3      	ldr	r3, [r4, #8]
 8082a2e:	b90b      	cbnz	r3, 8082a34 <_ZN6String7reserveEj+0x1e>
 8082a30:	6822      	ldr	r2, [r4, #0]
 8082a32:	7013      	strb	r3, [r2, #0]
 8082a34:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082a36:	bd10      	pop	{r4, pc}

08082a38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082a38:	b570      	push	{r4, r5, r6, lr}
 8082a3a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082a3c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082a3e:	4604      	mov	r4, r0
 8082a40:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082a42:	f7ff ffe8 	bl	8082a16 <_ZN6String7reserveEj>
 8082a46:	b918      	cbnz	r0, 8082a50 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082a48:	4620      	mov	r0, r4
 8082a4a:	f7ff ffcd 	bl	80829e8 <_ZN6String10invalidateEv>
		return *this;
 8082a4e:	e009      	b.n	8082a64 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8082a50:	462a      	mov	r2, r5
 8082a52:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8082a54:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082a56:	6820      	ldr	r0, [r4, #0]
 8082a58:	f001 fde8 	bl	808462c <memcpy>
	buffer[len] = 0;
 8082a5c:	6822      	ldr	r2, [r4, #0]
 8082a5e:	68a3      	ldr	r3, [r4, #8]
 8082a60:	2100      	movs	r1, #0
 8082a62:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8082a64:	4620      	mov	r0, r4
 8082a66:	bd70      	pop	{r4, r5, r6, pc}

08082a68 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082a68:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082a6a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082a6c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082a6e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082a70:	6043      	str	r3, [r0, #4]
	len = 0;
 8082a72:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082a74:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8082a76:	460d      	mov	r5, r1
 8082a78:	b139      	cbz	r1, 8082a8a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8082a7a:	4608      	mov	r0, r1
 8082a7c:	f001 fe3f 	bl	80846fe <strlen>
 8082a80:	4629      	mov	r1, r5
 8082a82:	4602      	mov	r2, r0
 8082a84:	4620      	mov	r0, r4
 8082a86:	f7ff ffd7 	bl	8082a38 <_ZN6String4copyEPKcj>
}
 8082a8a:	4620      	mov	r0, r4
 8082a8c:	bd38      	pop	{r3, r4, r5, pc}

08082a8e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082a8e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8082a90:	b510      	push	{r4, lr}
 8082a92:	460b      	mov	r3, r1
 8082a94:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082a96:	d007      	beq.n	8082aa8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082a98:	6809      	ldr	r1, [r1, #0]
 8082a9a:	b119      	cbz	r1, 8082aa4 <_ZN6StringaSERKS_+0x16>
 8082a9c:	689a      	ldr	r2, [r3, #8]
 8082a9e:	f7ff ffcb 	bl	8082a38 <_ZN6String4copyEPKcj>
 8082aa2:	e001      	b.n	8082aa8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8082aa4:	f7ff ffa0 	bl	80829e8 <_ZN6String10invalidateEv>

	return *this;
}
 8082aa8:	4620      	mov	r0, r4
 8082aaa:	bd10      	pop	{r4, pc}

08082aac <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8082aac:	b510      	push	{r4, lr}
 8082aae:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082ab0:	2300      	movs	r3, #0
 8082ab2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082ab4:	6043      	str	r3, [r0, #4]
	len = 0;
 8082ab6:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082ab8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8082aba:	f7ff ffe8 	bl	8082a8e <_ZN6StringaSERKS_>
}
 8082abe:	4620      	mov	r0, r4
 8082ac0:	bd10      	pop	{r4, pc}

08082ac2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082ac2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082ac4:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082ac6:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082ac8:	b912      	cbnz	r2, 8082ad0 <_ZNK6String6equalsEPKc+0xe>
 8082aca:	b919      	cbnz	r1, 8082ad4 <_ZNK6String6equalsEPKc+0x12>
 8082acc:	2001      	movs	r0, #1
 8082ace:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8082ad0:	b911      	cbnz	r1, 8082ad8 <_ZNK6String6equalsEPKc+0x16>
 8082ad2:	6803      	ldr	r3, [r0, #0]
 8082ad4:	7818      	ldrb	r0, [r3, #0]
 8082ad6:	e002      	b.n	8082ade <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8082ad8:	6800      	ldr	r0, [r0, #0]
 8082ada:	f001 fde3 	bl	80846a4 <strcmp>
 8082ade:	fab0 f080 	clz	r0, r0
 8082ae2:	0940      	lsrs	r0, r0, #5
}
 8082ae4:	bd08      	pop	{r3, pc}

08082ae6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082ae6:	b570      	push	{r4, r5, r6, lr}
 8082ae8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082aea:	b19a      	cbz	r2, 8082b14 <_ZNK6String8getBytesEPhjj+0x2e>
 8082aec:	b191      	cbz	r1, 8082b14 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8082aee:	6885      	ldr	r5, [r0, #8]
 8082af0:	429d      	cmp	r5, r3
 8082af2:	d802      	bhi.n	8082afa <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082af4:	2300      	movs	r3, #0
 8082af6:	700b      	strb	r3, [r1, #0]
		return;
 8082af8:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8082afa:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8082afc:	1aed      	subs	r5, r5, r3
 8082afe:	42ac      	cmp	r4, r5
 8082b00:	bf28      	it	cs
 8082b02:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8082b04:	6801      	ldr	r1, [r0, #0]
 8082b06:	4622      	mov	r2, r4
 8082b08:	4419      	add	r1, r3
 8082b0a:	4630      	mov	r0, r6
 8082b0c:	f001 fe14 	bl	8084738 <strncpy>
	buf[n] = 0;
 8082b10:	2300      	movs	r3, #0
 8082b12:	5533      	strb	r3, [r6, r4]
 8082b14:	bd70      	pop	{r4, r5, r6, pc}

08082b16 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8082b16:	4601      	mov	r1, r0
 8082b18:	2200      	movs	r2, #0
 8082b1a:	208c      	movs	r0, #140	; 0x8c
 8082b1c:	f7fe bc52 	b.w	80813c4 <HAL_Core_System_Reset_Ex>

08082b20 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8082b20:	2000      	movs	r0, #0
 8082b22:	f7ff bff8 	b.w	8082b16 <_ZN11SystemClass5resetEm>
	...

08082b28 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082b28:	b510      	push	{r4, lr}
 8082b2a:	4604      	mov	r4, r0
 8082b2c:	4608      	mov	r0, r1
 8082b2e:	4611      	mov	r1, r2
 8082b30:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8082b32:	2300      	movs	r3, #0
 8082b34:	f7fe fdd6 	bl	80816e4 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 8082b38:	4b06      	ldr	r3, [pc, #24]	; (8082b54 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 8082b3a:	2200      	movs	r2, #0
 8082b3c:	701a      	strb	r2, [r3, #0]
 8082b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082b42:	8058      	strh	r0, [r3, #2]
 8082b44:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8082b46:	681a      	ldr	r2, [r3, #0]
 8082b48:	889b      	ldrh	r3, [r3, #4]
 8082b4a:	6022      	str	r2, [r4, #0]
 8082b4c:	80a3      	strh	r3, [r4, #4]
}
 8082b4e:	4620      	mov	r0, r4
 8082b50:	bd10      	pop	{r4, pc}
 8082b52:	bf00      	nop
 8082b54:	2000067c 	.word	0x2000067c

08082b58 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082b5c:	4b03      	ldr	r3, [pc, #12]	; (8082b6c <_GLOBAL__sub_I_System+0x14>)
 8082b5e:	2000      	movs	r0, #0
 8082b60:	7018      	strb	r0, [r3, #0]
 8082b62:	8058      	strh	r0, [r3, #2]
 8082b64:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082b66:	f7fe bdad 	b.w	80816c4 <set_system_mode>
 8082b6a:	bf00      	nop
 8082b6c:	2000067c 	.word	0x2000067c

08082b70 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8082b72:	4b14      	ldr	r3, [pc, #80]	; (8082bc4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082b74:	4f14      	ldr	r7, [pc, #80]	; (8082bc8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082b76:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8082b78:	4b14      	ldr	r3, [pc, #80]	; (8082bcc <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082b7a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8082b7c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8082b7e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8082b80:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8082b82:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082b84:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082b86:	d01b      	beq.n	8082bc0 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8082b88:	a80a      	add	r0, sp, #40	; 0x28
 8082b8a:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8082b8e:	f001 fc55 	bl	808443c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082b92:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082b94:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8082b96:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082b98:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8082b9c:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8082b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082ba6:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082baa:	4c09      	ldr	r4, [pc, #36]	; (8082bd0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082bac:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082bb0:	ad01      	add	r5, sp, #4
 8082bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082bba:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082bbc:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8082bc0:	b00b      	add	sp, #44	; 0x2c
 8082bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082bc4:	200006b4 	.word	0x200006b4
 8082bc8:	200006b0 	.word	0x200006b0
 8082bcc:	200006ac 	.word	0x200006ac
 8082bd0:	20000684 	.word	0x20000684

08082bd4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8082bd4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082bd6:	2000      	movs	r0, #0
 8082bd8:	f7fe fe08 	bl	80817ec <spark_sync_time_pending>
 8082bdc:	b128      	cbz	r0, 8082bea <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082bde:	f7fe fde5 	bl	80817ac <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082be2:	f080 0001 	eor.w	r0, r0, #1
 8082be6:	b2c0      	uxtb	r0, r0
 8082be8:	bd08      	pop	{r3, pc}
 8082bea:	2001      	movs	r0, #1
    }
 8082bec:	bd08      	pop	{r3, pc}
	...

08082bf0 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082bf0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082bf2:	4909      	ldr	r1, [pc, #36]	; (8082c18 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082bf4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082bf6:	f001 fb85 	bl	8084304 <__aeabi_fcmplt>
 8082bfa:	b960      	cbnz	r0, 8082c16 <_ZN9TimeClass4zoneEf+0x26>
 8082bfc:	4907      	ldr	r1, [pc, #28]	; (8082c1c <_ZN9TimeClass4zoneEf+0x2c>)
 8082bfe:	4620      	mov	r0, r4
 8082c00:	f001 fb9e 	bl	8084340 <__aeabi_fcmpgt>
 8082c04:	b938      	cbnz	r0, 8082c16 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8082c06:	4906      	ldr	r1, [pc, #24]	; (8082c20 <_ZN9TimeClass4zoneEf+0x30>)
 8082c08:	4620      	mov	r0, r4
 8082c0a:	f001 f9dd 	bl	8083fc8 <__aeabi_fmul>
 8082c0e:	f001 fba1 	bl	8084354 <__aeabi_f2iz>
 8082c12:	4b04      	ldr	r3, [pc, #16]	; (8082c24 <_ZN9TimeClass4zoneEf+0x34>)
 8082c14:	6018      	str	r0, [r3, #0]
 8082c16:	bd10      	pop	{r4, pc}
 8082c18:	c1400000 	.word	0xc1400000
 8082c1c:	41600000 	.word	0x41600000
 8082c20:	45610000 	.word	0x45610000
 8082c24:	200006b4 	.word	0x200006b4

08082c28 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8082c2a:	4b0e      	ldr	r3, [pc, #56]	; (8082c64 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082c2c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8082c2e:	681b      	ldr	r3, [r3, #0]
 8082c30:	a802      	add	r0, sp, #8
 8082c32:	4419      	add	r1, r3
 8082c34:	4b0c      	ldr	r3, [pc, #48]	; (8082c68 <_ZN9TimeClass7timeStrEl+0x40>)
 8082c36:	681b      	ldr	r3, [r3, #0]
 8082c38:	4419      	add	r1, r3
 8082c3a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8082c3e:	f001 fbfd 	bl	808443c <localtime>
        char* ascstr = asctime(calendar_time);
 8082c42:	f001 fbad 	bl	80843a0 <asctime>
 8082c46:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8082c48:	f001 fd59 	bl	80846fe <strlen>
        ascstr[len-1] = 0; // remove final newline
 8082c4c:	2300      	movs	r3, #0
 8082c4e:	4428      	add	r0, r5
 8082c50:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8082c54:	4629      	mov	r1, r5
 8082c56:	4620      	mov	r0, r4
 8082c58:	f7ff ff06 	bl	8082a68 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8082c5c:	4620      	mov	r0, r4
 8082c5e:	b003      	add	sp, #12
 8082c60:	bd30      	pop	{r4, r5, pc}
 8082c62:	bf00      	nop
 8082c64:	200006b4 	.word	0x200006b4
 8082c68:	200006ac 	.word	0x200006ac

08082c6c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8082c6c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8082c6e:	2000      	movs	r0, #0
 8082c70:	f7fe fbf0 	bl	8081454 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8082c74:	4604      	mov	r4, r0
 8082c76:	b968      	cbnz	r0, 8082c94 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082c78:	f7fe fd1c 	bl	80816b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082c7c:	2801      	cmp	r0, #1
 8082c7e:	d10b      	bne.n	8082c98 <_ZN9TimeClass7isValidEv+0x2c>
 8082c80:	4620      	mov	r0, r4
 8082c82:	f7fe fd4f 	bl	8081724 <system_thread_get_state>
 8082c86:	b938      	cbnz	r0, 8082c98 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8082c88:	f7ff ffa4 	bl	8082bd4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082c8c:	b930      	cbnz	r0, 8082c9c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8082c8e:	f7fe fd75 	bl	808177c <spark_process>
 8082c92:	e7f9      	b.n	8082c88 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8082c94:	2001      	movs	r0, #1
 8082c96:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8082c98:	2000      	movs	r0, #0
 8082c9a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8082c9c:	f7ff ff9a 	bl	8082bd4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8082ca0:	2000      	movs	r0, #0
 8082ca2:	f7fe fbd7 	bl	8081454 <HAL_RTC_Time_Is_Valid>
 8082ca6:	3000      	adds	r0, #0
 8082ca8:	bf18      	it	ne
 8082caa:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8082cac:	bd10      	pop	{r4, pc}

08082cae <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8082cae:	b508      	push	{r3, lr}
    (void)isValid();
 8082cb0:	f7ff ffdc 	bl	8082c6c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8082cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082cb8:	f7fe bba4 	b.w	8081404 <HAL_RTC_Get_UnixTime>

08082cbc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8082cbc:	b508      	push	{r3, lr}
	return hour(now());
 8082cbe:	f7ff fff6 	bl	8082cae <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082cc2:	f7ff ff55 	bl	8082b70 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8082cc6:	4b01      	ldr	r3, [pc, #4]	; (8082ccc <_ZN9TimeClass4hourEv+0x10>)
 8082cc8:	6898      	ldr	r0, [r3, #8]
 8082cca:	bd08      	pop	{r3, pc}
 8082ccc:	20000684 	.word	0x20000684

08082cd0 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8082cd0:	b508      	push	{r3, lr}
	return minute(now());
 8082cd2:	f7ff ffec 	bl	8082cae <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082cd6:	f7ff ff4b 	bl	8082b70 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8082cda:	4b01      	ldr	r3, [pc, #4]	; (8082ce0 <_ZN9TimeClass6minuteEv+0x10>)
 8082cdc:	6858      	ldr	r0, [r3, #4]
 8082cde:	bd08      	pop	{r3, pc}
 8082ce0:	20000684 	.word	0x20000684

08082ce4 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8082ce4:	b508      	push	{r3, lr}
	return day(now());
 8082ce6:	f7ff ffe2 	bl	8082cae <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082cea:	f7ff ff41 	bl	8082b70 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8082cee:	4b01      	ldr	r3, [pc, #4]	; (8082cf4 <_ZN9TimeClass3dayEv+0x10>)
 8082cf0:	68d8      	ldr	r0, [r3, #12]
 8082cf2:	bd08      	pop	{r3, pc}
 8082cf4:	20000684 	.word	0x20000684

08082cf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082cf8:	4b02      	ldr	r3, [pc, #8]	; (8082d04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082cfa:	681a      	ldr	r2, [r3, #0]
 8082cfc:	4b02      	ldr	r3, [pc, #8]	; (8082d08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082cfe:	601a      	str	r2, [r3, #0]
 8082d00:	4770      	bx	lr
 8082d02:	bf00      	nop
 8082d04:	20000438 	.word	0x20000438
 8082d08:	200006a8 	.word	0x200006a8

08082d0c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082d0c:	4770      	bx	lr

08082d0e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082d0e:	7441      	strb	r1, [r0, #17]
 8082d10:	4770      	bx	lr

08082d12 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8082d12:	7c00      	ldrb	r0, [r0, #16]
 8082d14:	f7fe bc96 	b.w	8081644 <HAL_USART_Available_Data_For_Write>

08082d18 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8082d18:	7c00      	ldrb	r0, [r0, #16]
 8082d1a:	f7fe bc6b 	b.w	80815f4 <HAL_USART_Available_Data>

08082d1e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8082d1e:	7c00      	ldrb	r0, [r0, #16]
 8082d20:	f7fe bc78 	b.w	8081614 <HAL_USART_Peek_Data>

08082d24 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8082d24:	7c00      	ldrb	r0, [r0, #16]
 8082d26:	f7fe bc6d 	b.w	8081604 <HAL_USART_Read_Data>

08082d2a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082d2a:	7c00      	ldrb	r0, [r0, #16]
 8082d2c:	f7fe bc7a 	b.w	8081624 <HAL_USART_Flush_Data>

08082d30 <_ZN11USARTSerialD0Ev>:
 8082d30:	b510      	push	{r4, lr}
 8082d32:	4604      	mov	r4, r0
 8082d34:	f7fd f9b3 	bl	808009e <_ZdlPv>
 8082d38:	4620      	mov	r0, r4
 8082d3a:	bd10      	pop	{r4, pc}

08082d3c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082d3c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082d3e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8082d40:	4604      	mov	r4, r0
 8082d42:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082d44:	b925      	cbnz	r5, 8082d50 <_ZN11USARTSerial5writeEh+0x14>
 8082d46:	7c00      	ldrb	r0, [r0, #16]
 8082d48:	f7fe fc7c 	bl	8081644 <HAL_USART_Available_Data_For_Write>
 8082d4c:	2800      	cmp	r0, #0
 8082d4e:	dd05      	ble.n	8082d5c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082d50:	4631      	mov	r1, r6
 8082d52:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8082d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082d58:	f7fe bc44 	b.w	80815e4 <HAL_USART_Write_Data>
  }
  return 0;
}
 8082d5c:	4628      	mov	r0, r5
 8082d5e:	bd70      	pop	{r4, r5, r6, pc}

08082d60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082d60:	b510      	push	{r4, lr}
 8082d62:	4604      	mov	r4, r0
 8082d64:	4608      	mov	r0, r1
 8082d66:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082d68:	2200      	movs	r2, #0
 8082d6a:	6062      	str	r2, [r4, #4]
 8082d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082d70:	60a2      	str	r2, [r4, #8]
 8082d72:	4a05      	ldr	r2, [pc, #20]	; (8082d88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8082d74:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082d76:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8082d78:	2201      	movs	r2, #1
 8082d7a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8082d7c:	461a      	mov	r2, r3
 8082d7e:	f7fe fc29 	bl	80815d4 <HAL_USART_Init>
}
 8082d82:	4620      	mov	r0, r4
 8082d84:	bd10      	pop	{r4, pc}
 8082d86:	bf00      	nop
 8082d88:	08085528 	.word	0x08085528

08082d8c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8082d8c:	7c00      	ldrb	r0, [r0, #16]
 8082d8e:	f7fe bc51 	b.w	8081634 <HAL_USART_Is_Enabled>
	...

08082d94 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8082d94:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082d96:	4d0c      	ldr	r5, [pc, #48]	; (8082dc8 <_Z22__fetch_global_Serial1v+0x34>)
 8082d98:	6829      	ldr	r1, [r5, #0]
 8082d9a:	f011 0401 	ands.w	r4, r1, #1
 8082d9e:	d111      	bne.n	8082dc4 <_Z22__fetch_global_Serial1v+0x30>
 8082da0:	4628      	mov	r0, r5
 8082da2:	f7fd f97e 	bl	80800a2 <__cxa_guard_acquire>
 8082da6:	b168      	cbz	r0, 8082dc4 <_Z22__fetch_global_Serial1v+0x30>
 8082da8:	4a08      	ldr	r2, [pc, #32]	; (8082dcc <_Z22__fetch_global_Serial1v+0x38>)
 8082daa:	4621      	mov	r1, r4
 8082dac:	4b08      	ldr	r3, [pc, #32]	; (8082dd0 <_Z22__fetch_global_Serial1v+0x3c>)
 8082dae:	4809      	ldr	r0, [pc, #36]	; (8082dd4 <_Z22__fetch_global_Serial1v+0x40>)
 8082db0:	f7ff ffd6 	bl	8082d60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8082db4:	4628      	mov	r0, r5
 8082db6:	f7fd f979 	bl	80800ac <__cxa_guard_release>
 8082dba:	4a07      	ldr	r2, [pc, #28]	; (8082dd8 <_Z22__fetch_global_Serial1v+0x44>)
 8082dbc:	4907      	ldr	r1, [pc, #28]	; (8082ddc <_Z22__fetch_global_Serial1v+0x48>)
 8082dbe:	4805      	ldr	r0, [pc, #20]	; (8082dd4 <_Z22__fetch_global_Serial1v+0x40>)
 8082dc0:	f000 fa8a 	bl	80832d8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082dc4:	4803      	ldr	r0, [pc, #12]	; (8082dd4 <_Z22__fetch_global_Serial1v+0x40>)
 8082dc6:	bd38      	pop	{r3, r4, r5, pc}
 8082dc8:	20000750 	.word	0x20000750
 8082dcc:	20000754 	.word	0x20000754
 8082dd0:	200006cc 	.word	0x200006cc
 8082dd4:	200006b8 	.word	0x200006b8
 8082dd8:	200004f0 	.word	0x200004f0
 8082ddc:	08082d0d 	.word	0x08082d0d

08082de0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082de0:	7441      	strb	r1, [r0, #17]
 8082de2:	4770      	bx	lr

08082de4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082de4:	4770      	bx	lr

08082de6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8082de6:	2100      	movs	r1, #0
 8082de8:	7c00      	ldrb	r0, [r0, #16]
 8082dea:	f7fe bc4b 	b.w	8081684 <HAL_USB_USART_Receive_Data>

08082dee <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8082dee:	2101      	movs	r1, #1
 8082df0:	7c00      	ldrb	r0, [r0, #16]
 8082df2:	f7fe bc47 	b.w	8081684 <HAL_USB_USART_Receive_Data>

08082df6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8082df6:	7c00      	ldrb	r0, [r0, #16]
 8082df8:	f7fe bc3c 	b.w	8081674 <HAL_USB_USART_Available_Data_For_Write>

08082dfc <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8082dfc:	7c00      	ldrb	r0, [r0, #16]
 8082dfe:	f7fe bc31 	b.w	8081664 <HAL_USB_USART_Available_Data>

08082e02 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8082e02:	b538      	push	{r3, r4, r5, lr}
 8082e04:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082e06:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8082e08:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082e0a:	f7fe fc33 	bl	8081674 <HAL_USB_USART_Available_Data_For_Write>
 8082e0e:	2800      	cmp	r0, #0
 8082e10:	dc01      	bgt.n	8082e16 <_ZN9USBSerial5writeEh+0x14>
 8082e12:	7c60      	ldrb	r0, [r4, #17]
 8082e14:	b120      	cbz	r0, 8082e20 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8082e16:	4629      	mov	r1, r5
 8082e18:	7c20      	ldrb	r0, [r4, #16]
 8082e1a:	f7fe fc3b 	bl	8081694 <HAL_USB_USART_Send_Data>
    return 1;
 8082e1e:	2001      	movs	r0, #1
  }
  return 0;
}
 8082e20:	bd38      	pop	{r3, r4, r5, pc}

08082e22 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8082e22:	7c00      	ldrb	r0, [r0, #16]
 8082e24:	f7fe bc3e 	b.w	80816a4 <HAL_USB_USART_Flush_Data>

08082e28 <_ZN9USBSerialD0Ev>:
 8082e28:	b510      	push	{r4, lr}
 8082e2a:	4604      	mov	r4, r0
 8082e2c:	f7fd f937 	bl	808009e <_ZdlPv>
 8082e30:	4620      	mov	r0, r4
 8082e32:	bd10      	pop	{r4, pc}

08082e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082e34:	b510      	push	{r4, lr}
 8082e36:	4604      	mov	r4, r0
 8082e38:	2300      	movs	r3, #0
 8082e3a:	6063      	str	r3, [r4, #4]
 8082e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082e40:	60a3      	str	r3, [r4, #8]
 8082e42:	4b05      	ldr	r3, [pc, #20]	; (8082e58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8082e44:	4608      	mov	r0, r1
 8082e46:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8082e48:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8082e4a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8082e4c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8082e4e:	4611      	mov	r1, r2
 8082e50:	f7fe fc00 	bl	8081654 <HAL_USB_USART_Init>
}
 8082e54:	4620      	mov	r0, r4
 8082e56:	bd10      	pop	{r4, pc}
 8082e58:	08085558 	.word	0x08085558

08082e5c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8082e5c:	b510      	push	{r4, lr}
 8082e5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082e60:	2214      	movs	r2, #20
 8082e62:	2100      	movs	r1, #0
 8082e64:	f001 fbed 	bl	8084642 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082e68:	4b05      	ldr	r3, [pc, #20]	; (8082e80 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082e6a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082e6c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082e6e:	4b05      	ldr	r3, [pc, #20]	; (8082e84 <_Z19acquireSerialBufferv+0x28>)
 8082e70:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082e72:	f240 1301 	movw	r3, #257	; 0x101
 8082e76:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082e78:	2381      	movs	r3, #129	; 0x81
 8082e7a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082e7c:	bd10      	pop	{r4, pc}
 8082e7e:	bf00      	nop
 8082e80:	2000085d 	.word	0x2000085d
 8082e84:	200007dc 	.word	0x200007dc

08082e88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8082e88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082e8a:	4d0e      	ldr	r5, [pc, #56]	; (8082ec4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082e8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082e8e:	a801      	add	r0, sp, #4
 8082e90:	f7ff ffe4 	bl	8082e5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082e94:	6829      	ldr	r1, [r5, #0]
 8082e96:	f011 0401 	ands.w	r4, r1, #1
 8082e9a:	d110      	bne.n	8082ebe <_Z16_fetch_usbserialv+0x36>
 8082e9c:	4628      	mov	r0, r5
 8082e9e:	f7fd f900 	bl	80800a2 <__cxa_guard_acquire>
 8082ea2:	b160      	cbz	r0, 8082ebe <_Z16_fetch_usbserialv+0x36>
 8082ea4:	aa01      	add	r2, sp, #4
 8082ea6:	4621      	mov	r1, r4
 8082ea8:	4807      	ldr	r0, [pc, #28]	; (8082ec8 <_Z16_fetch_usbserialv+0x40>)
 8082eaa:	f7ff ffc3 	bl	8082e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082eae:	4628      	mov	r0, r5
 8082eb0:	f7fd f8fc 	bl	80800ac <__cxa_guard_release>
 8082eb4:	4a05      	ldr	r2, [pc, #20]	; (8082ecc <_Z16_fetch_usbserialv+0x44>)
 8082eb6:	4906      	ldr	r1, [pc, #24]	; (8082ed0 <_Z16_fetch_usbserialv+0x48>)
 8082eb8:	4803      	ldr	r0, [pc, #12]	; (8082ec8 <_Z16_fetch_usbserialv+0x40>)
 8082eba:	f000 fa0d 	bl	80832d8 <__aeabi_atexit>
	return _usbserial;
}
 8082ebe:	4802      	ldr	r0, [pc, #8]	; (8082ec8 <_Z16_fetch_usbserialv+0x40>)
 8082ec0:	b007      	add	sp, #28
 8082ec2:	bd30      	pop	{r4, r5, pc}
 8082ec4:	200007d8 	.word	0x200007d8
 8082ec8:	20000960 	.word	0x20000960
 8082ecc:	200004f0 	.word	0x200004f0
 8082ed0:	08082de5 	.word	0x08082de5

08082ed4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082ed4:	b510      	push	{r4, lr}
 8082ed6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082ed8:	2214      	movs	r2, #20
 8082eda:	2100      	movs	r1, #0
 8082edc:	f001 fbb1 	bl	8084642 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082ee0:	4b05      	ldr	r3, [pc, #20]	; (8082ef8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082ee2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082ee4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082ee6:	4b05      	ldr	r3, [pc, #20]	; (8082efc <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082ee8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082eea:	f240 1301 	movw	r3, #257	; 0x101
 8082eee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082ef0:	2381      	movs	r3, #129	; 0x81
 8082ef2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082ef4:	bd10      	pop	{r4, pc}
 8082ef6:	bf00      	nop
 8082ef8:	20000a10 	.word	0x20000a10
 8082efc:	20000978 	.word	0x20000978

08082f00 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082f00:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082f02:	4c0e      	ldr	r4, [pc, #56]	; (8082f3c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082f04:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082f06:	a801      	add	r0, sp, #4
 8082f08:	f7ff ffe4 	bl	8082ed4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082f0c:	6823      	ldr	r3, [r4, #0]
 8082f0e:	07db      	lsls	r3, r3, #31
 8082f10:	d410      	bmi.n	8082f34 <_Z17_fetch_usbserial1v+0x34>
 8082f12:	4620      	mov	r0, r4
 8082f14:	f7fd f8c5 	bl	80800a2 <__cxa_guard_acquire>
 8082f18:	b160      	cbz	r0, 8082f34 <_Z17_fetch_usbserial1v+0x34>
 8082f1a:	aa01      	add	r2, sp, #4
 8082f1c:	2101      	movs	r1, #1
 8082f1e:	4808      	ldr	r0, [pc, #32]	; (8082f40 <_Z17_fetch_usbserial1v+0x40>)
 8082f20:	f7ff ff88 	bl	8082e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082f24:	4620      	mov	r0, r4
 8082f26:	f7fd f8c1 	bl	80800ac <__cxa_guard_release>
 8082f2a:	4a06      	ldr	r2, [pc, #24]	; (8082f44 <_Z17_fetch_usbserial1v+0x44>)
 8082f2c:	4906      	ldr	r1, [pc, #24]	; (8082f48 <_Z17_fetch_usbserial1v+0x48>)
 8082f2e:	4804      	ldr	r0, [pc, #16]	; (8082f40 <_Z17_fetch_usbserial1v+0x40>)
 8082f30:	f000 f9d2 	bl	80832d8 <__aeabi_atexit>
  return _usbserial1;
}
 8082f34:	4802      	ldr	r0, [pc, #8]	; (8082f40 <_Z17_fetch_usbserial1v+0x40>)
 8082f36:	b006      	add	sp, #24
 8082f38:	bd10      	pop	{r4, pc}
 8082f3a:	bf00      	nop
 8082f3c:	20000974 	.word	0x20000974
 8082f40:	200009fc 	.word	0x200009fc
 8082f44:	200004f0 	.word	0x200004f0
 8082f48:	08082de5 	.word	0x08082de5

08082f4c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8082f4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082f4e:	4b18      	ldr	r3, [pc, #96]	; (8082fb0 <serialEventRun+0x64>)
 8082f50:	b133      	cbz	r3, 8082f60 <serialEventRun+0x14>
 8082f52:	f7ff ff99 	bl	8082e88 <_Z16_fetch_usbserialv>
 8082f56:	6803      	ldr	r3, [r0, #0]
 8082f58:	691b      	ldr	r3, [r3, #16]
 8082f5a:	4798      	blx	r3
 8082f5c:	2800      	cmp	r0, #0
 8082f5e:	dc1e      	bgt.n	8082f9e <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8082f60:	4b14      	ldr	r3, [pc, #80]	; (8082fb4 <serialEventRun+0x68>)
 8082f62:	b133      	cbz	r3, 8082f72 <serialEventRun+0x26>
 8082f64:	f7ff ff16 	bl	8082d94 <_Z22__fetch_global_Serial1v>
 8082f68:	6803      	ldr	r3, [r0, #0]
 8082f6a:	691b      	ldr	r3, [r3, #16]
 8082f6c:	4798      	blx	r3
 8082f6e:	2800      	cmp	r0, #0
 8082f70:	dc18      	bgt.n	8082fa4 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8082f72:	4b11      	ldr	r3, [pc, #68]	; (8082fb8 <serialEventRun+0x6c>)
 8082f74:	b10b      	cbz	r3, 8082f7a <serialEventRun+0x2e>
 8082f76:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8082f7a:	4b10      	ldr	r3, [pc, #64]	; (8082fbc <serialEventRun+0x70>)
 8082f7c:	b10b      	cbz	r3, 8082f82 <serialEventRun+0x36>
 8082f7e:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8082f82:	4b0f      	ldr	r3, [pc, #60]	; (8082fc0 <serialEventRun+0x74>)
 8082f84:	b10b      	cbz	r3, 8082f8a <serialEventRun+0x3e>
 8082f86:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082f8a:	4b0e      	ldr	r3, [pc, #56]	; (8082fc4 <serialEventRun+0x78>)
 8082f8c:	b17b      	cbz	r3, 8082fae <serialEventRun+0x62>
 8082f8e:	f7ff ffb7 	bl	8082f00 <_Z17_fetch_usbserial1v>
 8082f92:	6803      	ldr	r3, [r0, #0]
 8082f94:	691b      	ldr	r3, [r3, #16]
 8082f96:	4798      	blx	r3
 8082f98:	2800      	cmp	r0, #0
 8082f9a:	dc06      	bgt.n	8082faa <serialEventRun+0x5e>
 8082f9c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8082f9e:	f3af 8000 	nop.w
 8082fa2:	e7dd      	b.n	8082f60 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8082fa4:	f3af 8000 	nop.w
 8082fa8:	e7e3      	b.n	8082f72 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8082faa:	f3af 8000 	nop.w
 8082fae:	bd08      	pop	{r3, pc}
	...

08082fc8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8082fc8:	b508      	push	{r3, lr}
	serialEventRun();
 8082fca:	f7ff ffbf 	bl	8082f4c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082fce:	f7fe fa11 	bl	80813f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082fd2:	4b01      	ldr	r3, [pc, #4]	; (8082fd8 <_post_loop+0x10>)
 8082fd4:	6018      	str	r0, [r3, #0]
 8082fd6:	bd08      	pop	{r3, pc}
 8082fd8:	20000b1c 	.word	0x20000b1c

08082fdc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082fdc:	4802      	ldr	r0, [pc, #8]	; (8082fe8 <_Z33system_initialize_user_backup_ramv+0xc>)
 8082fde:	4a03      	ldr	r2, [pc, #12]	; (8082fec <_Z33system_initialize_user_backup_ramv+0x10>)
 8082fe0:	4903      	ldr	r1, [pc, #12]	; (8082ff0 <_Z33system_initialize_user_backup_ramv+0x14>)
 8082fe2:	1a12      	subs	r2, r2, r0
 8082fe4:	f001 bb22 	b.w	808462c <memcpy>
 8082fe8:	40024000 	.word	0x40024000
 8082fec:	40024004 	.word	0x40024004
 8082ff0:	08085820 	.word	0x08085820

08082ff4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082ff4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082ff6:	2300      	movs	r3, #0
 8082ff8:	9300      	str	r3, [sp, #0]
 8082ffa:	461a      	mov	r2, r3
 8082ffc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083000:	f7fe fba2 	bl	8081748 <system_ctrl_set_result>
}
 8083004:	b003      	add	sp, #12
 8083006:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808300c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 808300c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808300e:	8843      	ldrh	r3, [r0, #2]
 8083010:	2b0a      	cmp	r3, #10
 8083012:	d008      	beq.n	8083026 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8083014:	2b50      	cmp	r3, #80	; 0x50
 8083016:	d109      	bne.n	808302c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8083018:	4b09      	ldr	r3, [pc, #36]	; (8083040 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808301a:	681b      	ldr	r3, [r3, #0]
 808301c:	b13b      	cbz	r3, 808302e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808301e:	b003      	add	sp, #12
 8083020:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8083024:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8083026:	f7ff ffe5 	bl	8082ff4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808302a:	e006      	b.n	808303a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808302c:	2300      	movs	r3, #0
 808302e:	9300      	str	r3, [sp, #0]
 8083030:	461a      	mov	r2, r3
 8083032:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083036:	f7fe fb87 	bl	8081748 <system_ctrl_set_result>
        break;
    }
}
 808303a:	b003      	add	sp, #12
 808303c:	f85d fb04 	ldr.w	pc, [sp], #4
 8083040:	20000b14 	.word	0x20000b14

08083044 <module_user_init_hook>:

void module_user_init_hook()
{
 8083044:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8083046:	4c10      	ldr	r4, [pc, #64]	; (8083088 <module_user_init_hook+0x44>)
 8083048:	4d10      	ldr	r5, [pc, #64]	; (808308c <module_user_init_hook+0x48>)
 808304a:	6823      	ldr	r3, [r4, #0]
 808304c:	42ab      	cmp	r3, r5
 808304e:	4b10      	ldr	r3, [pc, #64]	; (8083090 <module_user_init_hook+0x4c>)
 8083050:	bf0c      	ite	eq
 8083052:	2201      	moveq	r2, #1
 8083054:	2200      	movne	r2, #0
 8083056:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8083058:	d002      	beq.n	8083060 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808305a:	f7ff ffbf 	bl	8082fdc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808305e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8083060:	f7fe f9c0 	bl	80813e4 <HAL_RNG_GetRandomNumber>
 8083064:	4604      	mov	r4, r0
    srand(seed);
 8083066:	f001 faf5 	bl	8084654 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808306a:	4b0a      	ldr	r3, [pc, #40]	; (8083094 <module_user_init_hook+0x50>)
 808306c:	b113      	cbz	r3, 8083074 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808306e:	4620      	mov	r0, r4
 8083070:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8083074:	2100      	movs	r1, #0
 8083076:	4807      	ldr	r0, [pc, #28]	; (8083094 <module_user_init_hook+0x50>)
 8083078:	f7fe fbc0 	bl	80817fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808307c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8083080:	2100      	movs	r1, #0
 8083082:	4805      	ldr	r0, [pc, #20]	; (8083098 <module_user_init_hook+0x54>)
 8083084:	f7fe bb56 	b.w	8081734 <system_ctrl_set_app_request_handler>
 8083088:	40024000 	.word	0x40024000
 808308c:	9a271c1e 	.word	0x9a271c1e
 8083090:	20000b18 	.word	0x20000b18
 8083094:	00000000 	.word	0x00000000
 8083098:	0808300d 	.word	0x0808300d

0808309c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808309c:	b510      	push	{r4, lr}
 808309e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80830a0:	480f      	ldr	r0, [pc, #60]	; (80830e0 <pinAvailable+0x44>)
 80830a2:	f7ff fc97 	bl	80829d4 <_ZN8SPIClass9isEnabledEv>
 80830a6:	b128      	cbz	r0, 80830b4 <pinAvailable+0x18>
 80830a8:	f1a4 030d 	sub.w	r3, r4, #13
 80830ac:	2b02      	cmp	r3, #2
 80830ae:	d801      	bhi.n	80830b4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80830b0:	2000      	movs	r0, #0
 80830b2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80830b4:	f000 f88a 	bl	80831cc <_Z19__fetch_global_Wirev>
 80830b8:	f7ff f922 	bl	8082300 <_ZN7TwoWire9isEnabledEv>
 80830bc:	b108      	cbz	r0, 80830c2 <pinAvailable+0x26>
 80830be:	2c01      	cmp	r4, #1
 80830c0:	d9f6      	bls.n	80830b0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80830c2:	f7ff fe67 	bl	8082d94 <_Z22__fetch_global_Serial1v>
 80830c6:	f7ff fe61 	bl	8082d8c <_ZN11USARTSerial9isEnabledEv>
 80830ca:	b118      	cbz	r0, 80830d4 <pinAvailable+0x38>
 80830cc:	f1a4 0312 	sub.w	r3, r4, #18
 80830d0:	2b01      	cmp	r3, #1
 80830d2:	d9ed      	bls.n	80830b0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80830d4:	2c2e      	cmp	r4, #46	; 0x2e
 80830d6:	bf8c      	ite	hi
 80830d8:	2000      	movhi	r0, #0
 80830da:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80830dc:	bd10      	pop	{r4, pc}
 80830de:	bf00      	nop
 80830e0:	20000b60 	.word	0x20000b60

080830e4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80830e4:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80830e6:	b538      	push	{r3, r4, r5, lr}
 80830e8:	4604      	mov	r4, r0
 80830ea:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80830ec:	d80a      	bhi.n	8083104 <pinMode+0x20>
 80830ee:	29ff      	cmp	r1, #255	; 0xff
 80830f0:	d008      	beq.n	8083104 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80830f2:	f7ff ffd3 	bl	808309c <pinAvailable>
 80830f6:	b128      	cbz	r0, 8083104 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80830f8:	4629      	mov	r1, r5
 80830fa:	4620      	mov	r0, r4
}
 80830fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083100:	f7fe b9c0 	b.w	8081484 <HAL_Pin_Mode>
 8083104:	bd38      	pop	{r3, r4, r5, pc}

08083106 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083106:	b538      	push	{r3, r4, r5, lr}
 8083108:	4604      	mov	r4, r0
 808310a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808310c:	f7fe f9c2 	bl	8081494 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083110:	28ff      	cmp	r0, #255	; 0xff
 8083112:	d010      	beq.n	8083136 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083114:	2806      	cmp	r0, #6
 8083116:	d804      	bhi.n	8083122 <digitalWrite+0x1c>
 8083118:	234d      	movs	r3, #77	; 0x4d
 808311a:	fa23 f000 	lsr.w	r0, r3, r0
 808311e:	07c3      	lsls	r3, r0, #31
 8083120:	d409      	bmi.n	8083136 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083122:	4620      	mov	r0, r4
 8083124:	f7ff ffba 	bl	808309c <pinAvailable>
 8083128:	b128      	cbz	r0, 8083136 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808312a:	4629      	mov	r1, r5
 808312c:	4620      	mov	r0, r4
}
 808312e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083132:	f7fe b9b7 	b.w	80814a4 <HAL_GPIO_Write>
 8083136:	bd38      	pop	{r3, r4, r5, pc}

08083138 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8083138:	b510      	push	{r4, lr}
 808313a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808313c:	f7fe f9aa 	bl	8081494 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8083140:	3804      	subs	r0, #4
 8083142:	b2c0      	uxtb	r0, r0
 8083144:	2801      	cmp	r0, #1
 8083146:	d908      	bls.n	808315a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8083148:	4620      	mov	r0, r4
 808314a:	f7ff ffa7 	bl	808309c <pinAvailable>
 808314e:	b120      	cbz	r0, 808315a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083150:	4620      	mov	r0, r4
}
 8083152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083156:	f7fe b9ad 	b.w	80814b4 <HAL_GPIO_Read>
}
 808315a:	2000      	movs	r0, #0
 808315c:	bd10      	pop	{r4, pc}

0808315e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 808315e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083162:	4690      	mov	r8, r2
 8083164:	461e      	mov	r6, r3
 8083166:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 8083168:	460d      	mov	r5, r1
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 808316a:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
 808316c:	f1b8 0f00 	cmp.w	r8, #0
 8083170:	d104      	bne.n	808317c <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 8083172:	f1c4 0107 	rsb	r1, r4, #7
 8083176:	fa46 f101 	asr.w	r1, r6, r1
 808317a:	e001      	b.n	8083180 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 808317c:	fa46 f104 	asr.w	r1, r6, r4
 8083180:	f001 0101 	and.w	r1, r1, #1
 8083184:	4638      	mov	r0, r7
 8083186:	f7ff ffbe 	bl	8083106 <digitalWrite>

    digitalWrite(clockPin, HIGH);
 808318a:	2101      	movs	r1, #1
 808318c:	4628      	mov	r0, r5
 808318e:	f7ff ffba 	bl	8083106 <digitalWrite>
    digitalWrite(clockPin, LOW);
 8083192:	2100      	movs	r1, #0
 8083194:	4628      	mov	r0, r5
 8083196:	f7ff ffb6 	bl	8083106 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 808319a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 808319e:	d2e5      	bcs.n	808316c <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 80831a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080831a4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80831a4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80831a6:	4c07      	ldr	r4, [pc, #28]	; (80831c4 <_Z21__fetch_global_EEPROMv+0x20>)
 80831a8:	6823      	ldr	r3, [r4, #0]
 80831aa:	07db      	lsls	r3, r3, #31
 80831ac:	d408      	bmi.n	80831c0 <_Z21__fetch_global_EEPROMv+0x1c>
 80831ae:	4620      	mov	r0, r4
 80831b0:	f7fc ff77 	bl	80800a2 <__cxa_guard_acquire>
 80831b4:	b120      	cbz	r0, 80831c0 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80831b6:	f7fe f92d 	bl	8081414 <HAL_EEPROM_Init>
 80831ba:	4620      	mov	r0, r4
 80831bc:	f7fc ff76 	bl	80800ac <__cxa_guard_release>
	return eeprom;
}
 80831c0:	4801      	ldr	r0, [pc, #4]	; (80831c8 <_Z21__fetch_global_EEPROMv+0x24>)
 80831c2:	bd10      	pop	{r4, pc}
 80831c4:	20000b20 	.word	0x20000b20
 80831c8:	20000b24 	.word	0x20000b24

080831cc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80831cc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80831ce:	4d0b      	ldr	r5, [pc, #44]	; (80831fc <_Z19__fetch_global_Wirev+0x30>)
 80831d0:	6829      	ldr	r1, [r5, #0]
 80831d2:	f011 0401 	ands.w	r4, r1, #1
 80831d6:	d10f      	bne.n	80831f8 <_Z19__fetch_global_Wirev+0x2c>
 80831d8:	4628      	mov	r0, r5
 80831da:	f7fc ff62 	bl	80800a2 <__cxa_guard_acquire>
 80831de:	b158      	cbz	r0, 80831f8 <_Z19__fetch_global_Wirev+0x2c>
 80831e0:	4621      	mov	r1, r4
 80831e2:	4807      	ldr	r0, [pc, #28]	; (8083200 <_Z19__fetch_global_Wirev+0x34>)
 80831e4:	f7ff f858 	bl	8082298 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80831e8:	4628      	mov	r0, r5
 80831ea:	f7fc ff5f 	bl	80800ac <__cxa_guard_release>
 80831ee:	4a05      	ldr	r2, [pc, #20]	; (8083204 <_Z19__fetch_global_Wirev+0x38>)
 80831f0:	4905      	ldr	r1, [pc, #20]	; (8083208 <_Z19__fetch_global_Wirev+0x3c>)
 80831f2:	4803      	ldr	r0, [pc, #12]	; (8083200 <_Z19__fetch_global_Wirev+0x34>)
 80831f4:	f000 f870 	bl	80832d8 <__aeabi_atexit>
	return wire;
}
 80831f8:	4801      	ldr	r0, [pc, #4]	; (8083200 <_Z19__fetch_global_Wirev+0x34>)
 80831fa:	bd38      	pop	{r3, r4, r5, pc}
 80831fc:	20000b28 	.word	0x20000b28
 8083200:	20000b40 	.word	0x20000b40
 8083204:	200004f0 	.word	0x200004f0
 8083208:	08082241 	.word	0x08082241

0808320c <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808320c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808320e:	4c0b      	ldr	r4, [pc, #44]	; (808323c <_Z20__fetch_global_Wire3v+0x30>)
 8083210:	6823      	ldr	r3, [r4, #0]
 8083212:	07db      	lsls	r3, r3, #31
 8083214:	d40f      	bmi.n	8083236 <_Z20__fetch_global_Wire3v+0x2a>
 8083216:	4620      	mov	r0, r4
 8083218:	f7fc ff43 	bl	80800a2 <__cxa_guard_acquire>
 808321c:	b158      	cbz	r0, 8083236 <_Z20__fetch_global_Wire3v+0x2a>
 808321e:	2102      	movs	r1, #2
 8083220:	4807      	ldr	r0, [pc, #28]	; (8083240 <_Z20__fetch_global_Wire3v+0x34>)
 8083222:	f7ff f839 	bl	8082298 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8083226:	4620      	mov	r0, r4
 8083228:	f7fc ff40 	bl	80800ac <__cxa_guard_release>
 808322c:	4a05      	ldr	r2, [pc, #20]	; (8083244 <_Z20__fetch_global_Wire3v+0x38>)
 808322e:	4906      	ldr	r1, [pc, #24]	; (8083248 <_Z20__fetch_global_Wire3v+0x3c>)
 8083230:	4803      	ldr	r0, [pc, #12]	; (8083240 <_Z20__fetch_global_Wire3v+0x34>)
 8083232:	f000 f851 	bl	80832d8 <__aeabi_atexit>
	return wire;
}
 8083236:	4802      	ldr	r0, [pc, #8]	; (8083240 <_Z20__fetch_global_Wire3v+0x34>)
 8083238:	bd10      	pop	{r4, pc}
 808323a:	bf00      	nop
 808323c:	20000b54 	.word	0x20000b54
 8083240:	20000b2c 	.word	0x20000b2c
 8083244:	200004f0 	.word	0x200004f0
 8083248:	08082241 	.word	0x08082241

0808324c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808324c:	b513      	push	{r0, r1, r4, lr}
 808324e:	4c08      	ldr	r4, [pc, #32]	; (8083270 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8083250:	2300      	movs	r3, #0
 8083252:	461a      	mov	r2, r3
 8083254:	4619      	mov	r1, r3
 8083256:	9300      	str	r3, [sp, #0]
 8083258:	4620      	mov	r0, r4
 808325a:	f7ff f8d5 	bl	8082408 <_ZN9IPAddressC1Ehhhh>
 808325e:	4620      	mov	r0, r4
 8083260:	4a04      	ldr	r2, [pc, #16]	; (8083274 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8083262:	4905      	ldr	r1, [pc, #20]	; (8083278 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8083264:	b002      	add	sp, #8
 8083266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808326a:	f000 b835 	b.w	80832d8 <__aeabi_atexit>
 808326e:	bf00      	nop
 8083270:	20000b58 	.word	0x20000b58
 8083274:	200004f0 	.word	0x200004f0
 8083278:	08082385 	.word	0x08082385

0808327c <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808327c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808327e:	4e11      	ldr	r6, [pc, #68]	; (80832c4 <_GLOBAL__sub_I_SPI+0x48>)
 8083280:	4d11      	ldr	r5, [pc, #68]	; (80832c8 <_GLOBAL__sub_I_SPI+0x4c>)
 8083282:	4c12      	ldr	r4, [pc, #72]	; (80832cc <_GLOBAL__sub_I_SPI+0x50>)
 8083284:	2100      	movs	r1, #0
 8083286:	4630      	mov	r0, r6
 8083288:	f7ff fb90 	bl	80829ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808328c:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808328e:	4e10      	ldr	r6, [pc, #64]	; (80832d0 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8083290:	462a      	mov	r2, r5
 8083292:	4621      	mov	r1, r4
 8083294:	f000 f820 	bl	80832d8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083298:	2101      	movs	r1, #1
 808329a:	4630      	mov	r0, r6
 808329c:	f7ff fb86 	bl	80829ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80832a0:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80832a2:	4e0c      	ldr	r6, [pc, #48]	; (80832d4 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80832a4:	462a      	mov	r2, r5
 80832a6:	4621      	mov	r1, r4
 80832a8:	f000 f816 	bl	80832d8 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80832ac:	2102      	movs	r1, #2
 80832ae:	4630      	mov	r0, r6
 80832b0:	f7ff fb7c 	bl	80829ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80832b4:	462a      	mov	r2, r5
 80832b6:	4621      	mov	r1, r4
 80832b8:	4630      	mov	r0, r6
 80832ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80832be:	f000 b80b 	b.w	80832d8 <__aeabi_atexit>
 80832c2:	bf00      	nop
 80832c4:	20000b60 	.word	0x20000b60
 80832c8:	200004f0 	.word	0x200004f0
 80832cc:	0808299d 	.word	0x0808299d
 80832d0:	20000b70 	.word	0x20000b70
 80832d4:	20000b80 	.word	0x20000b80

080832d8 <__aeabi_atexit>:
 80832d8:	460b      	mov	r3, r1
 80832da:	4601      	mov	r1, r0
 80832dc:	4618      	mov	r0, r3
 80832de:	f001 b89f 	b.w	8084420 <__cxa_atexit>

080832e2 <_ZSt25__throw_bad_function_callv>:
 80832e2:	b508      	push	{r3, lr}
 80832e4:	f7fe fb12 	bl	808190c <abort>

080832e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80832e8:	4b24      	ldr	r3, [pc, #144]	; (808337c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80832ea:	681a      	ldr	r2, [r3, #0]
 80832ec:	07d0      	lsls	r0, r2, #31
 80832ee:	bf5c      	itt	pl
 80832f0:	2201      	movpl	r2, #1
 80832f2:	601a      	strpl	r2, [r3, #0]
 80832f4:	4b22      	ldr	r3, [pc, #136]	; (8083380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80832f6:	681a      	ldr	r2, [r3, #0]
 80832f8:	07d1      	lsls	r1, r2, #31
 80832fa:	bf5c      	itt	pl
 80832fc:	2201      	movpl	r2, #1
 80832fe:	601a      	strpl	r2, [r3, #0]
 8083300:	4b20      	ldr	r3, [pc, #128]	; (8083384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8083302:	681a      	ldr	r2, [r3, #0]
 8083304:	07d2      	lsls	r2, r2, #31
 8083306:	bf5c      	itt	pl
 8083308:	2201      	movpl	r2, #1
 808330a:	601a      	strpl	r2, [r3, #0]
 808330c:	4b1e      	ldr	r3, [pc, #120]	; (8083388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808330e:	681a      	ldr	r2, [r3, #0]
 8083310:	07d0      	lsls	r0, r2, #31
 8083312:	bf5c      	itt	pl
 8083314:	2201      	movpl	r2, #1
 8083316:	601a      	strpl	r2, [r3, #0]
 8083318:	4b1c      	ldr	r3, [pc, #112]	; (808338c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808331a:	681a      	ldr	r2, [r3, #0]
 808331c:	07d1      	lsls	r1, r2, #31
 808331e:	bf5c      	itt	pl
 8083320:	2201      	movpl	r2, #1
 8083322:	601a      	strpl	r2, [r3, #0]
 8083324:	4b1a      	ldr	r3, [pc, #104]	; (8083390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8083326:	681a      	ldr	r2, [r3, #0]
 8083328:	07d2      	lsls	r2, r2, #31
 808332a:	bf5c      	itt	pl
 808332c:	2201      	movpl	r2, #1
 808332e:	601a      	strpl	r2, [r3, #0]
 8083330:	4b18      	ldr	r3, [pc, #96]	; (8083394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8083332:	681a      	ldr	r2, [r3, #0]
 8083334:	07d0      	lsls	r0, r2, #31
 8083336:	bf5c      	itt	pl
 8083338:	2201      	movpl	r2, #1
 808333a:	601a      	strpl	r2, [r3, #0]
 808333c:	4b16      	ldr	r3, [pc, #88]	; (8083398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808333e:	681a      	ldr	r2, [r3, #0]
 8083340:	07d1      	lsls	r1, r2, #31
 8083342:	bf5c      	itt	pl
 8083344:	2201      	movpl	r2, #1
 8083346:	601a      	strpl	r2, [r3, #0]
 8083348:	4b14      	ldr	r3, [pc, #80]	; (808339c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808334a:	681a      	ldr	r2, [r3, #0]
 808334c:	07d2      	lsls	r2, r2, #31
 808334e:	bf5c      	itt	pl
 8083350:	2201      	movpl	r2, #1
 8083352:	601a      	strpl	r2, [r3, #0]
 8083354:	4b12      	ldr	r3, [pc, #72]	; (80833a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8083356:	681a      	ldr	r2, [r3, #0]
 8083358:	07d0      	lsls	r0, r2, #31
 808335a:	bf5c      	itt	pl
 808335c:	2201      	movpl	r2, #1
 808335e:	601a      	strpl	r2, [r3, #0]
 8083360:	4b10      	ldr	r3, [pc, #64]	; (80833a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8083362:	681a      	ldr	r2, [r3, #0]
 8083364:	07d1      	lsls	r1, r2, #31
 8083366:	bf5c      	itt	pl
 8083368:	2201      	movpl	r2, #1
 808336a:	601a      	strpl	r2, [r3, #0]
 808336c:	4b0e      	ldr	r3, [pc, #56]	; (80833a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808336e:	681a      	ldr	r2, [r3, #0]
 8083370:	07d2      	lsls	r2, r2, #31
 8083372:	bf5c      	itt	pl
 8083374:	2201      	movpl	r2, #1
 8083376:	601a      	strpl	r2, [r3, #0]
 8083378:	4770      	bx	lr
 808337a:	bf00      	nop
 808337c:	20000bbc 	.word	0x20000bbc
 8083380:	20000bb8 	.word	0x20000bb8
 8083384:	20000bb4 	.word	0x20000bb4
 8083388:	20000bb0 	.word	0x20000bb0
 808338c:	20000bac 	.word	0x20000bac
 8083390:	20000ba8 	.word	0x20000ba8
 8083394:	20000ba4 	.word	0x20000ba4
 8083398:	20000ba0 	.word	0x20000ba0
 808339c:	20000b9c 	.word	0x20000b9c
 80833a0:	20000b98 	.word	0x20000b98
 80833a4:	20000b94 	.word	0x20000b94
 80833a8:	20000b90 	.word	0x20000b90

080833ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80833ac:	4b18      	ldr	r3, [pc, #96]	; (8083410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80833ae:	681a      	ldr	r2, [r3, #0]
 80833b0:	07d1      	lsls	r1, r2, #31
 80833b2:	bf5c      	itt	pl
 80833b4:	2201      	movpl	r2, #1
 80833b6:	601a      	strpl	r2, [r3, #0]
 80833b8:	4b16      	ldr	r3, [pc, #88]	; (8083414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80833ba:	681a      	ldr	r2, [r3, #0]
 80833bc:	07d2      	lsls	r2, r2, #31
 80833be:	bf5c      	itt	pl
 80833c0:	2201      	movpl	r2, #1
 80833c2:	601a      	strpl	r2, [r3, #0]
 80833c4:	4b14      	ldr	r3, [pc, #80]	; (8083418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80833c6:	681a      	ldr	r2, [r3, #0]
 80833c8:	07d0      	lsls	r0, r2, #31
 80833ca:	bf5c      	itt	pl
 80833cc:	2201      	movpl	r2, #1
 80833ce:	601a      	strpl	r2, [r3, #0]
 80833d0:	4b12      	ldr	r3, [pc, #72]	; (808341c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80833d2:	681a      	ldr	r2, [r3, #0]
 80833d4:	07d1      	lsls	r1, r2, #31
 80833d6:	bf5c      	itt	pl
 80833d8:	2201      	movpl	r2, #1
 80833da:	601a      	strpl	r2, [r3, #0]
 80833dc:	4b10      	ldr	r3, [pc, #64]	; (8083420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80833de:	681a      	ldr	r2, [r3, #0]
 80833e0:	07d2      	lsls	r2, r2, #31
 80833e2:	bf5c      	itt	pl
 80833e4:	2201      	movpl	r2, #1
 80833e6:	601a      	strpl	r2, [r3, #0]
 80833e8:	4b0e      	ldr	r3, [pc, #56]	; (8083424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80833ea:	681a      	ldr	r2, [r3, #0]
 80833ec:	07d0      	lsls	r0, r2, #31
 80833ee:	bf5c      	itt	pl
 80833f0:	2201      	movpl	r2, #1
 80833f2:	601a      	strpl	r2, [r3, #0]
 80833f4:	4b0c      	ldr	r3, [pc, #48]	; (8083428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80833f6:	681a      	ldr	r2, [r3, #0]
 80833f8:	07d1      	lsls	r1, r2, #31
 80833fa:	bf5c      	itt	pl
 80833fc:	2201      	movpl	r2, #1
 80833fe:	601a      	strpl	r2, [r3, #0]
 8083400:	4b0a      	ldr	r3, [pc, #40]	; (808342c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083402:	681a      	ldr	r2, [r3, #0]
 8083404:	07d2      	lsls	r2, r2, #31
 8083406:	bf5c      	itt	pl
 8083408:	2201      	movpl	r2, #1
 808340a:	601a      	strpl	r2, [r3, #0]
 808340c:	4770      	bx	lr
 808340e:	bf00      	nop
 8083410:	20000bdc 	.word	0x20000bdc
 8083414:	20000bd8 	.word	0x20000bd8
 8083418:	20000bd4 	.word	0x20000bd4
 808341c:	20000bd0 	.word	0x20000bd0
 8083420:	20000bcc 	.word	0x20000bcc
 8083424:	20000bc8 	.word	0x20000bc8
 8083428:	20000bc4 	.word	0x20000bc4
 808342c:	20000bc0 	.word	0x20000bc0

08083430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083430:	4b18      	ldr	r3, [pc, #96]	; (8083494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083432:	681a      	ldr	r2, [r3, #0]
 8083434:	07d1      	lsls	r1, r2, #31
 8083436:	bf5c      	itt	pl
 8083438:	2201      	movpl	r2, #1
 808343a:	601a      	strpl	r2, [r3, #0]
 808343c:	4b16      	ldr	r3, [pc, #88]	; (8083498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808343e:	681a      	ldr	r2, [r3, #0]
 8083440:	07d2      	lsls	r2, r2, #31
 8083442:	bf5c      	itt	pl
 8083444:	2201      	movpl	r2, #1
 8083446:	601a      	strpl	r2, [r3, #0]
 8083448:	4b14      	ldr	r3, [pc, #80]	; (808349c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808344a:	681a      	ldr	r2, [r3, #0]
 808344c:	07d0      	lsls	r0, r2, #31
 808344e:	bf5c      	itt	pl
 8083450:	2201      	movpl	r2, #1
 8083452:	601a      	strpl	r2, [r3, #0]
 8083454:	4b12      	ldr	r3, [pc, #72]	; (80834a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083456:	681a      	ldr	r2, [r3, #0]
 8083458:	07d1      	lsls	r1, r2, #31
 808345a:	bf5c      	itt	pl
 808345c:	2201      	movpl	r2, #1
 808345e:	601a      	strpl	r2, [r3, #0]
 8083460:	4b10      	ldr	r3, [pc, #64]	; (80834a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083462:	681a      	ldr	r2, [r3, #0]
 8083464:	07d2      	lsls	r2, r2, #31
 8083466:	bf5c      	itt	pl
 8083468:	2201      	movpl	r2, #1
 808346a:	601a      	strpl	r2, [r3, #0]
 808346c:	4b0e      	ldr	r3, [pc, #56]	; (80834a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808346e:	681a      	ldr	r2, [r3, #0]
 8083470:	07d0      	lsls	r0, r2, #31
 8083472:	bf5c      	itt	pl
 8083474:	2201      	movpl	r2, #1
 8083476:	601a      	strpl	r2, [r3, #0]
 8083478:	4b0c      	ldr	r3, [pc, #48]	; (80834ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808347a:	681a      	ldr	r2, [r3, #0]
 808347c:	07d1      	lsls	r1, r2, #31
 808347e:	bf5c      	itt	pl
 8083480:	2201      	movpl	r2, #1
 8083482:	601a      	strpl	r2, [r3, #0]
 8083484:	4b0a      	ldr	r3, [pc, #40]	; (80834b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083486:	681a      	ldr	r2, [r3, #0]
 8083488:	07d2      	lsls	r2, r2, #31
 808348a:	bf5c      	itt	pl
 808348c:	2201      	movpl	r2, #1
 808348e:	601a      	strpl	r2, [r3, #0]
 8083490:	4770      	bx	lr
 8083492:	bf00      	nop
 8083494:	20000bfc 	.word	0x20000bfc
 8083498:	20000bf8 	.word	0x20000bf8
 808349c:	20000bf4 	.word	0x20000bf4
 80834a0:	20000bf0 	.word	0x20000bf0
 80834a4:	20000bec 	.word	0x20000bec
 80834a8:	20000be8 	.word	0x20000be8
 80834ac:	20000be4 	.word	0x20000be4
 80834b0:	20000be0 	.word	0x20000be0

080834b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80834b4:	4b24      	ldr	r3, [pc, #144]	; (8083548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80834b6:	681a      	ldr	r2, [r3, #0]
 80834b8:	07d0      	lsls	r0, r2, #31
 80834ba:	bf5c      	itt	pl
 80834bc:	2201      	movpl	r2, #1
 80834be:	601a      	strpl	r2, [r3, #0]
 80834c0:	4b22      	ldr	r3, [pc, #136]	; (808354c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80834c2:	681a      	ldr	r2, [r3, #0]
 80834c4:	07d1      	lsls	r1, r2, #31
 80834c6:	bf5c      	itt	pl
 80834c8:	2201      	movpl	r2, #1
 80834ca:	601a      	strpl	r2, [r3, #0]
 80834cc:	4b20      	ldr	r3, [pc, #128]	; (8083550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80834ce:	681a      	ldr	r2, [r3, #0]
 80834d0:	07d2      	lsls	r2, r2, #31
 80834d2:	bf5c      	itt	pl
 80834d4:	2201      	movpl	r2, #1
 80834d6:	601a      	strpl	r2, [r3, #0]
 80834d8:	4b1e      	ldr	r3, [pc, #120]	; (8083554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80834da:	681a      	ldr	r2, [r3, #0]
 80834dc:	07d0      	lsls	r0, r2, #31
 80834de:	bf5c      	itt	pl
 80834e0:	2201      	movpl	r2, #1
 80834e2:	601a      	strpl	r2, [r3, #0]
 80834e4:	4b1c      	ldr	r3, [pc, #112]	; (8083558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80834e6:	681a      	ldr	r2, [r3, #0]
 80834e8:	07d1      	lsls	r1, r2, #31
 80834ea:	bf5c      	itt	pl
 80834ec:	2201      	movpl	r2, #1
 80834ee:	601a      	strpl	r2, [r3, #0]
 80834f0:	4b1a      	ldr	r3, [pc, #104]	; (808355c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80834f2:	681a      	ldr	r2, [r3, #0]
 80834f4:	07d2      	lsls	r2, r2, #31
 80834f6:	bf5c      	itt	pl
 80834f8:	2201      	movpl	r2, #1
 80834fa:	601a      	strpl	r2, [r3, #0]
 80834fc:	4b18      	ldr	r3, [pc, #96]	; (8083560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80834fe:	681a      	ldr	r2, [r3, #0]
 8083500:	07d0      	lsls	r0, r2, #31
 8083502:	bf5c      	itt	pl
 8083504:	2201      	movpl	r2, #1
 8083506:	601a      	strpl	r2, [r3, #0]
 8083508:	4b16      	ldr	r3, [pc, #88]	; (8083564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808350a:	681a      	ldr	r2, [r3, #0]
 808350c:	07d1      	lsls	r1, r2, #31
 808350e:	bf5c      	itt	pl
 8083510:	2201      	movpl	r2, #1
 8083512:	601a      	strpl	r2, [r3, #0]
 8083514:	4b14      	ldr	r3, [pc, #80]	; (8083568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8083516:	681a      	ldr	r2, [r3, #0]
 8083518:	07d2      	lsls	r2, r2, #31
 808351a:	bf5c      	itt	pl
 808351c:	2201      	movpl	r2, #1
 808351e:	601a      	strpl	r2, [r3, #0]
 8083520:	4b12      	ldr	r3, [pc, #72]	; (808356c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8083522:	681a      	ldr	r2, [r3, #0]
 8083524:	07d0      	lsls	r0, r2, #31
 8083526:	bf5c      	itt	pl
 8083528:	2201      	movpl	r2, #1
 808352a:	601a      	strpl	r2, [r3, #0]
 808352c:	4b10      	ldr	r3, [pc, #64]	; (8083570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808352e:	681a      	ldr	r2, [r3, #0]
 8083530:	07d1      	lsls	r1, r2, #31
 8083532:	bf5c      	itt	pl
 8083534:	2201      	movpl	r2, #1
 8083536:	601a      	strpl	r2, [r3, #0]
 8083538:	4b0e      	ldr	r3, [pc, #56]	; (8083574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808353a:	681a      	ldr	r2, [r3, #0]
 808353c:	07d2      	lsls	r2, r2, #31
 808353e:	bf5c      	itt	pl
 8083540:	2201      	movpl	r2, #1
 8083542:	601a      	strpl	r2, [r3, #0]
 8083544:	4770      	bx	lr
 8083546:	bf00      	nop
 8083548:	20000c2c 	.word	0x20000c2c
 808354c:	20000c28 	.word	0x20000c28
 8083550:	20000c24 	.word	0x20000c24
 8083554:	20000c20 	.word	0x20000c20
 8083558:	20000c1c 	.word	0x20000c1c
 808355c:	20000c18 	.word	0x20000c18
 8083560:	20000c14 	.word	0x20000c14
 8083564:	20000c10 	.word	0x20000c10
 8083568:	20000c0c 	.word	0x20000c0c
 808356c:	20000c08 	.word	0x20000c08
 8083570:	20000c04 	.word	0x20000c04
 8083574:	20000c00 	.word	0x20000c00

08083578 <__aeabi_drsub>:
 8083578:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808357c:	e002      	b.n	8083584 <__adddf3>
 808357e:	bf00      	nop

08083580 <__aeabi_dsub>:
 8083580:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083584 <__adddf3>:
 8083584:	b530      	push	{r4, r5, lr}
 8083586:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808358a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808358e:	ea94 0f05 	teq	r4, r5
 8083592:	bf08      	it	eq
 8083594:	ea90 0f02 	teqeq	r0, r2
 8083598:	bf1f      	itttt	ne
 808359a:	ea54 0c00 	orrsne.w	ip, r4, r0
 808359e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80835a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80835a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80835aa:	f000 80e2 	beq.w	8083772 <__adddf3+0x1ee>
 80835ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80835b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80835b6:	bfb8      	it	lt
 80835b8:	426d      	neglt	r5, r5
 80835ba:	dd0c      	ble.n	80835d6 <__adddf3+0x52>
 80835bc:	442c      	add	r4, r5
 80835be:	ea80 0202 	eor.w	r2, r0, r2
 80835c2:	ea81 0303 	eor.w	r3, r1, r3
 80835c6:	ea82 0000 	eor.w	r0, r2, r0
 80835ca:	ea83 0101 	eor.w	r1, r3, r1
 80835ce:	ea80 0202 	eor.w	r2, r0, r2
 80835d2:	ea81 0303 	eor.w	r3, r1, r3
 80835d6:	2d36      	cmp	r5, #54	; 0x36
 80835d8:	bf88      	it	hi
 80835da:	bd30      	pophi	{r4, r5, pc}
 80835dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80835e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80835e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80835e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80835ec:	d002      	beq.n	80835f4 <__adddf3+0x70>
 80835ee:	4240      	negs	r0, r0
 80835f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80835f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80835f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80835fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083600:	d002      	beq.n	8083608 <__adddf3+0x84>
 8083602:	4252      	negs	r2, r2
 8083604:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083608:	ea94 0f05 	teq	r4, r5
 808360c:	f000 80a7 	beq.w	808375e <__adddf3+0x1da>
 8083610:	f1a4 0401 	sub.w	r4, r4, #1
 8083614:	f1d5 0e20 	rsbs	lr, r5, #32
 8083618:	db0d      	blt.n	8083636 <__adddf3+0xb2>
 808361a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808361e:	fa22 f205 	lsr.w	r2, r2, r5
 8083622:	1880      	adds	r0, r0, r2
 8083624:	f141 0100 	adc.w	r1, r1, #0
 8083628:	fa03 f20e 	lsl.w	r2, r3, lr
 808362c:	1880      	adds	r0, r0, r2
 808362e:	fa43 f305 	asr.w	r3, r3, r5
 8083632:	4159      	adcs	r1, r3
 8083634:	e00e      	b.n	8083654 <__adddf3+0xd0>
 8083636:	f1a5 0520 	sub.w	r5, r5, #32
 808363a:	f10e 0e20 	add.w	lr, lr, #32
 808363e:	2a01      	cmp	r2, #1
 8083640:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083644:	bf28      	it	cs
 8083646:	f04c 0c02 	orrcs.w	ip, ip, #2
 808364a:	fa43 f305 	asr.w	r3, r3, r5
 808364e:	18c0      	adds	r0, r0, r3
 8083650:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083658:	d507      	bpl.n	808366a <__adddf3+0xe6>
 808365a:	f04f 0e00 	mov.w	lr, #0
 808365e:	f1dc 0c00 	rsbs	ip, ip, #0
 8083662:	eb7e 0000 	sbcs.w	r0, lr, r0
 8083666:	eb6e 0101 	sbc.w	r1, lr, r1
 808366a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808366e:	d31b      	bcc.n	80836a8 <__adddf3+0x124>
 8083670:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083674:	d30c      	bcc.n	8083690 <__adddf3+0x10c>
 8083676:	0849      	lsrs	r1, r1, #1
 8083678:	ea5f 0030 	movs.w	r0, r0, rrx
 808367c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083680:	f104 0401 	add.w	r4, r4, #1
 8083684:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8083688:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808368c:	f080 809a 	bcs.w	80837c4 <__adddf3+0x240>
 8083690:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083694:	bf08      	it	eq
 8083696:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808369a:	f150 0000 	adcs.w	r0, r0, #0
 808369e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80836a2:	ea41 0105 	orr.w	r1, r1, r5
 80836a6:	bd30      	pop	{r4, r5, pc}
 80836a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80836ac:	4140      	adcs	r0, r0
 80836ae:	eb41 0101 	adc.w	r1, r1, r1
 80836b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80836b6:	f1a4 0401 	sub.w	r4, r4, #1
 80836ba:	d1e9      	bne.n	8083690 <__adddf3+0x10c>
 80836bc:	f091 0f00 	teq	r1, #0
 80836c0:	bf04      	itt	eq
 80836c2:	4601      	moveq	r1, r0
 80836c4:	2000      	moveq	r0, #0
 80836c6:	fab1 f381 	clz	r3, r1
 80836ca:	bf08      	it	eq
 80836cc:	3320      	addeq	r3, #32
 80836ce:	f1a3 030b 	sub.w	r3, r3, #11
 80836d2:	f1b3 0220 	subs.w	r2, r3, #32
 80836d6:	da0c      	bge.n	80836f2 <__adddf3+0x16e>
 80836d8:	320c      	adds	r2, #12
 80836da:	dd08      	ble.n	80836ee <__adddf3+0x16a>
 80836dc:	f102 0c14 	add.w	ip, r2, #20
 80836e0:	f1c2 020c 	rsb	r2, r2, #12
 80836e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80836e8:	fa21 f102 	lsr.w	r1, r1, r2
 80836ec:	e00c      	b.n	8083708 <__adddf3+0x184>
 80836ee:	f102 0214 	add.w	r2, r2, #20
 80836f2:	bfd8      	it	le
 80836f4:	f1c2 0c20 	rsble	ip, r2, #32
 80836f8:	fa01 f102 	lsl.w	r1, r1, r2
 80836fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083700:	bfdc      	itt	le
 8083702:	ea41 010c 	orrle.w	r1, r1, ip
 8083706:	4090      	lslle	r0, r2
 8083708:	1ae4      	subs	r4, r4, r3
 808370a:	bfa2      	ittt	ge
 808370c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083710:	4329      	orrge	r1, r5
 8083712:	bd30      	popge	{r4, r5, pc}
 8083714:	ea6f 0404 	mvn.w	r4, r4
 8083718:	3c1f      	subs	r4, #31
 808371a:	da1c      	bge.n	8083756 <__adddf3+0x1d2>
 808371c:	340c      	adds	r4, #12
 808371e:	dc0e      	bgt.n	808373e <__adddf3+0x1ba>
 8083720:	f104 0414 	add.w	r4, r4, #20
 8083724:	f1c4 0220 	rsb	r2, r4, #32
 8083728:	fa20 f004 	lsr.w	r0, r0, r4
 808372c:	fa01 f302 	lsl.w	r3, r1, r2
 8083730:	ea40 0003 	orr.w	r0, r0, r3
 8083734:	fa21 f304 	lsr.w	r3, r1, r4
 8083738:	ea45 0103 	orr.w	r1, r5, r3
 808373c:	bd30      	pop	{r4, r5, pc}
 808373e:	f1c4 040c 	rsb	r4, r4, #12
 8083742:	f1c4 0220 	rsb	r2, r4, #32
 8083746:	fa20 f002 	lsr.w	r0, r0, r2
 808374a:	fa01 f304 	lsl.w	r3, r1, r4
 808374e:	ea40 0003 	orr.w	r0, r0, r3
 8083752:	4629      	mov	r1, r5
 8083754:	bd30      	pop	{r4, r5, pc}
 8083756:	fa21 f004 	lsr.w	r0, r1, r4
 808375a:	4629      	mov	r1, r5
 808375c:	bd30      	pop	{r4, r5, pc}
 808375e:	f094 0f00 	teq	r4, #0
 8083762:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083766:	bf06      	itte	eq
 8083768:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808376c:	3401      	addeq	r4, #1
 808376e:	3d01      	subne	r5, #1
 8083770:	e74e      	b.n	8083610 <__adddf3+0x8c>
 8083772:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083776:	bf18      	it	ne
 8083778:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808377c:	d029      	beq.n	80837d2 <__adddf3+0x24e>
 808377e:	ea94 0f05 	teq	r4, r5
 8083782:	bf08      	it	eq
 8083784:	ea90 0f02 	teqeq	r0, r2
 8083788:	d005      	beq.n	8083796 <__adddf3+0x212>
 808378a:	ea54 0c00 	orrs.w	ip, r4, r0
 808378e:	bf04      	itt	eq
 8083790:	4619      	moveq	r1, r3
 8083792:	4610      	moveq	r0, r2
 8083794:	bd30      	pop	{r4, r5, pc}
 8083796:	ea91 0f03 	teq	r1, r3
 808379a:	bf1e      	ittt	ne
 808379c:	2100      	movne	r1, #0
 808379e:	2000      	movne	r0, #0
 80837a0:	bd30      	popne	{r4, r5, pc}
 80837a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80837a6:	d105      	bne.n	80837b4 <__adddf3+0x230>
 80837a8:	0040      	lsls	r0, r0, #1
 80837aa:	4149      	adcs	r1, r1
 80837ac:	bf28      	it	cs
 80837ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80837b2:	bd30      	pop	{r4, r5, pc}
 80837b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80837b8:	bf3c      	itt	cc
 80837ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80837be:	bd30      	popcc	{r4, r5, pc}
 80837c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80837c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80837c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80837cc:	f04f 0000 	mov.w	r0, #0
 80837d0:	bd30      	pop	{r4, r5, pc}
 80837d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80837d6:	bf1a      	itte	ne
 80837d8:	4619      	movne	r1, r3
 80837da:	4610      	movne	r0, r2
 80837dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80837e0:	bf1c      	itt	ne
 80837e2:	460b      	movne	r3, r1
 80837e4:	4602      	movne	r2, r0
 80837e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80837ea:	bf06      	itte	eq
 80837ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80837f0:	ea91 0f03 	teqeq	r1, r3
 80837f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80837f8:	bd30      	pop	{r4, r5, pc}
 80837fa:	bf00      	nop

080837fc <__aeabi_ui2d>:
 80837fc:	f090 0f00 	teq	r0, #0
 8083800:	bf04      	itt	eq
 8083802:	2100      	moveq	r1, #0
 8083804:	4770      	bxeq	lr
 8083806:	b530      	push	{r4, r5, lr}
 8083808:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808380c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083810:	f04f 0500 	mov.w	r5, #0
 8083814:	f04f 0100 	mov.w	r1, #0
 8083818:	e750      	b.n	80836bc <__adddf3+0x138>
 808381a:	bf00      	nop

0808381c <__aeabi_i2d>:
 808381c:	f090 0f00 	teq	r0, #0
 8083820:	bf04      	itt	eq
 8083822:	2100      	moveq	r1, #0
 8083824:	4770      	bxeq	lr
 8083826:	b530      	push	{r4, r5, lr}
 8083828:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808382c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083830:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083834:	bf48      	it	mi
 8083836:	4240      	negmi	r0, r0
 8083838:	f04f 0100 	mov.w	r1, #0
 808383c:	e73e      	b.n	80836bc <__adddf3+0x138>
 808383e:	bf00      	nop

08083840 <__aeabi_f2d>:
 8083840:	0042      	lsls	r2, r0, #1
 8083842:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083846:	ea4f 0131 	mov.w	r1, r1, rrx
 808384a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808384e:	bf1f      	itttt	ne
 8083850:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083854:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083858:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808385c:	4770      	bxne	lr
 808385e:	f092 0f00 	teq	r2, #0
 8083862:	bf14      	ite	ne
 8083864:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083868:	4770      	bxeq	lr
 808386a:	b530      	push	{r4, r5, lr}
 808386c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083870:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083874:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083878:	e720      	b.n	80836bc <__adddf3+0x138>
 808387a:	bf00      	nop

0808387c <__aeabi_ul2d>:
 808387c:	ea50 0201 	orrs.w	r2, r0, r1
 8083880:	bf08      	it	eq
 8083882:	4770      	bxeq	lr
 8083884:	b530      	push	{r4, r5, lr}
 8083886:	f04f 0500 	mov.w	r5, #0
 808388a:	e00a      	b.n	80838a2 <__aeabi_l2d+0x16>

0808388c <__aeabi_l2d>:
 808388c:	ea50 0201 	orrs.w	r2, r0, r1
 8083890:	bf08      	it	eq
 8083892:	4770      	bxeq	lr
 8083894:	b530      	push	{r4, r5, lr}
 8083896:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808389a:	d502      	bpl.n	80838a2 <__aeabi_l2d+0x16>
 808389c:	4240      	negs	r0, r0
 808389e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80838a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80838a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80838aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80838ae:	f43f aedc 	beq.w	808366a <__adddf3+0xe6>
 80838b2:	f04f 0203 	mov.w	r2, #3
 80838b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80838ba:	bf18      	it	ne
 80838bc:	3203      	addne	r2, #3
 80838be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80838c2:	bf18      	it	ne
 80838c4:	3203      	addne	r2, #3
 80838c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80838ca:	f1c2 0320 	rsb	r3, r2, #32
 80838ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80838d2:	fa20 f002 	lsr.w	r0, r0, r2
 80838d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80838da:	ea40 000e 	orr.w	r0, r0, lr
 80838de:	fa21 f102 	lsr.w	r1, r1, r2
 80838e2:	4414      	add	r4, r2
 80838e4:	e6c1      	b.n	808366a <__adddf3+0xe6>
 80838e6:	bf00      	nop

080838e8 <__aeabi_dmul>:
 80838e8:	b570      	push	{r4, r5, r6, lr}
 80838ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80838ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80838f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80838f6:	bf1d      	ittte	ne
 80838f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80838fc:	ea94 0f0c 	teqne	r4, ip
 8083900:	ea95 0f0c 	teqne	r5, ip
 8083904:	f000 f8de 	bleq	8083ac4 <__aeabi_dmul+0x1dc>
 8083908:	442c      	add	r4, r5
 808390a:	ea81 0603 	eor.w	r6, r1, r3
 808390e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083912:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083916:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808391a:	bf18      	it	ne
 808391c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083928:	d038      	beq.n	808399c <__aeabi_dmul+0xb4>
 808392a:	fba0 ce02 	umull	ip, lr, r0, r2
 808392e:	f04f 0500 	mov.w	r5, #0
 8083932:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083936:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808393a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808393e:	f04f 0600 	mov.w	r6, #0
 8083942:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083946:	f09c 0f00 	teq	ip, #0
 808394a:	bf18      	it	ne
 808394c:	f04e 0e01 	orrne.w	lr, lr, #1
 8083950:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083954:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083958:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808395c:	d204      	bcs.n	8083968 <__aeabi_dmul+0x80>
 808395e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083962:	416d      	adcs	r5, r5
 8083964:	eb46 0606 	adc.w	r6, r6, r6
 8083968:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808396c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083970:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083974:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083978:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808397c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083980:	bf88      	it	hi
 8083982:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083986:	d81e      	bhi.n	80839c6 <__aeabi_dmul+0xde>
 8083988:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808398c:	bf08      	it	eq
 808398e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083992:	f150 0000 	adcs.w	r0, r0, #0
 8083996:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808399a:	bd70      	pop	{r4, r5, r6, pc}
 808399c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80839a0:	ea46 0101 	orr.w	r1, r6, r1
 80839a4:	ea40 0002 	orr.w	r0, r0, r2
 80839a8:	ea81 0103 	eor.w	r1, r1, r3
 80839ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80839b0:	bfc2      	ittt	gt
 80839b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80839b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80839ba:	bd70      	popgt	{r4, r5, r6, pc}
 80839bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80839c0:	f04f 0e00 	mov.w	lr, #0
 80839c4:	3c01      	subs	r4, #1
 80839c6:	f300 80ab 	bgt.w	8083b20 <__aeabi_dmul+0x238>
 80839ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80839ce:	bfde      	ittt	le
 80839d0:	2000      	movle	r0, #0
 80839d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80839d6:	bd70      	pople	{r4, r5, r6, pc}
 80839d8:	f1c4 0400 	rsb	r4, r4, #0
 80839dc:	3c20      	subs	r4, #32
 80839de:	da35      	bge.n	8083a4c <__aeabi_dmul+0x164>
 80839e0:	340c      	adds	r4, #12
 80839e2:	dc1b      	bgt.n	8083a1c <__aeabi_dmul+0x134>
 80839e4:	f104 0414 	add.w	r4, r4, #20
 80839e8:	f1c4 0520 	rsb	r5, r4, #32
 80839ec:	fa00 f305 	lsl.w	r3, r0, r5
 80839f0:	fa20 f004 	lsr.w	r0, r0, r4
 80839f4:	fa01 f205 	lsl.w	r2, r1, r5
 80839f8:	ea40 0002 	orr.w	r0, r0, r2
 80839fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083a00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083a04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083a08:	fa21 f604 	lsr.w	r6, r1, r4
 8083a0c:	eb42 0106 	adc.w	r1, r2, r6
 8083a10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083a14:	bf08      	it	eq
 8083a16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083a1a:	bd70      	pop	{r4, r5, r6, pc}
 8083a1c:	f1c4 040c 	rsb	r4, r4, #12
 8083a20:	f1c4 0520 	rsb	r5, r4, #32
 8083a24:	fa00 f304 	lsl.w	r3, r0, r4
 8083a28:	fa20 f005 	lsr.w	r0, r0, r5
 8083a2c:	fa01 f204 	lsl.w	r2, r1, r4
 8083a30:	ea40 0002 	orr.w	r0, r0, r2
 8083a34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083a38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083a3c:	f141 0100 	adc.w	r1, r1, #0
 8083a40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083a44:	bf08      	it	eq
 8083a46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083a4a:	bd70      	pop	{r4, r5, r6, pc}
 8083a4c:	f1c4 0520 	rsb	r5, r4, #32
 8083a50:	fa00 f205 	lsl.w	r2, r0, r5
 8083a54:	ea4e 0e02 	orr.w	lr, lr, r2
 8083a58:	fa20 f304 	lsr.w	r3, r0, r4
 8083a5c:	fa01 f205 	lsl.w	r2, r1, r5
 8083a60:	ea43 0302 	orr.w	r3, r3, r2
 8083a64:	fa21 f004 	lsr.w	r0, r1, r4
 8083a68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083a6c:	fa21 f204 	lsr.w	r2, r1, r4
 8083a70:	ea20 0002 	bic.w	r0, r0, r2
 8083a74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083a7c:	bf08      	it	eq
 8083a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083a82:	bd70      	pop	{r4, r5, r6, pc}
 8083a84:	f094 0f00 	teq	r4, #0
 8083a88:	d10f      	bne.n	8083aaa <__aeabi_dmul+0x1c2>
 8083a8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083a8e:	0040      	lsls	r0, r0, #1
 8083a90:	eb41 0101 	adc.w	r1, r1, r1
 8083a94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083a98:	bf08      	it	eq
 8083a9a:	3c01      	subeq	r4, #1
 8083a9c:	d0f7      	beq.n	8083a8e <__aeabi_dmul+0x1a6>
 8083a9e:	ea41 0106 	orr.w	r1, r1, r6
 8083aa2:	f095 0f00 	teq	r5, #0
 8083aa6:	bf18      	it	ne
 8083aa8:	4770      	bxne	lr
 8083aaa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083aae:	0052      	lsls	r2, r2, #1
 8083ab0:	eb43 0303 	adc.w	r3, r3, r3
 8083ab4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083ab8:	bf08      	it	eq
 8083aba:	3d01      	subeq	r5, #1
 8083abc:	d0f7      	beq.n	8083aae <__aeabi_dmul+0x1c6>
 8083abe:	ea43 0306 	orr.w	r3, r3, r6
 8083ac2:	4770      	bx	lr
 8083ac4:	ea94 0f0c 	teq	r4, ip
 8083ac8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083acc:	bf18      	it	ne
 8083ace:	ea95 0f0c 	teqne	r5, ip
 8083ad2:	d00c      	beq.n	8083aee <__aeabi_dmul+0x206>
 8083ad4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083ad8:	bf18      	it	ne
 8083ada:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083ade:	d1d1      	bne.n	8083a84 <__aeabi_dmul+0x19c>
 8083ae0:	ea81 0103 	eor.w	r1, r1, r3
 8083ae4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083ae8:	f04f 0000 	mov.w	r0, #0
 8083aec:	bd70      	pop	{r4, r5, r6, pc}
 8083aee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083af2:	bf06      	itte	eq
 8083af4:	4610      	moveq	r0, r2
 8083af6:	4619      	moveq	r1, r3
 8083af8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083afc:	d019      	beq.n	8083b32 <__aeabi_dmul+0x24a>
 8083afe:	ea94 0f0c 	teq	r4, ip
 8083b02:	d102      	bne.n	8083b0a <__aeabi_dmul+0x222>
 8083b04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083b08:	d113      	bne.n	8083b32 <__aeabi_dmul+0x24a>
 8083b0a:	ea95 0f0c 	teq	r5, ip
 8083b0e:	d105      	bne.n	8083b1c <__aeabi_dmul+0x234>
 8083b10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083b14:	bf1c      	itt	ne
 8083b16:	4610      	movne	r0, r2
 8083b18:	4619      	movne	r1, r3
 8083b1a:	d10a      	bne.n	8083b32 <__aeabi_dmul+0x24a>
 8083b1c:	ea81 0103 	eor.w	r1, r1, r3
 8083b20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083b28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083b2c:	f04f 0000 	mov.w	r0, #0
 8083b30:	bd70      	pop	{r4, r5, r6, pc}
 8083b32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083b36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083b3a:	bd70      	pop	{r4, r5, r6, pc}

08083b3c <__aeabi_ddiv>:
 8083b3c:	b570      	push	{r4, r5, r6, lr}
 8083b3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083b42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083b46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083b4a:	bf1d      	ittte	ne
 8083b4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083b50:	ea94 0f0c 	teqne	r4, ip
 8083b54:	ea95 0f0c 	teqne	r5, ip
 8083b58:	f000 f8a7 	bleq	8083caa <__aeabi_ddiv+0x16e>
 8083b5c:	eba4 0405 	sub.w	r4, r4, r5
 8083b60:	ea81 0e03 	eor.w	lr, r1, r3
 8083b64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083b68:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083b6c:	f000 8088 	beq.w	8083c80 <__aeabi_ddiv+0x144>
 8083b70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083b74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083b78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083b7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083b80:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083b84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083b88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083b8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083b90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083b94:	429d      	cmp	r5, r3
 8083b96:	bf08      	it	eq
 8083b98:	4296      	cmpeq	r6, r2
 8083b9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083b9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083ba2:	d202      	bcs.n	8083baa <__aeabi_ddiv+0x6e>
 8083ba4:	085b      	lsrs	r3, r3, #1
 8083ba6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083baa:	1ab6      	subs	r6, r6, r2
 8083bac:	eb65 0503 	sbc.w	r5, r5, r3
 8083bb0:	085b      	lsrs	r3, r3, #1
 8083bb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8083bb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083bba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083bbe:	ebb6 0e02 	subs.w	lr, r6, r2
 8083bc2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083bc6:	bf22      	ittt	cs
 8083bc8:	1ab6      	subcs	r6, r6, r2
 8083bca:	4675      	movcs	r5, lr
 8083bcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8083bd0:	085b      	lsrs	r3, r3, #1
 8083bd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8083bd6:	ebb6 0e02 	subs.w	lr, r6, r2
 8083bda:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083bde:	bf22      	ittt	cs
 8083be0:	1ab6      	subcs	r6, r6, r2
 8083be2:	4675      	movcs	r5, lr
 8083be4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083be8:	085b      	lsrs	r3, r3, #1
 8083bea:	ea4f 0232 	mov.w	r2, r2, rrx
 8083bee:	ebb6 0e02 	subs.w	lr, r6, r2
 8083bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083bf6:	bf22      	ittt	cs
 8083bf8:	1ab6      	subcs	r6, r6, r2
 8083bfa:	4675      	movcs	r5, lr
 8083bfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083c00:	085b      	lsrs	r3, r3, #1
 8083c02:	ea4f 0232 	mov.w	r2, r2, rrx
 8083c06:	ebb6 0e02 	subs.w	lr, r6, r2
 8083c0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083c0e:	bf22      	ittt	cs
 8083c10:	1ab6      	subcs	r6, r6, r2
 8083c12:	4675      	movcs	r5, lr
 8083c14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083c18:	ea55 0e06 	orrs.w	lr, r5, r6
 8083c1c:	d018      	beq.n	8083c50 <__aeabi_ddiv+0x114>
 8083c1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083c22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083c26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083c2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083c2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083c32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083c36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083c3a:	d1c0      	bne.n	8083bbe <__aeabi_ddiv+0x82>
 8083c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083c40:	d10b      	bne.n	8083c5a <__aeabi_ddiv+0x11e>
 8083c42:	ea41 0100 	orr.w	r1, r1, r0
 8083c46:	f04f 0000 	mov.w	r0, #0
 8083c4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083c4e:	e7b6      	b.n	8083bbe <__aeabi_ddiv+0x82>
 8083c50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083c54:	bf04      	itt	eq
 8083c56:	4301      	orreq	r1, r0
 8083c58:	2000      	moveq	r0, #0
 8083c5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083c5e:	bf88      	it	hi
 8083c60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083c64:	f63f aeaf 	bhi.w	80839c6 <__aeabi_dmul+0xde>
 8083c68:	ebb5 0c03 	subs.w	ip, r5, r3
 8083c6c:	bf04      	itt	eq
 8083c6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083c72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083c76:	f150 0000 	adcs.w	r0, r0, #0
 8083c7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083c7e:	bd70      	pop	{r4, r5, r6, pc}
 8083c80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083c84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083c88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083c8c:	bfc2      	ittt	gt
 8083c8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083c92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083c96:	bd70      	popgt	{r4, r5, r6, pc}
 8083c98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083c9c:	f04f 0e00 	mov.w	lr, #0
 8083ca0:	3c01      	subs	r4, #1
 8083ca2:	e690      	b.n	80839c6 <__aeabi_dmul+0xde>
 8083ca4:	ea45 0e06 	orr.w	lr, r5, r6
 8083ca8:	e68d      	b.n	80839c6 <__aeabi_dmul+0xde>
 8083caa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083cae:	ea94 0f0c 	teq	r4, ip
 8083cb2:	bf08      	it	eq
 8083cb4:	ea95 0f0c 	teqeq	r5, ip
 8083cb8:	f43f af3b 	beq.w	8083b32 <__aeabi_dmul+0x24a>
 8083cbc:	ea94 0f0c 	teq	r4, ip
 8083cc0:	d10a      	bne.n	8083cd8 <__aeabi_ddiv+0x19c>
 8083cc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083cc6:	f47f af34 	bne.w	8083b32 <__aeabi_dmul+0x24a>
 8083cca:	ea95 0f0c 	teq	r5, ip
 8083cce:	f47f af25 	bne.w	8083b1c <__aeabi_dmul+0x234>
 8083cd2:	4610      	mov	r0, r2
 8083cd4:	4619      	mov	r1, r3
 8083cd6:	e72c      	b.n	8083b32 <__aeabi_dmul+0x24a>
 8083cd8:	ea95 0f0c 	teq	r5, ip
 8083cdc:	d106      	bne.n	8083cec <__aeabi_ddiv+0x1b0>
 8083cde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083ce2:	f43f aefd 	beq.w	8083ae0 <__aeabi_dmul+0x1f8>
 8083ce6:	4610      	mov	r0, r2
 8083ce8:	4619      	mov	r1, r3
 8083cea:	e722      	b.n	8083b32 <__aeabi_dmul+0x24a>
 8083cec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083cf0:	bf18      	it	ne
 8083cf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083cf6:	f47f aec5 	bne.w	8083a84 <__aeabi_dmul+0x19c>
 8083cfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083cfe:	f47f af0d 	bne.w	8083b1c <__aeabi_dmul+0x234>
 8083d02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083d06:	f47f aeeb 	bne.w	8083ae0 <__aeabi_dmul+0x1f8>
 8083d0a:	e712      	b.n	8083b32 <__aeabi_dmul+0x24a>

08083d0c <__aeabi_d2f>:
 8083d0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083d10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083d14:	bf24      	itt	cs
 8083d16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083d1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083d1e:	d90d      	bls.n	8083d3c <__aeabi_d2f+0x30>
 8083d20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083d24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083d28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083d2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083d30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083d34:	bf08      	it	eq
 8083d36:	f020 0001 	biceq.w	r0, r0, #1
 8083d3a:	4770      	bx	lr
 8083d3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083d40:	d121      	bne.n	8083d86 <__aeabi_d2f+0x7a>
 8083d42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083d46:	bfbc      	itt	lt
 8083d48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083d4c:	4770      	bxlt	lr
 8083d4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083d52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8083d56:	f1c2 0218 	rsb	r2, r2, #24
 8083d5a:	f1c2 0c20 	rsb	ip, r2, #32
 8083d5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8083d62:	fa20 f002 	lsr.w	r0, r0, r2
 8083d66:	bf18      	it	ne
 8083d68:	f040 0001 	orrne.w	r0, r0, #1
 8083d6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083d70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8083d74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8083d78:	ea40 000c 	orr.w	r0, r0, ip
 8083d7c:	fa23 f302 	lsr.w	r3, r3, r2
 8083d80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8083d84:	e7cc      	b.n	8083d20 <__aeabi_d2f+0x14>
 8083d86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8083d8a:	d107      	bne.n	8083d9c <__aeabi_d2f+0x90>
 8083d8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8083d90:	bf1e      	ittt	ne
 8083d92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8083d96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8083d9a:	4770      	bxne	lr
 8083d9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8083da0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083da4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083da8:	4770      	bx	lr
 8083daa:	bf00      	nop

08083dac <__aeabi_frsub>:
 8083dac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8083db0:	e002      	b.n	8083db8 <__addsf3>
 8083db2:	bf00      	nop

08083db4 <__aeabi_fsub>:
 8083db4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08083db8 <__addsf3>:
 8083db8:	0042      	lsls	r2, r0, #1
 8083dba:	bf1f      	itttt	ne
 8083dbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8083dc0:	ea92 0f03 	teqne	r2, r3
 8083dc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8083dc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083dcc:	d06a      	beq.n	8083ea4 <__addsf3+0xec>
 8083dce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8083dd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8083dd6:	bfc1      	itttt	gt
 8083dd8:	18d2      	addgt	r2, r2, r3
 8083dda:	4041      	eorgt	r1, r0
 8083ddc:	4048      	eorgt	r0, r1
 8083dde:	4041      	eorgt	r1, r0
 8083de0:	bfb8      	it	lt
 8083de2:	425b      	neglt	r3, r3
 8083de4:	2b19      	cmp	r3, #25
 8083de6:	bf88      	it	hi
 8083de8:	4770      	bxhi	lr
 8083dea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083df2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8083df6:	bf18      	it	ne
 8083df8:	4240      	negne	r0, r0
 8083dfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083dfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8083e02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8083e06:	bf18      	it	ne
 8083e08:	4249      	negne	r1, r1
 8083e0a:	ea92 0f03 	teq	r2, r3
 8083e0e:	d03f      	beq.n	8083e90 <__addsf3+0xd8>
 8083e10:	f1a2 0201 	sub.w	r2, r2, #1
 8083e14:	fa41 fc03 	asr.w	ip, r1, r3
 8083e18:	eb10 000c 	adds.w	r0, r0, ip
 8083e1c:	f1c3 0320 	rsb	r3, r3, #32
 8083e20:	fa01 f103 	lsl.w	r1, r1, r3
 8083e24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083e28:	d502      	bpl.n	8083e30 <__addsf3+0x78>
 8083e2a:	4249      	negs	r1, r1
 8083e2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083e30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083e34:	d313      	bcc.n	8083e5e <__addsf3+0xa6>
 8083e36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8083e3a:	d306      	bcc.n	8083e4a <__addsf3+0x92>
 8083e3c:	0840      	lsrs	r0, r0, #1
 8083e3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8083e42:	f102 0201 	add.w	r2, r2, #1
 8083e46:	2afe      	cmp	r2, #254	; 0xfe
 8083e48:	d251      	bcs.n	8083eee <__addsf3+0x136>
 8083e4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8083e4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083e52:	bf08      	it	eq
 8083e54:	f020 0001 	biceq.w	r0, r0, #1
 8083e58:	ea40 0003 	orr.w	r0, r0, r3
 8083e5c:	4770      	bx	lr
 8083e5e:	0049      	lsls	r1, r1, #1
 8083e60:	eb40 0000 	adc.w	r0, r0, r0
 8083e64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8083e68:	f1a2 0201 	sub.w	r2, r2, #1
 8083e6c:	d1ed      	bne.n	8083e4a <__addsf3+0x92>
 8083e6e:	fab0 fc80 	clz	ip, r0
 8083e72:	f1ac 0c08 	sub.w	ip, ip, #8
 8083e76:	ebb2 020c 	subs.w	r2, r2, ip
 8083e7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8083e7e:	bfaa      	itet	ge
 8083e80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083e84:	4252      	neglt	r2, r2
 8083e86:	4318      	orrge	r0, r3
 8083e88:	bfbc      	itt	lt
 8083e8a:	40d0      	lsrlt	r0, r2
 8083e8c:	4318      	orrlt	r0, r3
 8083e8e:	4770      	bx	lr
 8083e90:	f092 0f00 	teq	r2, #0
 8083e94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8083e98:	bf06      	itte	eq
 8083e9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8083e9e:	3201      	addeq	r2, #1
 8083ea0:	3b01      	subne	r3, #1
 8083ea2:	e7b5      	b.n	8083e10 <__addsf3+0x58>
 8083ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083eac:	bf18      	it	ne
 8083eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083eb2:	d021      	beq.n	8083ef8 <__addsf3+0x140>
 8083eb4:	ea92 0f03 	teq	r2, r3
 8083eb8:	d004      	beq.n	8083ec4 <__addsf3+0x10c>
 8083eba:	f092 0f00 	teq	r2, #0
 8083ebe:	bf08      	it	eq
 8083ec0:	4608      	moveq	r0, r1
 8083ec2:	4770      	bx	lr
 8083ec4:	ea90 0f01 	teq	r0, r1
 8083ec8:	bf1c      	itt	ne
 8083eca:	2000      	movne	r0, #0
 8083ecc:	4770      	bxne	lr
 8083ece:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083ed2:	d104      	bne.n	8083ede <__addsf3+0x126>
 8083ed4:	0040      	lsls	r0, r0, #1
 8083ed6:	bf28      	it	cs
 8083ed8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083edc:	4770      	bx	lr
 8083ede:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083ee2:	bf3c      	itt	cc
 8083ee4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8083ee8:	4770      	bxcc	lr
 8083eea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083eee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083ef2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083ef6:	4770      	bx	lr
 8083ef8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083efc:	bf16      	itet	ne
 8083efe:	4608      	movne	r0, r1
 8083f00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083f04:	4601      	movne	r1, r0
 8083f06:	0242      	lsls	r2, r0, #9
 8083f08:	bf06      	itte	eq
 8083f0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083f0e:	ea90 0f01 	teqeq	r0, r1
 8083f12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083f16:	4770      	bx	lr

08083f18 <__aeabi_ui2f>:
 8083f18:	f04f 0300 	mov.w	r3, #0
 8083f1c:	e004      	b.n	8083f28 <__aeabi_i2f+0x8>
 8083f1e:	bf00      	nop

08083f20 <__aeabi_i2f>:
 8083f20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083f24:	bf48      	it	mi
 8083f26:	4240      	negmi	r0, r0
 8083f28:	ea5f 0c00 	movs.w	ip, r0
 8083f2c:	bf08      	it	eq
 8083f2e:	4770      	bxeq	lr
 8083f30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083f34:	4601      	mov	r1, r0
 8083f36:	f04f 0000 	mov.w	r0, #0
 8083f3a:	e01c      	b.n	8083f76 <__aeabi_l2f+0x2a>

08083f3c <__aeabi_ul2f>:
 8083f3c:	ea50 0201 	orrs.w	r2, r0, r1
 8083f40:	bf08      	it	eq
 8083f42:	4770      	bxeq	lr
 8083f44:	f04f 0300 	mov.w	r3, #0
 8083f48:	e00a      	b.n	8083f60 <__aeabi_l2f+0x14>
 8083f4a:	bf00      	nop

08083f4c <__aeabi_l2f>:
 8083f4c:	ea50 0201 	orrs.w	r2, r0, r1
 8083f50:	bf08      	it	eq
 8083f52:	4770      	bxeq	lr
 8083f54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083f58:	d502      	bpl.n	8083f60 <__aeabi_l2f+0x14>
 8083f5a:	4240      	negs	r0, r0
 8083f5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083f60:	ea5f 0c01 	movs.w	ip, r1
 8083f64:	bf02      	ittt	eq
 8083f66:	4684      	moveq	ip, r0
 8083f68:	4601      	moveq	r1, r0
 8083f6a:	2000      	moveq	r0, #0
 8083f6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083f70:	bf08      	it	eq
 8083f72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083f76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083f7a:	fabc f28c 	clz	r2, ip
 8083f7e:	3a08      	subs	r2, #8
 8083f80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083f84:	db10      	blt.n	8083fa8 <__aeabi_l2f+0x5c>
 8083f86:	fa01 fc02 	lsl.w	ip, r1, r2
 8083f8a:	4463      	add	r3, ip
 8083f8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8083f90:	f1c2 0220 	rsb	r2, r2, #32
 8083f94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083f98:	fa20 f202 	lsr.w	r2, r0, r2
 8083f9c:	eb43 0002 	adc.w	r0, r3, r2
 8083fa0:	bf08      	it	eq
 8083fa2:	f020 0001 	biceq.w	r0, r0, #1
 8083fa6:	4770      	bx	lr
 8083fa8:	f102 0220 	add.w	r2, r2, #32
 8083fac:	fa01 fc02 	lsl.w	ip, r1, r2
 8083fb0:	f1c2 0220 	rsb	r2, r2, #32
 8083fb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8083fb8:	fa21 f202 	lsr.w	r2, r1, r2
 8083fbc:	eb43 0002 	adc.w	r0, r3, r2
 8083fc0:	bf08      	it	eq
 8083fc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083fc6:	4770      	bx	lr

08083fc8 <__aeabi_fmul>:
 8083fc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083fcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083fd0:	bf1e      	ittt	ne
 8083fd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083fd6:	ea92 0f0c 	teqne	r2, ip
 8083fda:	ea93 0f0c 	teqne	r3, ip
 8083fde:	d06f      	beq.n	80840c0 <__aeabi_fmul+0xf8>
 8083fe0:	441a      	add	r2, r3
 8083fe2:	ea80 0c01 	eor.w	ip, r0, r1
 8083fe6:	0240      	lsls	r0, r0, #9
 8083fe8:	bf18      	it	ne
 8083fea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8083fee:	d01e      	beq.n	808402e <__aeabi_fmul+0x66>
 8083ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8083ff4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8083ff8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8083ffc:	fba0 3101 	umull	r3, r1, r0, r1
 8084000:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084004:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8084008:	bf3e      	ittt	cc
 808400a:	0049      	lslcc	r1, r1, #1
 808400c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084010:	005b      	lslcc	r3, r3, #1
 8084012:	ea40 0001 	orr.w	r0, r0, r1
 8084016:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808401a:	2afd      	cmp	r2, #253	; 0xfd
 808401c:	d81d      	bhi.n	808405a <__aeabi_fmul+0x92>
 808401e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8084022:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084026:	bf08      	it	eq
 8084028:	f020 0001 	biceq.w	r0, r0, #1
 808402c:	4770      	bx	lr
 808402e:	f090 0f00 	teq	r0, #0
 8084032:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084036:	bf08      	it	eq
 8084038:	0249      	lsleq	r1, r1, #9
 808403a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808403e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8084042:	3a7f      	subs	r2, #127	; 0x7f
 8084044:	bfc2      	ittt	gt
 8084046:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808404a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808404e:	4770      	bxgt	lr
 8084050:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084054:	f04f 0300 	mov.w	r3, #0
 8084058:	3a01      	subs	r2, #1
 808405a:	dc5d      	bgt.n	8084118 <__aeabi_fmul+0x150>
 808405c:	f112 0f19 	cmn.w	r2, #25
 8084060:	bfdc      	itt	le
 8084062:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8084066:	4770      	bxle	lr
 8084068:	f1c2 0200 	rsb	r2, r2, #0
 808406c:	0041      	lsls	r1, r0, #1
 808406e:	fa21 f102 	lsr.w	r1, r1, r2
 8084072:	f1c2 0220 	rsb	r2, r2, #32
 8084076:	fa00 fc02 	lsl.w	ip, r0, r2
 808407a:	ea5f 0031 	movs.w	r0, r1, rrx
 808407e:	f140 0000 	adc.w	r0, r0, #0
 8084082:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8084086:	bf08      	it	eq
 8084088:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808408c:	4770      	bx	lr
 808408e:	f092 0f00 	teq	r2, #0
 8084092:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084096:	bf02      	ittt	eq
 8084098:	0040      	lsleq	r0, r0, #1
 808409a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808409e:	3a01      	subeq	r2, #1
 80840a0:	d0f9      	beq.n	8084096 <__aeabi_fmul+0xce>
 80840a2:	ea40 000c 	orr.w	r0, r0, ip
 80840a6:	f093 0f00 	teq	r3, #0
 80840aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80840ae:	bf02      	ittt	eq
 80840b0:	0049      	lsleq	r1, r1, #1
 80840b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80840b6:	3b01      	subeq	r3, #1
 80840b8:	d0f9      	beq.n	80840ae <__aeabi_fmul+0xe6>
 80840ba:	ea41 010c 	orr.w	r1, r1, ip
 80840be:	e78f      	b.n	8083fe0 <__aeabi_fmul+0x18>
 80840c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80840c4:	ea92 0f0c 	teq	r2, ip
 80840c8:	bf18      	it	ne
 80840ca:	ea93 0f0c 	teqne	r3, ip
 80840ce:	d00a      	beq.n	80840e6 <__aeabi_fmul+0x11e>
 80840d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80840d4:	bf18      	it	ne
 80840d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80840da:	d1d8      	bne.n	808408e <__aeabi_fmul+0xc6>
 80840dc:	ea80 0001 	eor.w	r0, r0, r1
 80840e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80840e4:	4770      	bx	lr
 80840e6:	f090 0f00 	teq	r0, #0
 80840ea:	bf17      	itett	ne
 80840ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80840f0:	4608      	moveq	r0, r1
 80840f2:	f091 0f00 	teqne	r1, #0
 80840f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80840fa:	d014      	beq.n	8084126 <__aeabi_fmul+0x15e>
 80840fc:	ea92 0f0c 	teq	r2, ip
 8084100:	d101      	bne.n	8084106 <__aeabi_fmul+0x13e>
 8084102:	0242      	lsls	r2, r0, #9
 8084104:	d10f      	bne.n	8084126 <__aeabi_fmul+0x15e>
 8084106:	ea93 0f0c 	teq	r3, ip
 808410a:	d103      	bne.n	8084114 <__aeabi_fmul+0x14c>
 808410c:	024b      	lsls	r3, r1, #9
 808410e:	bf18      	it	ne
 8084110:	4608      	movne	r0, r1
 8084112:	d108      	bne.n	8084126 <__aeabi_fmul+0x15e>
 8084114:	ea80 0001 	eor.w	r0, r0, r1
 8084118:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808411c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084120:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084124:	4770      	bx	lr
 8084126:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808412a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808412e:	4770      	bx	lr

08084130 <__aeabi_fdiv>:
 8084130:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084134:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084138:	bf1e      	ittt	ne
 808413a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808413e:	ea92 0f0c 	teqne	r2, ip
 8084142:	ea93 0f0c 	teqne	r3, ip
 8084146:	d069      	beq.n	808421c <__aeabi_fdiv+0xec>
 8084148:	eba2 0203 	sub.w	r2, r2, r3
 808414c:	ea80 0c01 	eor.w	ip, r0, r1
 8084150:	0249      	lsls	r1, r1, #9
 8084152:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8084156:	d037      	beq.n	80841c8 <__aeabi_fdiv+0x98>
 8084158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808415c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8084160:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8084164:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084168:	428b      	cmp	r3, r1
 808416a:	bf38      	it	cc
 808416c:	005b      	lslcc	r3, r3, #1
 808416e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8084172:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8084176:	428b      	cmp	r3, r1
 8084178:	bf24      	itt	cs
 808417a:	1a5b      	subcs	r3, r3, r1
 808417c:	ea40 000c 	orrcs.w	r0, r0, ip
 8084180:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084184:	bf24      	itt	cs
 8084186:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808418a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808418e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084192:	bf24      	itt	cs
 8084194:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8084198:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808419c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80841a0:	bf24      	itt	cs
 80841a2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80841a6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80841aa:	011b      	lsls	r3, r3, #4
 80841ac:	bf18      	it	ne
 80841ae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80841b2:	d1e0      	bne.n	8084176 <__aeabi_fdiv+0x46>
 80841b4:	2afd      	cmp	r2, #253	; 0xfd
 80841b6:	f63f af50 	bhi.w	808405a <__aeabi_fmul+0x92>
 80841ba:	428b      	cmp	r3, r1
 80841bc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80841c0:	bf08      	it	eq
 80841c2:	f020 0001 	biceq.w	r0, r0, #1
 80841c6:	4770      	bx	lr
 80841c8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80841cc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80841d0:	327f      	adds	r2, #127	; 0x7f
 80841d2:	bfc2      	ittt	gt
 80841d4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80841d8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80841dc:	4770      	bxgt	lr
 80841de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80841e2:	f04f 0300 	mov.w	r3, #0
 80841e6:	3a01      	subs	r2, #1
 80841e8:	e737      	b.n	808405a <__aeabi_fmul+0x92>
 80841ea:	f092 0f00 	teq	r2, #0
 80841ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80841f2:	bf02      	ittt	eq
 80841f4:	0040      	lsleq	r0, r0, #1
 80841f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80841fa:	3a01      	subeq	r2, #1
 80841fc:	d0f9      	beq.n	80841f2 <__aeabi_fdiv+0xc2>
 80841fe:	ea40 000c 	orr.w	r0, r0, ip
 8084202:	f093 0f00 	teq	r3, #0
 8084206:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808420a:	bf02      	ittt	eq
 808420c:	0049      	lsleq	r1, r1, #1
 808420e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084212:	3b01      	subeq	r3, #1
 8084214:	d0f9      	beq.n	808420a <__aeabi_fdiv+0xda>
 8084216:	ea41 010c 	orr.w	r1, r1, ip
 808421a:	e795      	b.n	8084148 <__aeabi_fdiv+0x18>
 808421c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084220:	ea92 0f0c 	teq	r2, ip
 8084224:	d108      	bne.n	8084238 <__aeabi_fdiv+0x108>
 8084226:	0242      	lsls	r2, r0, #9
 8084228:	f47f af7d 	bne.w	8084126 <__aeabi_fmul+0x15e>
 808422c:	ea93 0f0c 	teq	r3, ip
 8084230:	f47f af70 	bne.w	8084114 <__aeabi_fmul+0x14c>
 8084234:	4608      	mov	r0, r1
 8084236:	e776      	b.n	8084126 <__aeabi_fmul+0x15e>
 8084238:	ea93 0f0c 	teq	r3, ip
 808423c:	d104      	bne.n	8084248 <__aeabi_fdiv+0x118>
 808423e:	024b      	lsls	r3, r1, #9
 8084240:	f43f af4c 	beq.w	80840dc <__aeabi_fmul+0x114>
 8084244:	4608      	mov	r0, r1
 8084246:	e76e      	b.n	8084126 <__aeabi_fmul+0x15e>
 8084248:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808424c:	bf18      	it	ne
 808424e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084252:	d1ca      	bne.n	80841ea <__aeabi_fdiv+0xba>
 8084254:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8084258:	f47f af5c 	bne.w	8084114 <__aeabi_fmul+0x14c>
 808425c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8084260:	f47f af3c 	bne.w	80840dc <__aeabi_fmul+0x114>
 8084264:	e75f      	b.n	8084126 <__aeabi_fmul+0x15e>
 8084266:	bf00      	nop

08084268 <__gesf2>:
 8084268:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 808426c:	e006      	b.n	808427c <__cmpsf2+0x4>
 808426e:	bf00      	nop

08084270 <__lesf2>:
 8084270:	f04f 0c01 	mov.w	ip, #1
 8084274:	e002      	b.n	808427c <__cmpsf2+0x4>
 8084276:	bf00      	nop

08084278 <__cmpsf2>:
 8084278:	f04f 0c01 	mov.w	ip, #1
 808427c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084280:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084284:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084288:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808428c:	bf18      	it	ne
 808428e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084292:	d011      	beq.n	80842b8 <__cmpsf2+0x40>
 8084294:	b001      	add	sp, #4
 8084296:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808429a:	bf18      	it	ne
 808429c:	ea90 0f01 	teqne	r0, r1
 80842a0:	bf58      	it	pl
 80842a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80842a6:	bf88      	it	hi
 80842a8:	17c8      	asrhi	r0, r1, #31
 80842aa:	bf38      	it	cc
 80842ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80842b0:	bf18      	it	ne
 80842b2:	f040 0001 	orrne.w	r0, r0, #1
 80842b6:	4770      	bx	lr
 80842b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80842bc:	d102      	bne.n	80842c4 <__cmpsf2+0x4c>
 80842be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80842c2:	d105      	bne.n	80842d0 <__cmpsf2+0x58>
 80842c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80842c8:	d1e4      	bne.n	8084294 <__cmpsf2+0x1c>
 80842ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80842ce:	d0e1      	beq.n	8084294 <__cmpsf2+0x1c>
 80842d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80842d4:	4770      	bx	lr
 80842d6:	bf00      	nop

080842d8 <__aeabi_cfrcmple>:
 80842d8:	4684      	mov	ip, r0
 80842da:	4608      	mov	r0, r1
 80842dc:	4661      	mov	r1, ip
 80842de:	e7ff      	b.n	80842e0 <__aeabi_cfcmpeq>

080842e0 <__aeabi_cfcmpeq>:
 80842e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80842e2:	f7ff ffc9 	bl	8084278 <__cmpsf2>
 80842e6:	2800      	cmp	r0, #0
 80842e8:	bf48      	it	mi
 80842ea:	f110 0f00 	cmnmi.w	r0, #0
 80842ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080842f0 <__aeabi_fcmpeq>:
 80842f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80842f4:	f7ff fff4 	bl	80842e0 <__aeabi_cfcmpeq>
 80842f8:	bf0c      	ite	eq
 80842fa:	2001      	moveq	r0, #1
 80842fc:	2000      	movne	r0, #0
 80842fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8084302:	bf00      	nop

08084304 <__aeabi_fcmplt>:
 8084304:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084308:	f7ff ffea 	bl	80842e0 <__aeabi_cfcmpeq>
 808430c:	bf34      	ite	cc
 808430e:	2001      	movcc	r0, #1
 8084310:	2000      	movcs	r0, #0
 8084312:	f85d fb08 	ldr.w	pc, [sp], #8
 8084316:	bf00      	nop

08084318 <__aeabi_fcmple>:
 8084318:	f84d ed08 	str.w	lr, [sp, #-8]!
 808431c:	f7ff ffe0 	bl	80842e0 <__aeabi_cfcmpeq>
 8084320:	bf94      	ite	ls
 8084322:	2001      	movls	r0, #1
 8084324:	2000      	movhi	r0, #0
 8084326:	f85d fb08 	ldr.w	pc, [sp], #8
 808432a:	bf00      	nop

0808432c <__aeabi_fcmpge>:
 808432c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084330:	f7ff ffd2 	bl	80842d8 <__aeabi_cfrcmple>
 8084334:	bf94      	ite	ls
 8084336:	2001      	movls	r0, #1
 8084338:	2000      	movhi	r0, #0
 808433a:	f85d fb08 	ldr.w	pc, [sp], #8
 808433e:	bf00      	nop

08084340 <__aeabi_fcmpgt>:
 8084340:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084344:	f7ff ffc8 	bl	80842d8 <__aeabi_cfrcmple>
 8084348:	bf34      	ite	cc
 808434a:	2001      	movcc	r0, #1
 808434c:	2000      	movcs	r0, #0
 808434e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084352:	bf00      	nop

08084354 <__aeabi_f2iz>:
 8084354:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084358:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808435c:	d30f      	bcc.n	808437e <__aeabi_f2iz+0x2a>
 808435e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8084362:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8084366:	d90d      	bls.n	8084384 <__aeabi_f2iz+0x30>
 8084368:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808436c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084370:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084374:	fa23 f002 	lsr.w	r0, r3, r2
 8084378:	bf18      	it	ne
 808437a:	4240      	negne	r0, r0
 808437c:	4770      	bx	lr
 808437e:	f04f 0000 	mov.w	r0, #0
 8084382:	4770      	bx	lr
 8084384:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8084388:	d101      	bne.n	808438e <__aeabi_f2iz+0x3a>
 808438a:	0242      	lsls	r2, r0, #9
 808438c:	d105      	bne.n	808439a <__aeabi_f2iz+0x46>
 808438e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8084392:	bf08      	it	eq
 8084394:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084398:	4770      	bx	lr
 808439a:	f04f 0000 	mov.w	r0, #0
 808439e:	4770      	bx	lr

080843a0 <asctime>:
 80843a0:	4b09      	ldr	r3, [pc, #36]	; (80843c8 <asctime+0x28>)
 80843a2:	b570      	push	{r4, r5, r6, lr}
 80843a4:	681c      	ldr	r4, [r3, #0]
 80843a6:	4606      	mov	r6, r0
 80843a8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80843aa:	b93d      	cbnz	r5, 80843bc <asctime+0x1c>
 80843ac:	201a      	movs	r0, #26
 80843ae:	f7fd fa7d 	bl	80818ac <malloc>
 80843b2:	221a      	movs	r2, #26
 80843b4:	6420      	str	r0, [r4, #64]	; 0x40
 80843b6:	4629      	mov	r1, r5
 80843b8:	f000 f943 	bl	8084642 <memset>
 80843bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80843be:	4630      	mov	r0, r6
 80843c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80843c4:	f000 b802 	b.w	80843cc <asctime_r>
 80843c8:	200004a0 	.word	0x200004a0

080843cc <asctime_r>:
 80843cc:	b510      	push	{r4, lr}
 80843ce:	460c      	mov	r4, r1
 80843d0:	6941      	ldr	r1, [r0, #20]
 80843d2:	b086      	sub	sp, #24
 80843d4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80843d8:	6903      	ldr	r3, [r0, #16]
 80843da:	6982      	ldr	r2, [r0, #24]
 80843dc:	9104      	str	r1, [sp, #16]
 80843de:	6801      	ldr	r1, [r0, #0]
 80843e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80843e4:	9103      	str	r1, [sp, #12]
 80843e6:	6841      	ldr	r1, [r0, #4]
 80843e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80843ec:	9102      	str	r1, [sp, #8]
 80843ee:	6881      	ldr	r1, [r0, #8]
 80843f0:	9101      	str	r1, [sp, #4]
 80843f2:	68c1      	ldr	r1, [r0, #12]
 80843f4:	4620      	mov	r0, r4
 80843f6:	9100      	str	r1, [sp, #0]
 80843f8:	4904      	ldr	r1, [pc, #16]	; (808440c <asctime_r+0x40>)
 80843fa:	440b      	add	r3, r1
 80843fc:	4904      	ldr	r1, [pc, #16]	; (8084410 <asctime_r+0x44>)
 80843fe:	440a      	add	r2, r1
 8084400:	4904      	ldr	r1, [pc, #16]	; (8084414 <asctime_r+0x48>)
 8084402:	f7fd fa6b 	bl	80818dc <siprintf>
 8084406:	4620      	mov	r0, r4
 8084408:	b006      	add	sp, #24
 808440a:	bd10      	pop	{r4, pc}
 808440c:	08085595 	.word	0x08085595
 8084410:	08085580 	.word	0x08085580
 8084414:	080855b9 	.word	0x080855b9

08084418 <atoi>:
 8084418:	220a      	movs	r2, #10
 808441a:	2100      	movs	r1, #0
 808441c:	f000 ba26 	b.w	808486c <strtol>

08084420 <__cxa_atexit>:
 8084420:	b510      	push	{r4, lr}
 8084422:	4c05      	ldr	r4, [pc, #20]	; (8084438 <__cxa_atexit+0x18>)
 8084424:	4613      	mov	r3, r2
 8084426:	b12c      	cbz	r4, 8084434 <__cxa_atexit+0x14>
 8084428:	460a      	mov	r2, r1
 808442a:	4601      	mov	r1, r0
 808442c:	2002      	movs	r0, #2
 808442e:	f3af 8000 	nop.w
 8084432:	bd10      	pop	{r4, pc}
 8084434:	4620      	mov	r0, r4
 8084436:	bd10      	pop	{r4, pc}
 8084438:	00000000 	.word	0x00000000

0808443c <localtime>:
 808443c:	b538      	push	{r3, r4, r5, lr}
 808443e:	4b07      	ldr	r3, [pc, #28]	; (808445c <localtime+0x20>)
 8084440:	4605      	mov	r5, r0
 8084442:	681c      	ldr	r4, [r3, #0]
 8084444:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084446:	b91b      	cbnz	r3, 8084450 <localtime+0x14>
 8084448:	2024      	movs	r0, #36	; 0x24
 808444a:	f7fd fa2f 	bl	80818ac <malloc>
 808444e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8084450:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8084452:	4628      	mov	r0, r5
 8084454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084458:	f000 b802 	b.w	8084460 <localtime_r>
 808445c:	200004a0 	.word	0x200004a0

08084460 <localtime_r>:
 8084460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084464:	460c      	mov	r4, r1
 8084466:	4680      	mov	r8, r0
 8084468:	f000 fd06 	bl	8084e78 <__gettzinfo>
 808446c:	4621      	mov	r1, r4
 808446e:	4607      	mov	r7, r0
 8084470:	4640      	mov	r0, r8
 8084472:	f000 fd05 	bl	8084e80 <gmtime_r>
 8084476:	6946      	ldr	r6, [r0, #20]
 8084478:	4604      	mov	r4, r0
 808447a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808447e:	07b3      	lsls	r3, r6, #30
 8084480:	d105      	bne.n	808448e <localtime_r+0x2e>
 8084482:	2264      	movs	r2, #100	; 0x64
 8084484:	fb96 f3f2 	sdiv	r3, r6, r2
 8084488:	fb02 6313 	mls	r3, r2, r3, r6
 808448c:	b94b      	cbnz	r3, 80844a2 <localtime_r+0x42>
 808448e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8084492:	fb96 f3f5 	sdiv	r3, r6, r5
 8084496:	fb05 6513 	mls	r5, r5, r3, r6
 808449a:	fab5 f385 	clz	r3, r5
 808449e:	095b      	lsrs	r3, r3, #5
 80844a0:	e000      	b.n	80844a4 <localtime_r+0x44>
 80844a2:	2301      	movs	r3, #1
 80844a4:	4a5f      	ldr	r2, [pc, #380]	; (8084624 <localtime_r+0x1c4>)
 80844a6:	2530      	movs	r5, #48	; 0x30
 80844a8:	fb05 2503 	mla	r5, r5, r3, r2
 80844ac:	f000 fb18 	bl	8084ae0 <__tz_lock>
 80844b0:	f000 fb18 	bl	8084ae4 <_tzset_unlocked>
 80844b4:	4b5c      	ldr	r3, [pc, #368]	; (8084628 <localtime_r+0x1c8>)
 80844b6:	681b      	ldr	r3, [r3, #0]
 80844b8:	b1f3      	cbz	r3, 80844f8 <localtime_r+0x98>
 80844ba:	687b      	ldr	r3, [r7, #4]
 80844bc:	429e      	cmp	r6, r3
 80844be:	d105      	bne.n	80844cc <localtime_r+0x6c>
 80844c0:	6839      	ldr	r1, [r7, #0]
 80844c2:	f8d8 3000 	ldr.w	r3, [r8]
 80844c6:	69fa      	ldr	r2, [r7, #28]
 80844c8:	b941      	cbnz	r1, 80844dc <localtime_r+0x7c>
 80844ca:	e00a      	b.n	80844e2 <localtime_r+0x82>
 80844cc:	4630      	mov	r0, r6
 80844ce:	f000 fa5f 	bl	8084990 <__tzcalc_limits>
 80844d2:	2800      	cmp	r0, #0
 80844d4:	d1f4      	bne.n	80844c0 <localtime_r+0x60>
 80844d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80844da:	e00d      	b.n	80844f8 <localtime_r+0x98>
 80844dc:	4293      	cmp	r3, r2
 80844de:	db08      	blt.n	80844f2 <localtime_r+0x92>
 80844e0:	e001      	b.n	80844e6 <localtime_r+0x86>
 80844e2:	4293      	cmp	r3, r2
 80844e4:	da07      	bge.n	80844f6 <localtime_r+0x96>
 80844e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80844e8:	4293      	cmp	r3, r2
 80844ea:	bfac      	ite	ge
 80844ec:	2300      	movge	r3, #0
 80844ee:	2301      	movlt	r3, #1
 80844f0:	e002      	b.n	80844f8 <localtime_r+0x98>
 80844f2:	2300      	movs	r3, #0
 80844f4:	e000      	b.n	80844f8 <localtime_r+0x98>
 80844f6:	2301      	movs	r3, #1
 80844f8:	6223      	str	r3, [r4, #32]
 80844fa:	6a23      	ldr	r3, [r4, #32]
 80844fc:	203c      	movs	r0, #60	; 0x3c
 80844fe:	2b01      	cmp	r3, #1
 8084500:	bf0c      	ite	eq
 8084502:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8084504:	6a39      	ldrne	r1, [r7, #32]
 8084506:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808450a:	fb91 f6f3 	sdiv	r6, r1, r3
 808450e:	fb03 1316 	mls	r3, r3, r6, r1
 8084512:	fb93 f2f0 	sdiv	r2, r3, r0
 8084516:	fb00 3012 	mls	r0, r0, r2, r3
 808451a:	6861      	ldr	r1, [r4, #4]
 808451c:	6823      	ldr	r3, [r4, #0]
 808451e:	1a89      	subs	r1, r1, r2
 8084520:	68a2      	ldr	r2, [r4, #8]
 8084522:	1a1b      	subs	r3, r3, r0
 8084524:	1b92      	subs	r2, r2, r6
 8084526:	2b3b      	cmp	r3, #59	; 0x3b
 8084528:	6023      	str	r3, [r4, #0]
 808452a:	6061      	str	r1, [r4, #4]
 808452c:	60a2      	str	r2, [r4, #8]
 808452e:	dd03      	ble.n	8084538 <localtime_r+0xd8>
 8084530:	3101      	adds	r1, #1
 8084532:	6061      	str	r1, [r4, #4]
 8084534:	3b3c      	subs	r3, #60	; 0x3c
 8084536:	e004      	b.n	8084542 <localtime_r+0xe2>
 8084538:	2b00      	cmp	r3, #0
 808453a:	da03      	bge.n	8084544 <localtime_r+0xe4>
 808453c:	3901      	subs	r1, #1
 808453e:	6061      	str	r1, [r4, #4]
 8084540:	333c      	adds	r3, #60	; 0x3c
 8084542:	6023      	str	r3, [r4, #0]
 8084544:	6863      	ldr	r3, [r4, #4]
 8084546:	2b3b      	cmp	r3, #59	; 0x3b
 8084548:	dd03      	ble.n	8084552 <localtime_r+0xf2>
 808454a:	3201      	adds	r2, #1
 808454c:	60a2      	str	r2, [r4, #8]
 808454e:	3b3c      	subs	r3, #60	; 0x3c
 8084550:	e004      	b.n	808455c <localtime_r+0xfc>
 8084552:	2b00      	cmp	r3, #0
 8084554:	da03      	bge.n	808455e <localtime_r+0xfe>
 8084556:	3a01      	subs	r2, #1
 8084558:	60a2      	str	r2, [r4, #8]
 808455a:	333c      	adds	r3, #60	; 0x3c
 808455c:	6063      	str	r3, [r4, #4]
 808455e:	68a3      	ldr	r3, [r4, #8]
 8084560:	2b17      	cmp	r3, #23
 8084562:	dd22      	ble.n	80845aa <localtime_r+0x14a>
 8084564:	69e2      	ldr	r2, [r4, #28]
 8084566:	3b18      	subs	r3, #24
 8084568:	3201      	adds	r2, #1
 808456a:	61e2      	str	r2, [r4, #28]
 808456c:	69a2      	ldr	r2, [r4, #24]
 808456e:	60a3      	str	r3, [r4, #8]
 8084570:	3201      	adds	r2, #1
 8084572:	2a06      	cmp	r2, #6
 8084574:	bfc8      	it	gt
 8084576:	2200      	movgt	r2, #0
 8084578:	61a2      	str	r2, [r4, #24]
 808457a:	68e2      	ldr	r2, [r4, #12]
 808457c:	6923      	ldr	r3, [r4, #16]
 808457e:	3201      	adds	r2, #1
 8084580:	60e2      	str	r2, [r4, #12]
 8084582:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8084586:	428a      	cmp	r2, r1
 8084588:	dd46      	ble.n	8084618 <localtime_r+0x1b8>
 808458a:	3301      	adds	r3, #1
 808458c:	2b0c      	cmp	r3, #12
 808458e:	bf08      	it	eq
 8084590:	6963      	ldreq	r3, [r4, #20]
 8084592:	eba2 0201 	sub.w	r2, r2, r1
 8084596:	60e2      	str	r2, [r4, #12]
 8084598:	bf05      	ittet	eq
 808459a:	3301      	addeq	r3, #1
 808459c:	2200      	moveq	r2, #0
 808459e:	6123      	strne	r3, [r4, #16]
 80845a0:	6122      	streq	r2, [r4, #16]
 80845a2:	bf04      	itt	eq
 80845a4:	6163      	streq	r3, [r4, #20]
 80845a6:	61e2      	streq	r2, [r4, #28]
 80845a8:	e036      	b.n	8084618 <localtime_r+0x1b8>
 80845aa:	2b00      	cmp	r3, #0
 80845ac:	da34      	bge.n	8084618 <localtime_r+0x1b8>
 80845ae:	69e2      	ldr	r2, [r4, #28]
 80845b0:	3318      	adds	r3, #24
 80845b2:	3a01      	subs	r2, #1
 80845b4:	61e2      	str	r2, [r4, #28]
 80845b6:	69a2      	ldr	r2, [r4, #24]
 80845b8:	60a3      	str	r3, [r4, #8]
 80845ba:	3a01      	subs	r2, #1
 80845bc:	bf48      	it	mi
 80845be:	2206      	movmi	r2, #6
 80845c0:	61a2      	str	r2, [r4, #24]
 80845c2:	68e2      	ldr	r2, [r4, #12]
 80845c4:	3a01      	subs	r2, #1
 80845c6:	60e2      	str	r2, [r4, #12]
 80845c8:	bb32      	cbnz	r2, 8084618 <localtime_r+0x1b8>
 80845ca:	6923      	ldr	r3, [r4, #16]
 80845cc:	3b01      	subs	r3, #1
 80845ce:	d401      	bmi.n	80845d4 <localtime_r+0x174>
 80845d0:	6123      	str	r3, [r4, #16]
 80845d2:	e01d      	b.n	8084610 <localtime_r+0x1b0>
 80845d4:	230b      	movs	r3, #11
 80845d6:	6123      	str	r3, [r4, #16]
 80845d8:	6963      	ldr	r3, [r4, #20]
 80845da:	1e5a      	subs	r2, r3, #1
 80845dc:	f012 0f03 	tst.w	r2, #3
 80845e0:	6162      	str	r2, [r4, #20]
 80845e2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80845e6:	d105      	bne.n	80845f4 <localtime_r+0x194>
 80845e8:	2164      	movs	r1, #100	; 0x64
 80845ea:	fb93 f2f1 	sdiv	r2, r3, r1
 80845ee:	fb01 3212 	mls	r2, r1, r2, r3
 80845f2:	b94a      	cbnz	r2, 8084608 <localtime_r+0x1a8>
 80845f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80845f8:	fb93 f2f1 	sdiv	r2, r3, r1
 80845fc:	fb01 3312 	mls	r3, r1, r2, r3
 8084600:	fab3 f383 	clz	r3, r3
 8084604:	095b      	lsrs	r3, r3, #5
 8084606:	e000      	b.n	808460a <localtime_r+0x1aa>
 8084608:	2301      	movs	r3, #1
 808460a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808460e:	61e3      	str	r3, [r4, #28]
 8084610:	6923      	ldr	r3, [r4, #16]
 8084612:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8084616:	60e3      	str	r3, [r4, #12]
 8084618:	f000 fa63 	bl	8084ae2 <__tz_unlock>
 808461c:	4620      	mov	r0, r4
 808461e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084622:	bf00      	nop
 8084624:	0808573c 	.word	0x0808573c
 8084628:	20000c4c 	.word	0x20000c4c

0808462c <memcpy>:
 808462c:	b510      	push	{r4, lr}
 808462e:	1e43      	subs	r3, r0, #1
 8084630:	440a      	add	r2, r1
 8084632:	4291      	cmp	r1, r2
 8084634:	d004      	beq.n	8084640 <memcpy+0x14>
 8084636:	f811 4b01 	ldrb.w	r4, [r1], #1
 808463a:	f803 4f01 	strb.w	r4, [r3, #1]!
 808463e:	e7f8      	b.n	8084632 <memcpy+0x6>
 8084640:	bd10      	pop	{r4, pc}

08084642 <memset>:
 8084642:	4603      	mov	r3, r0
 8084644:	4402      	add	r2, r0
 8084646:	4293      	cmp	r3, r2
 8084648:	d002      	beq.n	8084650 <memset+0xe>
 808464a:	f803 1b01 	strb.w	r1, [r3], #1
 808464e:	e7fa      	b.n	8084646 <memset+0x4>
 8084650:	4770      	bx	lr
	...

08084654 <srand>:
 8084654:	b538      	push	{r3, r4, r5, lr}
 8084656:	4b12      	ldr	r3, [pc, #72]	; (80846a0 <srand+0x4c>)
 8084658:	4605      	mov	r5, r0
 808465a:	681c      	ldr	r4, [r3, #0]
 808465c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808465e:	b9d3      	cbnz	r3, 8084696 <srand+0x42>
 8084660:	2018      	movs	r0, #24
 8084662:	f7fd f923 	bl	80818ac <malloc>
 8084666:	f243 330e 	movw	r3, #13070	; 0x330e
 808466a:	63a0      	str	r0, [r4, #56]	; 0x38
 808466c:	8003      	strh	r3, [r0, #0]
 808466e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8084672:	8043      	strh	r3, [r0, #2]
 8084674:	f241 2334 	movw	r3, #4660	; 0x1234
 8084678:	8083      	strh	r3, [r0, #4]
 808467a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808467e:	80c3      	strh	r3, [r0, #6]
 8084680:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8084684:	8103      	strh	r3, [r0, #8]
 8084686:	2305      	movs	r3, #5
 8084688:	8143      	strh	r3, [r0, #10]
 808468a:	230b      	movs	r3, #11
 808468c:	8183      	strh	r3, [r0, #12]
 808468e:	2201      	movs	r2, #1
 8084690:	2300      	movs	r3, #0
 8084692:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8084696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084698:	2200      	movs	r2, #0
 808469a:	611d      	str	r5, [r3, #16]
 808469c:	615a      	str	r2, [r3, #20]
 808469e:	bd38      	pop	{r3, r4, r5, pc}
 80846a0:	200004a0 	.word	0x200004a0

080846a4 <strcmp>:
 80846a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80846a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80846ac:	2a01      	cmp	r2, #1
 80846ae:	bf28      	it	cs
 80846b0:	429a      	cmpcs	r2, r3
 80846b2:	d0f7      	beq.n	80846a4 <strcmp>
 80846b4:	1ad0      	subs	r0, r2, r3
 80846b6:	4770      	bx	lr

080846b8 <strcpy>:
 80846b8:	4603      	mov	r3, r0
 80846ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80846be:	f803 2b01 	strb.w	r2, [r3], #1
 80846c2:	2a00      	cmp	r2, #0
 80846c4:	d1f9      	bne.n	80846ba <strcpy+0x2>
 80846c6:	4770      	bx	lr

080846c8 <strdup>:
 80846c8:	4b02      	ldr	r3, [pc, #8]	; (80846d4 <strdup+0xc>)
 80846ca:	4601      	mov	r1, r0
 80846cc:	6818      	ldr	r0, [r3, #0]
 80846ce:	f000 b803 	b.w	80846d8 <_strdup_r>
 80846d2:	bf00      	nop
 80846d4:	200004a0 	.word	0x200004a0

080846d8 <_strdup_r>:
 80846d8:	b570      	push	{r4, r5, r6, lr}
 80846da:	4606      	mov	r6, r0
 80846dc:	4608      	mov	r0, r1
 80846de:	460c      	mov	r4, r1
 80846e0:	f000 f80d 	bl	80846fe <strlen>
 80846e4:	1c45      	adds	r5, r0, #1
 80846e6:	4629      	mov	r1, r5
 80846e8:	4630      	mov	r0, r6
 80846ea:	f7fd f917 	bl	808191c <_malloc_r>
 80846ee:	4606      	mov	r6, r0
 80846f0:	b118      	cbz	r0, 80846fa <_strdup_r+0x22>
 80846f2:	462a      	mov	r2, r5
 80846f4:	4621      	mov	r1, r4
 80846f6:	f7ff ff99 	bl	808462c <memcpy>
 80846fa:	4630      	mov	r0, r6
 80846fc:	bd70      	pop	{r4, r5, r6, pc}

080846fe <strlen>:
 80846fe:	4603      	mov	r3, r0
 8084700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084704:	2a00      	cmp	r2, #0
 8084706:	d1fb      	bne.n	8084700 <strlen+0x2>
 8084708:	1a18      	subs	r0, r3, r0
 808470a:	3801      	subs	r0, #1
 808470c:	4770      	bx	lr

0808470e <strncmp>:
 808470e:	b530      	push	{r4, r5, lr}
 8084710:	b182      	cbz	r2, 8084734 <strncmp+0x26>
 8084712:	1e45      	subs	r5, r0, #1
 8084714:	3901      	subs	r1, #1
 8084716:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808471a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808471e:	42a3      	cmp	r3, r4
 8084720:	d106      	bne.n	8084730 <strncmp+0x22>
 8084722:	43ec      	mvns	r4, r5
 8084724:	4414      	add	r4, r2
 8084726:	42e0      	cmn	r0, r4
 8084728:	d001      	beq.n	808472e <strncmp+0x20>
 808472a:	2b00      	cmp	r3, #0
 808472c:	d1f3      	bne.n	8084716 <strncmp+0x8>
 808472e:	461c      	mov	r4, r3
 8084730:	1b18      	subs	r0, r3, r4
 8084732:	bd30      	pop	{r4, r5, pc}
 8084734:	4610      	mov	r0, r2
 8084736:	bd30      	pop	{r4, r5, pc}

08084738 <strncpy>:
 8084738:	4603      	mov	r3, r0
 808473a:	b510      	push	{r4, lr}
 808473c:	b142      	cbz	r2, 8084750 <strncpy+0x18>
 808473e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084742:	3a01      	subs	r2, #1
 8084744:	f803 4b01 	strb.w	r4, [r3], #1
 8084748:	2c00      	cmp	r4, #0
 808474a:	d1f7      	bne.n	808473c <strncpy+0x4>
 808474c:	441a      	add	r2, r3
 808474e:	e000      	b.n	8084752 <strncpy+0x1a>
 8084750:	bd10      	pop	{r4, pc}
 8084752:	4293      	cmp	r3, r2
 8084754:	d002      	beq.n	808475c <strncpy+0x24>
 8084756:	f803 4b01 	strb.w	r4, [r3], #1
 808475a:	e7fa      	b.n	8084752 <strncpy+0x1a>
 808475c:	bd10      	pop	{r4, pc}
	...

08084760 <_strtol_r>:
 8084760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084764:	460f      	mov	r7, r1
 8084766:	4680      	mov	r8, r0
 8084768:	483f      	ldr	r0, [pc, #252]	; (8084868 <_strtol_r+0x108>)
 808476a:	f8d0 9000 	ldr.w	r9, [r0]
 808476e:	463d      	mov	r5, r7
 8084770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084774:	eb09 0004 	add.w	r0, r9, r4
 8084778:	7840      	ldrb	r0, [r0, #1]
 808477a:	f000 0008 	and.w	r0, r0, #8
 808477e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8084782:	b108      	cbz	r0, 8084788 <_strtol_r+0x28>
 8084784:	462f      	mov	r7, r5
 8084786:	e7f2      	b.n	808476e <_strtol_r+0xe>
 8084788:	2c2d      	cmp	r4, #45	; 0x2d
 808478a:	d103      	bne.n	8084794 <_strtol_r+0x34>
 808478c:	1cbd      	adds	r5, r7, #2
 808478e:	787c      	ldrb	r4, [r7, #1]
 8084790:	2601      	movs	r6, #1
 8084792:	e003      	b.n	808479c <_strtol_r+0x3c>
 8084794:	2c2b      	cmp	r4, #43	; 0x2b
 8084796:	bf04      	itt	eq
 8084798:	787c      	ldrbeq	r4, [r7, #1]
 808479a:	1cbd      	addeq	r5, r7, #2
 808479c:	b113      	cbz	r3, 80847a4 <_strtol_r+0x44>
 808479e:	2b10      	cmp	r3, #16
 80847a0:	d10a      	bne.n	80847b8 <_strtol_r+0x58>
 80847a2:	e05b      	b.n	808485c <_strtol_r+0xfc>
 80847a4:	2c30      	cmp	r4, #48	; 0x30
 80847a6:	d157      	bne.n	8084858 <_strtol_r+0xf8>
 80847a8:	7828      	ldrb	r0, [r5, #0]
 80847aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80847ae:	2858      	cmp	r0, #88	; 0x58
 80847b0:	d14d      	bne.n	808484e <_strtol_r+0xee>
 80847b2:	786c      	ldrb	r4, [r5, #1]
 80847b4:	2310      	movs	r3, #16
 80847b6:	3502      	adds	r5, #2
 80847b8:	2e00      	cmp	r6, #0
 80847ba:	bf14      	ite	ne
 80847bc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80847c0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80847c4:	fbbc faf3 	udiv	sl, ip, r3
 80847c8:	2700      	movs	r7, #0
 80847ca:	4638      	mov	r0, r7
 80847cc:	fb03 cc1a 	mls	ip, r3, sl, ip
 80847d0:	eb09 0e04 	add.w	lr, r9, r4
 80847d4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80847d8:	f01e 0f04 	tst.w	lr, #4
 80847dc:	d001      	beq.n	80847e2 <_strtol_r+0x82>
 80847de:	3c30      	subs	r4, #48	; 0x30
 80847e0:	e00b      	b.n	80847fa <_strtol_r+0x9a>
 80847e2:	f01e 0e03 	ands.w	lr, lr, #3
 80847e6:	d01b      	beq.n	8084820 <_strtol_r+0xc0>
 80847e8:	f1be 0f01 	cmp.w	lr, #1
 80847ec:	bf0c      	ite	eq
 80847ee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80847f2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80847f6:	ebce 0404 	rsb	r4, lr, r4
 80847fa:	42a3      	cmp	r3, r4
 80847fc:	dd10      	ble.n	8084820 <_strtol_r+0xc0>
 80847fe:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8084802:	d00a      	beq.n	808481a <_strtol_r+0xba>
 8084804:	4550      	cmp	r0, sl
 8084806:	d806      	bhi.n	8084816 <_strtol_r+0xb6>
 8084808:	d101      	bne.n	808480e <_strtol_r+0xae>
 808480a:	4564      	cmp	r4, ip
 808480c:	dc03      	bgt.n	8084816 <_strtol_r+0xb6>
 808480e:	fb03 4000 	mla	r0, r3, r0, r4
 8084812:	2701      	movs	r7, #1
 8084814:	e001      	b.n	808481a <_strtol_r+0xba>
 8084816:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 808481a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808481e:	e7d7      	b.n	80847d0 <_strtol_r+0x70>
 8084820:	1c7b      	adds	r3, r7, #1
 8084822:	d10c      	bne.n	808483e <_strtol_r+0xde>
 8084824:	2e00      	cmp	r6, #0
 8084826:	f04f 0322 	mov.w	r3, #34	; 0x22
 808482a:	bf14      	ite	ne
 808482c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084830:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084834:	f8c8 3000 	str.w	r3, [r8]
 8084838:	b92a      	cbnz	r2, 8084846 <_strtol_r+0xe6>
 808483a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808483e:	b106      	cbz	r6, 8084842 <_strtol_r+0xe2>
 8084840:	4240      	negs	r0, r0
 8084842:	b172      	cbz	r2, 8084862 <_strtol_r+0x102>
 8084844:	b107      	cbz	r7, 8084848 <_strtol_r+0xe8>
 8084846:	1e69      	subs	r1, r5, #1
 8084848:	6011      	str	r1, [r2, #0]
 808484a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808484e:	2430      	movs	r4, #48	; 0x30
 8084850:	2b00      	cmp	r3, #0
 8084852:	d1b1      	bne.n	80847b8 <_strtol_r+0x58>
 8084854:	2308      	movs	r3, #8
 8084856:	e7af      	b.n	80847b8 <_strtol_r+0x58>
 8084858:	230a      	movs	r3, #10
 808485a:	e7ad      	b.n	80847b8 <_strtol_r+0x58>
 808485c:	2c30      	cmp	r4, #48	; 0x30
 808485e:	d0a3      	beq.n	80847a8 <_strtol_r+0x48>
 8084860:	e7aa      	b.n	80847b8 <_strtol_r+0x58>
 8084862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084866:	bf00      	nop
 8084868:	2000043c 	.word	0x2000043c

0808486c <strtol>:
 808486c:	4613      	mov	r3, r2
 808486e:	460a      	mov	r2, r1
 8084870:	4601      	mov	r1, r0
 8084872:	4802      	ldr	r0, [pc, #8]	; (808487c <strtol+0x10>)
 8084874:	6800      	ldr	r0, [r0, #0]
 8084876:	f7ff bf73 	b.w	8084760 <_strtol_r>
 808487a:	bf00      	nop
 808487c:	200004a0 	.word	0x200004a0

08084880 <_strtoul_r>:
 8084880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084884:	460e      	mov	r6, r1
 8084886:	4680      	mov	r8, r0
 8084888:	483b      	ldr	r0, [pc, #236]	; (8084978 <_strtoul_r+0xf8>)
 808488a:	f8d0 9000 	ldr.w	r9, [r0]
 808488e:	4635      	mov	r5, r6
 8084890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084894:	eb09 0004 	add.w	r0, r9, r4
 8084898:	7840      	ldrb	r0, [r0, #1]
 808489a:	f000 0008 	and.w	r0, r0, #8
 808489e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80848a2:	b108      	cbz	r0, 80848a8 <_strtoul_r+0x28>
 80848a4:	462e      	mov	r6, r5
 80848a6:	e7f2      	b.n	808488e <_strtoul_r+0xe>
 80848a8:	2c2d      	cmp	r4, #45	; 0x2d
 80848aa:	d103      	bne.n	80848b4 <_strtoul_r+0x34>
 80848ac:	1cb5      	adds	r5, r6, #2
 80848ae:	7874      	ldrb	r4, [r6, #1]
 80848b0:	2701      	movs	r7, #1
 80848b2:	e003      	b.n	80848bc <_strtoul_r+0x3c>
 80848b4:	2c2b      	cmp	r4, #43	; 0x2b
 80848b6:	bf04      	itt	eq
 80848b8:	7874      	ldrbeq	r4, [r6, #1]
 80848ba:	1cb5      	addeq	r5, r6, #2
 80848bc:	b113      	cbz	r3, 80848c4 <_strtoul_r+0x44>
 80848be:	2b10      	cmp	r3, #16
 80848c0:	d10a      	bne.n	80848d8 <_strtoul_r+0x58>
 80848c2:	e053      	b.n	808496c <_strtoul_r+0xec>
 80848c4:	2c30      	cmp	r4, #48	; 0x30
 80848c6:	d14f      	bne.n	8084968 <_strtoul_r+0xe8>
 80848c8:	7828      	ldrb	r0, [r5, #0]
 80848ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80848ce:	2858      	cmp	r0, #88	; 0x58
 80848d0:	d145      	bne.n	808495e <_strtoul_r+0xde>
 80848d2:	786c      	ldrb	r4, [r5, #1]
 80848d4:	2310      	movs	r3, #16
 80848d6:	3502      	adds	r5, #2
 80848d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80848dc:	fbbc fcf3 	udiv	ip, ip, r3
 80848e0:	fb03 fa0c 	mul.w	sl, r3, ip
 80848e4:	2600      	movs	r6, #0
 80848e6:	ea6f 0a0a 	mvn.w	sl, sl
 80848ea:	4630      	mov	r0, r6
 80848ec:	eb09 0e04 	add.w	lr, r9, r4
 80848f0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80848f4:	f01e 0f04 	tst.w	lr, #4
 80848f8:	d001      	beq.n	80848fe <_strtoul_r+0x7e>
 80848fa:	3c30      	subs	r4, #48	; 0x30
 80848fc:	e00b      	b.n	8084916 <_strtoul_r+0x96>
 80848fe:	f01e 0e03 	ands.w	lr, lr, #3
 8084902:	d01a      	beq.n	808493a <_strtoul_r+0xba>
 8084904:	f1be 0f01 	cmp.w	lr, #1
 8084908:	bf0c      	ite	eq
 808490a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808490e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084912:	ebce 0404 	rsb	r4, lr, r4
 8084916:	42a3      	cmp	r3, r4
 8084918:	dd0f      	ble.n	808493a <_strtoul_r+0xba>
 808491a:	2e00      	cmp	r6, #0
 808491c:	db08      	blt.n	8084930 <_strtoul_r+0xb0>
 808491e:	4560      	cmp	r0, ip
 8084920:	d806      	bhi.n	8084930 <_strtoul_r+0xb0>
 8084922:	d101      	bne.n	8084928 <_strtoul_r+0xa8>
 8084924:	4554      	cmp	r4, sl
 8084926:	dc03      	bgt.n	8084930 <_strtoul_r+0xb0>
 8084928:	fb03 4000 	mla	r0, r3, r0, r4
 808492c:	2601      	movs	r6, #1
 808492e:	e001      	b.n	8084934 <_strtoul_r+0xb4>
 8084930:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8084934:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084938:	e7d8      	b.n	80848ec <_strtoul_r+0x6c>
 808493a:	2e00      	cmp	r6, #0
 808493c:	da07      	bge.n	808494e <_strtoul_r+0xce>
 808493e:	2322      	movs	r3, #34	; 0x22
 8084940:	f8c8 3000 	str.w	r3, [r8]
 8084944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084948:	b92a      	cbnz	r2, 8084956 <_strtoul_r+0xd6>
 808494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808494e:	b107      	cbz	r7, 8084952 <_strtoul_r+0xd2>
 8084950:	4240      	negs	r0, r0
 8084952:	b172      	cbz	r2, 8084972 <_strtoul_r+0xf2>
 8084954:	b106      	cbz	r6, 8084958 <_strtoul_r+0xd8>
 8084956:	1e69      	subs	r1, r5, #1
 8084958:	6011      	str	r1, [r2, #0]
 808495a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808495e:	2430      	movs	r4, #48	; 0x30
 8084960:	2b00      	cmp	r3, #0
 8084962:	d1b9      	bne.n	80848d8 <_strtoul_r+0x58>
 8084964:	2308      	movs	r3, #8
 8084966:	e7b7      	b.n	80848d8 <_strtoul_r+0x58>
 8084968:	230a      	movs	r3, #10
 808496a:	e7b5      	b.n	80848d8 <_strtoul_r+0x58>
 808496c:	2c30      	cmp	r4, #48	; 0x30
 808496e:	d0ab      	beq.n	80848c8 <_strtoul_r+0x48>
 8084970:	e7b2      	b.n	80848d8 <_strtoul_r+0x58>
 8084972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084976:	bf00      	nop
 8084978:	2000043c 	.word	0x2000043c

0808497c <strtoul>:
 808497c:	4613      	mov	r3, r2
 808497e:	460a      	mov	r2, r1
 8084980:	4601      	mov	r1, r0
 8084982:	4802      	ldr	r0, [pc, #8]	; (808498c <strtoul+0x10>)
 8084984:	6800      	ldr	r0, [r0, #0]
 8084986:	f7ff bf7b 	b.w	8084880 <_strtoul_r>
 808498a:	bf00      	nop
 808498c:	200004a0 	.word	0x200004a0

08084990 <__tzcalc_limits>:
 8084990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084994:	4604      	mov	r4, r0
 8084996:	f000 fa6f 	bl	8084e78 <__gettzinfo>
 808499a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808499e:	429c      	cmp	r4, r3
 80849a0:	f340 8096 	ble.w	8084ad0 <__tzcalc_limits+0x140>
 80849a4:	f240 156d 	movw	r5, #365	; 0x16d
 80849a8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80849ac:	18e3      	adds	r3, r4, r3
 80849ae:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80849b2:	109b      	asrs	r3, r3, #2
 80849b4:	fb05 3502 	mla	r5, r5, r2, r3
 80849b8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80849bc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80849c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80849c4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80849c8:	442b      	add	r3, r5
 80849ca:	18a5      	adds	r5, r4, r2
 80849cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80849d0:	fb94 f7f2 	sdiv	r7, r4, r2
 80849d4:	fb95 f5f2 	sdiv	r5, r5, r2
 80849d8:	fb02 4717 	mls	r7, r2, r7, r4
 80849dc:	441d      	add	r5, r3
 80849de:	2364      	movs	r3, #100	; 0x64
 80849e0:	fb94 f6f3 	sdiv	r6, r4, r3
 80849e4:	fab7 fe87 	clz	lr, r7
 80849e8:	4601      	mov	r1, r0
 80849ea:	fb03 4616 	mls	r6, r3, r6, r4
 80849ee:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80849f2:	9301      	str	r3, [sp, #4]
 80849f4:	f004 0303 	and.w	r3, r4, #3
 80849f8:	6044      	str	r4, [r0, #4]
 80849fa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80849fe:	9300      	str	r3, [sp, #0]
 8084a00:	f04f 0c07 	mov.w	ip, #7
 8084a04:	7a0b      	ldrb	r3, [r1, #8]
 8084a06:	2b4a      	cmp	r3, #74	; 0x4a
 8084a08:	d10e      	bne.n	8084a28 <__tzcalc_limits+0x98>
 8084a0a:	694b      	ldr	r3, [r1, #20]
 8084a0c:	9a00      	ldr	r2, [sp, #0]
 8084a0e:	18ec      	adds	r4, r5, r3
 8084a10:	b902      	cbnz	r2, 8084a14 <__tzcalc_limits+0x84>
 8084a12:	b906      	cbnz	r6, 8084a16 <__tzcalc_limits+0x86>
 8084a14:	b927      	cbnz	r7, 8084a20 <__tzcalc_limits+0x90>
 8084a16:	2b3b      	cmp	r3, #59	; 0x3b
 8084a18:	bfd4      	ite	le
 8084a1a:	2300      	movle	r3, #0
 8084a1c:	2301      	movgt	r3, #1
 8084a1e:	e000      	b.n	8084a22 <__tzcalc_limits+0x92>
 8084a20:	2300      	movs	r3, #0
 8084a22:	4423      	add	r3, r4
 8084a24:	3b01      	subs	r3, #1
 8084a26:	e03f      	b.n	8084aa8 <__tzcalc_limits+0x118>
 8084a28:	2b44      	cmp	r3, #68	; 0x44
 8084a2a:	d102      	bne.n	8084a32 <__tzcalc_limits+0xa2>
 8084a2c:	694b      	ldr	r3, [r1, #20]
 8084a2e:	442b      	add	r3, r5
 8084a30:	e03a      	b.n	8084aa8 <__tzcalc_limits+0x118>
 8084a32:	9b00      	ldr	r3, [sp, #0]
 8084a34:	b92b      	cbnz	r3, 8084a42 <__tzcalc_limits+0xb2>
 8084a36:	2e00      	cmp	r6, #0
 8084a38:	bf0c      	ite	eq
 8084a3a:	46f0      	moveq	r8, lr
 8084a3c:	f04f 0801 	movne.w	r8, #1
 8084a40:	e000      	b.n	8084a44 <__tzcalc_limits+0xb4>
 8084a42:	46f0      	mov	r8, lr
 8084a44:	46a9      	mov	r9, r5
 8084a46:	4b24      	ldr	r3, [pc, #144]	; (8084ad8 <__tzcalc_limits+0x148>)
 8084a48:	2230      	movs	r2, #48	; 0x30
 8084a4a:	fb02 3808 	mla	r8, r2, r8, r3
 8084a4e:	68cc      	ldr	r4, [r1, #12]
 8084a50:	f1a8 0a04 	sub.w	sl, r8, #4
 8084a54:	2301      	movs	r3, #1
 8084a56:	42a3      	cmp	r3, r4
 8084a58:	da04      	bge.n	8084a64 <__tzcalc_limits+0xd4>
 8084a5a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8084a5e:	3301      	adds	r3, #1
 8084a60:	44d9      	add	r9, fp
 8084a62:	e7f8      	b.n	8084a56 <__tzcalc_limits+0xc6>
 8084a64:	f109 0304 	add.w	r3, r9, #4
 8084a68:	fb93 fbfc 	sdiv	fp, r3, ip
 8084a6c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8084a70:	ebca 0a03 	rsb	sl, sl, r3
 8084a74:	694b      	ldr	r3, [r1, #20]
 8084a76:	2c01      	cmp	r4, #1
 8084a78:	bfb8      	it	lt
 8084a7a:	2401      	movlt	r4, #1
 8084a7c:	ebb3 0a0a 	subs.w	sl, r3, sl
 8084a80:	690b      	ldr	r3, [r1, #16]
 8084a82:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8084a86:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8084a8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8084a8e:	bf48      	it	mi
 8084a90:	f10a 0a07 	addmi.w	sl, sl, #7
 8084a94:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084a98:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8084a9c:	4453      	add	r3, sl
 8084a9e:	42a3      	cmp	r3, r4
 8084aa0:	db01      	blt.n	8084aa6 <__tzcalc_limits+0x116>
 8084aa2:	3b07      	subs	r3, #7
 8084aa4:	e7fb      	b.n	8084a9e <__tzcalc_limits+0x10e>
 8084aa6:	444b      	add	r3, r9
 8084aa8:	698c      	ldr	r4, [r1, #24]
 8084aaa:	4a0c      	ldr	r2, [pc, #48]	; (8084adc <__tzcalc_limits+0x14c>)
 8084aac:	fb02 4303 	mla	r3, r2, r3, r4
 8084ab0:	6a0c      	ldr	r4, [r1, #32]
 8084ab2:	4423      	add	r3, r4
 8084ab4:	f841 3f1c 	str.w	r3, [r1, #28]!
 8084ab8:	9b01      	ldr	r3, [sp, #4]
 8084aba:	4299      	cmp	r1, r3
 8084abc:	d1a2      	bne.n	8084a04 <__tzcalc_limits+0x74>
 8084abe:	69c3      	ldr	r3, [r0, #28]
 8084ac0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8084ac2:	4293      	cmp	r3, r2
 8084ac4:	bfac      	ite	ge
 8084ac6:	2300      	movge	r3, #0
 8084ac8:	2301      	movlt	r3, #1
 8084aca:	6003      	str	r3, [r0, #0]
 8084acc:	2001      	movs	r0, #1
 8084ace:	e000      	b.n	8084ad2 <__tzcalc_limits+0x142>
 8084ad0:	2000      	movs	r0, #0
 8084ad2:	b003      	add	sp, #12
 8084ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084ad8:	0808573c 	.word	0x0808573c
 8084adc:	00015180 	.word	0x00015180

08084ae0 <__tz_lock>:
 8084ae0:	4770      	bx	lr

08084ae2 <__tz_unlock>:
 8084ae2:	4770      	bx	lr

08084ae4 <_tzset_unlocked>:
 8084ae4:	4b01      	ldr	r3, [pc, #4]	; (8084aec <_tzset_unlocked+0x8>)
 8084ae6:	6818      	ldr	r0, [r3, #0]
 8084ae8:	f000 b802 	b.w	8084af0 <_tzset_unlocked_r>
 8084aec:	200004a0 	.word	0x200004a0

08084af0 <_tzset_unlocked_r>:
 8084af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084af4:	b08d      	sub	sp, #52	; 0x34
 8084af6:	4607      	mov	r7, r0
 8084af8:	f000 f9be 	bl	8084e78 <__gettzinfo>
 8084afc:	49b0      	ldr	r1, [pc, #704]	; (8084dc0 <_tzset_unlocked_r+0x2d0>)
 8084afe:	4604      	mov	r4, r0
 8084b00:	4638      	mov	r0, r7
 8084b02:	f000 f9b1 	bl	8084e68 <_getenv_r>
 8084b06:	4eaf      	ldr	r6, [pc, #700]	; (8084dc4 <_tzset_unlocked_r+0x2d4>)
 8084b08:	4605      	mov	r5, r0
 8084b0a:	b960      	cbnz	r0, 8084b26 <_tzset_unlocked_r+0x36>
 8084b0c:	4bae      	ldr	r3, [pc, #696]	; (8084dc8 <_tzset_unlocked_r+0x2d8>)
 8084b0e:	4aaf      	ldr	r2, [pc, #700]	; (8084dcc <_tzset_unlocked_r+0x2dc>)
 8084b10:	6018      	str	r0, [r3, #0]
 8084b12:	4baf      	ldr	r3, [pc, #700]	; (8084dd0 <_tzset_unlocked_r+0x2e0>)
 8084b14:	6018      	str	r0, [r3, #0]
 8084b16:	4baf      	ldr	r3, [pc, #700]	; (8084dd4 <_tzset_unlocked_r+0x2e4>)
 8084b18:	6830      	ldr	r0, [r6, #0]
 8084b1a:	601a      	str	r2, [r3, #0]
 8084b1c:	605a      	str	r2, [r3, #4]
 8084b1e:	f7fc fecd 	bl	80818bc <free>
 8084b22:	6035      	str	r5, [r6, #0]
 8084b24:	e148      	b.n	8084db8 <_tzset_unlocked_r+0x2c8>
 8084b26:	6831      	ldr	r1, [r6, #0]
 8084b28:	b979      	cbnz	r1, 8084b4a <_tzset_unlocked_r+0x5a>
 8084b2a:	6830      	ldr	r0, [r6, #0]
 8084b2c:	f7fc fec6 	bl	80818bc <free>
 8084b30:	4628      	mov	r0, r5
 8084b32:	f7ff fde4 	bl	80846fe <strlen>
 8084b36:	1c41      	adds	r1, r0, #1
 8084b38:	4638      	mov	r0, r7
 8084b3a:	f7fc feef 	bl	808191c <_malloc_r>
 8084b3e:	6030      	str	r0, [r6, #0]
 8084b40:	b148      	cbz	r0, 8084b56 <_tzset_unlocked_r+0x66>
 8084b42:	4629      	mov	r1, r5
 8084b44:	f7ff fdb8 	bl	80846b8 <strcpy>
 8084b48:	e005      	b.n	8084b56 <_tzset_unlocked_r+0x66>
 8084b4a:	f7ff fdab 	bl	80846a4 <strcmp>
 8084b4e:	2800      	cmp	r0, #0
 8084b50:	f000 8132 	beq.w	8084db8 <_tzset_unlocked_r+0x2c8>
 8084b54:	e7e9      	b.n	8084b2a <_tzset_unlocked_r+0x3a>
 8084b56:	782b      	ldrb	r3, [r5, #0]
 8084b58:	ae0a      	add	r6, sp, #40	; 0x28
 8084b5a:	2b3a      	cmp	r3, #58	; 0x3a
 8084b5c:	bf08      	it	eq
 8084b5e:	3501      	addeq	r5, #1
 8084b60:	4633      	mov	r3, r6
 8084b62:	4a9d      	ldr	r2, [pc, #628]	; (8084dd8 <_tzset_unlocked_r+0x2e8>)
 8084b64:	499d      	ldr	r1, [pc, #628]	; (8084ddc <_tzset_unlocked_r+0x2ec>)
 8084b66:	4628      	mov	r0, r5
 8084b68:	f7fc fec0 	bl	80818ec <siscanf>
 8084b6c:	2800      	cmp	r0, #0
 8084b6e:	f340 8123 	ble.w	8084db8 <_tzset_unlocked_r+0x2c8>
 8084b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084b74:	18ef      	adds	r7, r5, r3
 8084b76:	5ceb      	ldrb	r3, [r5, r3]
 8084b78:	2b2d      	cmp	r3, #45	; 0x2d
 8084b7a:	d103      	bne.n	8084b84 <_tzset_unlocked_r+0x94>
 8084b7c:	3701      	adds	r7, #1
 8084b7e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8084b82:	e003      	b.n	8084b8c <_tzset_unlocked_r+0x9c>
 8084b84:	2b2b      	cmp	r3, #43	; 0x2b
 8084b86:	bf08      	it	eq
 8084b88:	3701      	addeq	r7, #1
 8084b8a:	2501      	movs	r5, #1
 8084b8c:	f10d 0a20 	add.w	sl, sp, #32
 8084b90:	f10d 0b1e 	add.w	fp, sp, #30
 8084b94:	f04f 0800 	mov.w	r8, #0
 8084b98:	9603      	str	r6, [sp, #12]
 8084b9a:	f8cd a008 	str.w	sl, [sp, #8]
 8084b9e:	9601      	str	r6, [sp, #4]
 8084ba0:	f8cd b000 	str.w	fp, [sp]
 8084ba4:	4633      	mov	r3, r6
 8084ba6:	aa07      	add	r2, sp, #28
 8084ba8:	498d      	ldr	r1, [pc, #564]	; (8084de0 <_tzset_unlocked_r+0x2f0>)
 8084baa:	4638      	mov	r0, r7
 8084bac:	f8ad 801e 	strh.w	r8, [sp, #30]
 8084bb0:	f8ad 8020 	strh.w	r8, [sp, #32]
 8084bb4:	f7fc fe9a 	bl	80818ec <siscanf>
 8084bb8:	4540      	cmp	r0, r8
 8084bba:	f340 80fd 	ble.w	8084db8 <_tzset_unlocked_r+0x2c8>
 8084bbe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084bc2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084bc6:	213c      	movs	r1, #60	; 0x3c
 8084bc8:	fb01 3302 	mla	r3, r1, r2, r3
 8084bcc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084bd0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084bd4:	fb01 3302 	mla	r3, r1, r2, r3
 8084bd8:	435d      	muls	r5, r3
 8084bda:	4b7f      	ldr	r3, [pc, #508]	; (8084dd8 <_tzset_unlocked_r+0x2e8>)
 8084bdc:	6225      	str	r5, [r4, #32]
 8084bde:	4d7d      	ldr	r5, [pc, #500]	; (8084dd4 <_tzset_unlocked_r+0x2e4>)
 8084be0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8084dec <_tzset_unlocked_r+0x2fc>
 8084be4:	602b      	str	r3, [r5, #0]
 8084be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084be8:	464a      	mov	r2, r9
 8084bea:	441f      	add	r7, r3
 8084bec:	497b      	ldr	r1, [pc, #492]	; (8084ddc <_tzset_unlocked_r+0x2ec>)
 8084bee:	4633      	mov	r3, r6
 8084bf0:	4638      	mov	r0, r7
 8084bf2:	f7fc fe7b 	bl	80818ec <siscanf>
 8084bf6:	4540      	cmp	r0, r8
 8084bf8:	dc08      	bgt.n	8084c0c <_tzset_unlocked_r+0x11c>
 8084bfa:	682b      	ldr	r3, [r5, #0]
 8084bfc:	6a22      	ldr	r2, [r4, #32]
 8084bfe:	606b      	str	r3, [r5, #4]
 8084c00:	4b71      	ldr	r3, [pc, #452]	; (8084dc8 <_tzset_unlocked_r+0x2d8>)
 8084c02:	601a      	str	r2, [r3, #0]
 8084c04:	4b72      	ldr	r3, [pc, #456]	; (8084dd0 <_tzset_unlocked_r+0x2e0>)
 8084c06:	f8c3 8000 	str.w	r8, [r3]
 8084c0a:	e0d5      	b.n	8084db8 <_tzset_unlocked_r+0x2c8>
 8084c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084c0e:	f8c5 9004 	str.w	r9, [r5, #4]
 8084c12:	18fd      	adds	r5, r7, r3
 8084c14:	5cfb      	ldrb	r3, [r7, r3]
 8084c16:	2b2d      	cmp	r3, #45	; 0x2d
 8084c18:	d103      	bne.n	8084c22 <_tzset_unlocked_r+0x132>
 8084c1a:	3501      	adds	r5, #1
 8084c1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084c20:	e003      	b.n	8084c2a <_tzset_unlocked_r+0x13a>
 8084c22:	2b2b      	cmp	r3, #43	; 0x2b
 8084c24:	bf08      	it	eq
 8084c26:	3501      	addeq	r5, #1
 8084c28:	2701      	movs	r7, #1
 8084c2a:	2300      	movs	r3, #0
 8084c2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084c30:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084c34:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084c38:	930a      	str	r3, [sp, #40]	; 0x28
 8084c3a:	9603      	str	r6, [sp, #12]
 8084c3c:	f8cd a008 	str.w	sl, [sp, #8]
 8084c40:	9601      	str	r6, [sp, #4]
 8084c42:	f8cd b000 	str.w	fp, [sp]
 8084c46:	4633      	mov	r3, r6
 8084c48:	aa07      	add	r2, sp, #28
 8084c4a:	4965      	ldr	r1, [pc, #404]	; (8084de0 <_tzset_unlocked_r+0x2f0>)
 8084c4c:	4628      	mov	r0, r5
 8084c4e:	f7fc fe4d 	bl	80818ec <siscanf>
 8084c52:	2800      	cmp	r0, #0
 8084c54:	dc04      	bgt.n	8084c60 <_tzset_unlocked_r+0x170>
 8084c56:	6a23      	ldr	r3, [r4, #32]
 8084c58:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8084c5c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8084c5e:	e00e      	b.n	8084c7e <_tzset_unlocked_r+0x18e>
 8084c60:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084c64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084c68:	213c      	movs	r1, #60	; 0x3c
 8084c6a:	fb01 3302 	mla	r3, r1, r2, r3
 8084c6e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084c72:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084c76:	fb01 3302 	mla	r3, r1, r2, r3
 8084c7a:	435f      	muls	r7, r3
 8084c7c:	63e7      	str	r7, [r4, #60]	; 0x3c
 8084c7e:	4627      	mov	r7, r4
 8084c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084c82:	f04f 0900 	mov.w	r9, #0
 8084c86:	441d      	add	r5, r3
 8084c88:	782b      	ldrb	r3, [r5, #0]
 8084c8a:	2b2c      	cmp	r3, #44	; 0x2c
 8084c8c:	bf08      	it	eq
 8084c8e:	3501      	addeq	r5, #1
 8084c90:	f895 8000 	ldrb.w	r8, [r5]
 8084c94:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8084c98:	d126      	bne.n	8084ce8 <_tzset_unlocked_r+0x1f8>
 8084c9a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8084c9e:	9302      	str	r3, [sp, #8]
 8084ca0:	ab09      	add	r3, sp, #36	; 0x24
 8084ca2:	9300      	str	r3, [sp, #0]
 8084ca4:	9603      	str	r6, [sp, #12]
 8084ca6:	9601      	str	r6, [sp, #4]
 8084ca8:	4633      	mov	r3, r6
 8084caa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8084cae:	494d      	ldr	r1, [pc, #308]	; (8084de4 <_tzset_unlocked_r+0x2f4>)
 8084cb0:	4628      	mov	r0, r5
 8084cb2:	f7fc fe1b 	bl	80818ec <siscanf>
 8084cb6:	2803      	cmp	r0, #3
 8084cb8:	d17e      	bne.n	8084db8 <_tzset_unlocked_r+0x2c8>
 8084cba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8084cbe:	1e4b      	subs	r3, r1, #1
 8084cc0:	2b0b      	cmp	r3, #11
 8084cc2:	d879      	bhi.n	8084db8 <_tzset_unlocked_r+0x2c8>
 8084cc4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8084cc8:	1e53      	subs	r3, r2, #1
 8084cca:	2b04      	cmp	r3, #4
 8084ccc:	d874      	bhi.n	8084db8 <_tzset_unlocked_r+0x2c8>
 8084cce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8084cd2:	2b06      	cmp	r3, #6
 8084cd4:	d870      	bhi.n	8084db8 <_tzset_unlocked_r+0x2c8>
 8084cd6:	f887 8008 	strb.w	r8, [r7, #8]
 8084cda:	60f9      	str	r1, [r7, #12]
 8084cdc:	613a      	str	r2, [r7, #16]
 8084cde:	617b      	str	r3, [r7, #20]
 8084ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084ce2:	eb05 0803 	add.w	r8, r5, r3
 8084ce6:	e02a      	b.n	8084d3e <_tzset_unlocked_r+0x24e>
 8084ce8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8084cec:	bf06      	itte	eq
 8084cee:	4643      	moveq	r3, r8
 8084cf0:	3501      	addeq	r5, #1
 8084cf2:	2344      	movne	r3, #68	; 0x44
 8084cf4:	220a      	movs	r2, #10
 8084cf6:	a90b      	add	r1, sp, #44	; 0x2c
 8084cf8:	4628      	mov	r0, r5
 8084cfa:	9305      	str	r3, [sp, #20]
 8084cfc:	f7ff fe3e 	bl	808497c <strtoul>
 8084d00:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8084d04:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8084d08:	4545      	cmp	r5, r8
 8084d0a:	9b05      	ldr	r3, [sp, #20]
 8084d0c:	d114      	bne.n	8084d38 <_tzset_unlocked_r+0x248>
 8084d0e:	234d      	movs	r3, #77	; 0x4d
 8084d10:	f1b9 0f00 	cmp.w	r9, #0
 8084d14:	d107      	bne.n	8084d26 <_tzset_unlocked_r+0x236>
 8084d16:	7223      	strb	r3, [r4, #8]
 8084d18:	2303      	movs	r3, #3
 8084d1a:	60e3      	str	r3, [r4, #12]
 8084d1c:	2302      	movs	r3, #2
 8084d1e:	6123      	str	r3, [r4, #16]
 8084d20:	f8c4 9014 	str.w	r9, [r4, #20]
 8084d24:	e00b      	b.n	8084d3e <_tzset_unlocked_r+0x24e>
 8084d26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8084d2a:	230b      	movs	r3, #11
 8084d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8084d2e:	2301      	movs	r3, #1
 8084d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8084d32:	2300      	movs	r3, #0
 8084d34:	6323      	str	r3, [r4, #48]	; 0x30
 8084d36:	e002      	b.n	8084d3e <_tzset_unlocked_r+0x24e>
 8084d38:	b280      	uxth	r0, r0
 8084d3a:	723b      	strb	r3, [r7, #8]
 8084d3c:	6178      	str	r0, [r7, #20]
 8084d3e:	2302      	movs	r3, #2
 8084d40:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084d44:	2300      	movs	r3, #0
 8084d46:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084d4a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8084d50:	f898 3000 	ldrb.w	r3, [r8]
 8084d54:	2b2f      	cmp	r3, #47	; 0x2f
 8084d56:	d10b      	bne.n	8084d70 <_tzset_unlocked_r+0x280>
 8084d58:	9603      	str	r6, [sp, #12]
 8084d5a:	f8cd a008 	str.w	sl, [sp, #8]
 8084d5e:	9601      	str	r6, [sp, #4]
 8084d60:	f8cd b000 	str.w	fp, [sp]
 8084d64:	4633      	mov	r3, r6
 8084d66:	aa07      	add	r2, sp, #28
 8084d68:	491f      	ldr	r1, [pc, #124]	; (8084de8 <_tzset_unlocked_r+0x2f8>)
 8084d6a:	4640      	mov	r0, r8
 8084d6c:	f7fc fdbe 	bl	80818ec <siscanf>
 8084d70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084d74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084d78:	213c      	movs	r1, #60	; 0x3c
 8084d7a:	fb01 3302 	mla	r3, r1, r2, r3
 8084d7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084d82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084d86:	fb01 3302 	mla	r3, r1, r2, r3
 8084d8a:	61bb      	str	r3, [r7, #24]
 8084d8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8084d8e:	f109 0901 	add.w	r9, r9, #1
 8084d92:	f1b9 0f02 	cmp.w	r9, #2
 8084d96:	4445      	add	r5, r8
 8084d98:	f107 071c 	add.w	r7, r7, #28
 8084d9c:	f47f af74 	bne.w	8084c88 <_tzset_unlocked_r+0x198>
 8084da0:	6860      	ldr	r0, [r4, #4]
 8084da2:	f7ff fdf5 	bl	8084990 <__tzcalc_limits>
 8084da6:	6a22      	ldr	r2, [r4, #32]
 8084da8:	4b07      	ldr	r3, [pc, #28]	; (8084dc8 <_tzset_unlocked_r+0x2d8>)
 8084daa:	601a      	str	r2, [r3, #0]
 8084dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084dae:	1a9b      	subs	r3, r3, r2
 8084db0:	4a07      	ldr	r2, [pc, #28]	; (8084dd0 <_tzset_unlocked_r+0x2e0>)
 8084db2:	bf18      	it	ne
 8084db4:	2301      	movne	r3, #1
 8084db6:	6013      	str	r3, [r2, #0]
 8084db8:	b00d      	add	sp, #52	; 0x34
 8084dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084dbe:	bf00      	nop
 8084dc0:	0808579c 	.word	0x0808579c
 8084dc4:	20000c48 	.word	0x20000c48
 8084dc8:	20000c50 	.word	0x20000c50
 8084dcc:	0808579f 	.word	0x0808579f
 8084dd0:	20000c4c 	.word	0x20000c4c
 8084dd4:	200004a4 	.word	0x200004a4
 8084dd8:	20000c3b 	.word	0x20000c3b
 8084ddc:	080857a3 	.word	0x080857a3
 8084de0:	080857c6 	.word	0x080857c6
 8084de4:	080857b2 	.word	0x080857b2
 8084de8:	080857c5 	.word	0x080857c5
 8084dec:	20000c30 	.word	0x20000c30

08084df0 <_findenv_r>:
 8084df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084df4:	4607      	mov	r7, r0
 8084df6:	468b      	mov	fp, r1
 8084df8:	4690      	mov	r8, r2
 8084dfa:	f000 f8d7 	bl	8084fac <__env_lock>
 8084dfe:	4b19      	ldr	r3, [pc, #100]	; (8084e64 <_findenv_r+0x74>)
 8084e00:	681d      	ldr	r5, [r3, #0]
 8084e02:	469a      	mov	sl, r3
 8084e04:	b13d      	cbz	r5, 8084e16 <_findenv_r+0x26>
 8084e06:	465c      	mov	r4, fp
 8084e08:	4623      	mov	r3, r4
 8084e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084e0e:	b142      	cbz	r2, 8084e22 <_findenv_r+0x32>
 8084e10:	2a3d      	cmp	r2, #61	; 0x3d
 8084e12:	461c      	mov	r4, r3
 8084e14:	d1f8      	bne.n	8084e08 <_findenv_r+0x18>
 8084e16:	4638      	mov	r0, r7
 8084e18:	f000 f8c9 	bl	8084fae <__env_unlock>
 8084e1c:	2000      	movs	r0, #0
 8084e1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084e22:	ebcb 0404 	rsb	r4, fp, r4
 8084e26:	46a9      	mov	r9, r5
 8084e28:	f859 0b04 	ldr.w	r0, [r9], #4
 8084e2c:	2800      	cmp	r0, #0
 8084e2e:	d0f2      	beq.n	8084e16 <_findenv_r+0x26>
 8084e30:	4622      	mov	r2, r4
 8084e32:	4659      	mov	r1, fp
 8084e34:	f7ff fc6b 	bl	808470e <strncmp>
 8084e38:	b988      	cbnz	r0, 8084e5e <_findenv_r+0x6e>
 8084e3a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8084e3e:	191e      	adds	r6, r3, r4
 8084e40:	5d1b      	ldrb	r3, [r3, r4]
 8084e42:	2b3d      	cmp	r3, #61	; 0x3d
 8084e44:	d10b      	bne.n	8084e5e <_findenv_r+0x6e>
 8084e46:	f8da 3000 	ldr.w	r3, [sl]
 8084e4a:	4638      	mov	r0, r7
 8084e4c:	1aed      	subs	r5, r5, r3
 8084e4e:	10ad      	asrs	r5, r5, #2
 8084e50:	f8c8 5000 	str.w	r5, [r8]
 8084e54:	f000 f8ab 	bl	8084fae <__env_unlock>
 8084e58:	1c70      	adds	r0, r6, #1
 8084e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084e5e:	464d      	mov	r5, r9
 8084e60:	e7e1      	b.n	8084e26 <_findenv_r+0x36>
 8084e62:	bf00      	nop
 8084e64:	200004ec 	.word	0x200004ec

08084e68 <_getenv_r>:
 8084e68:	b507      	push	{r0, r1, r2, lr}
 8084e6a:	aa01      	add	r2, sp, #4
 8084e6c:	f7ff ffc0 	bl	8084df0 <_findenv_r>
 8084e70:	b003      	add	sp, #12
 8084e72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084e78 <__gettzinfo>:
 8084e78:	4800      	ldr	r0, [pc, #0]	; (8084e7c <__gettzinfo+0x4>)
 8084e7a:	4770      	bx	lr
 8084e7c:	200004ac 	.word	0x200004ac

08084e80 <gmtime_r>:
 8084e80:	6802      	ldr	r2, [r0, #0]
 8084e82:	4b46      	ldr	r3, [pc, #280]	; (8084f9c <gmtime_r+0x11c>)
 8084e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084e86:	fb92 f4f3 	sdiv	r4, r2, r3
 8084e8a:	fb03 2214 	mls	r2, r3, r4, r2
 8084e8e:	2a00      	cmp	r2, #0
 8084e90:	bfbc      	itt	lt
 8084e92:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8084e96:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8084e9a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8084e9e:	fb92 f3f0 	sdiv	r3, r2, r0
 8084ea2:	fb00 2213 	mls	r2, r0, r3, r2
 8084ea6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8084eaa:	608b      	str	r3, [r1, #8]
 8084eac:	fb92 f3f0 	sdiv	r3, r2, r0
 8084eb0:	fb00 2213 	mls	r2, r0, r3, r2
 8084eb4:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8084eb8:	bfac      	ite	ge
 8084eba:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8084ebe:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8084ec2:	604b      	str	r3, [r1, #4]
 8084ec4:	600a      	str	r2, [r1, #0]
 8084ec6:	2307      	movs	r3, #7
 8084ec8:	1ce2      	adds	r2, r4, #3
 8084eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8084ece:	4d34      	ldr	r5, [pc, #208]	; (8084fa0 <gmtime_r+0x120>)
 8084ed0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084ed4:	fb94 f5f5 	sdiv	r5, r4, r5
 8084ed8:	1ad3      	subs	r3, r2, r3
 8084eda:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8084ede:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8084ee2:	618b      	str	r3, [r1, #24]
 8084ee4:	4b2f      	ldr	r3, [pc, #188]	; (8084fa4 <gmtime_r+0x124>)
 8084ee6:	4830      	ldr	r0, [pc, #192]	; (8084fa8 <gmtime_r+0x128>)
 8084ee8:	fb03 4405 	mla	r4, r3, r5, r4
 8084eec:	fbb4 f2f2 	udiv	r2, r4, r2
 8084ef0:	fbb4 f3f7 	udiv	r3, r4, r7
 8084ef4:	fbb4 f0f0 	udiv	r0, r4, r0
 8084ef8:	4422      	add	r2, r4
 8084efa:	1ad2      	subs	r2, r2, r3
 8084efc:	f648 6694 	movw	r6, #36500	; 0x8e94
 8084f00:	1a13      	subs	r3, r2, r0
 8084f02:	f240 126d 	movw	r2, #365	; 0x16d
 8084f06:	fbb3 f6f6 	udiv	r6, r3, r6
 8084f0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8084f0e:	fbb3 f3f7 	udiv	r3, r3, r7
 8084f12:	4434      	add	r4, r6
 8084f14:	1ae3      	subs	r3, r4, r3
 8084f16:	fb02 3310 	mls	r3, r2, r0, r3
 8084f1a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8084f1e:	2499      	movs	r4, #153	; 0x99
 8084f20:	3202      	adds	r2, #2
 8084f22:	fbb2 f2f4 	udiv	r2, r2, r4
 8084f26:	4354      	muls	r4, r2
 8084f28:	1ca6      	adds	r6, r4, #2
 8084f2a:	2405      	movs	r4, #5
 8084f2c:	fbb6 f4f4 	udiv	r4, r6, r4
 8084f30:	2a0a      	cmp	r2, #10
 8084f32:	bf34      	ite	cc
 8084f34:	2602      	movcc	r6, #2
 8084f36:	f06f 0609 	mvncs.w	r6, #9
 8084f3a:	4416      	add	r6, r2
 8084f3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084f40:	fb02 0505 	mla	r5, r2, r5, r0
 8084f44:	1c5f      	adds	r7, r3, #1
 8084f46:	2e01      	cmp	r6, #1
 8084f48:	bf98      	it	ls
 8084f4a:	3501      	addls	r5, #1
 8084f4c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8084f50:	eba7 0704 	sub.w	r7, r7, r4
 8084f54:	d302      	bcc.n	8084f5c <gmtime_r+0xdc>
 8084f56:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8084f5a:	e014      	b.n	8084f86 <gmtime_r+0x106>
 8084f5c:	0782      	lsls	r2, r0, #30
 8084f5e:	d105      	bne.n	8084f6c <gmtime_r+0xec>
 8084f60:	2464      	movs	r4, #100	; 0x64
 8084f62:	fbb0 f2f4 	udiv	r2, r0, r4
 8084f66:	fb04 0212 	mls	r2, r4, r2, r0
 8084f6a:	b94a      	cbnz	r2, 8084f80 <gmtime_r+0x100>
 8084f6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084f70:	fbb0 f4f2 	udiv	r4, r0, r2
 8084f74:	fb02 0014 	mls	r0, r2, r4, r0
 8084f78:	fab0 f280 	clz	r2, r0
 8084f7c:	0952      	lsrs	r2, r2, #5
 8084f7e:	e000      	b.n	8084f82 <gmtime_r+0x102>
 8084f80:	2201      	movs	r2, #1
 8084f82:	333b      	adds	r3, #59	; 0x3b
 8084f84:	441a      	add	r2, r3
 8084f86:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8084f8a:	2300      	movs	r3, #0
 8084f8c:	61ca      	str	r2, [r1, #28]
 8084f8e:	614d      	str	r5, [r1, #20]
 8084f90:	610e      	str	r6, [r1, #16]
 8084f92:	60cf      	str	r7, [r1, #12]
 8084f94:	620b      	str	r3, [r1, #32]
 8084f96:	4608      	mov	r0, r1
 8084f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084f9a:	bf00      	nop
 8084f9c:	00015180 	.word	0x00015180
 8084fa0:	00023ab1 	.word	0x00023ab1
 8084fa4:	fffdc54f 	.word	0xfffdc54f
 8084fa8:	00023ab0 	.word	0x00023ab0

08084fac <__env_lock>:
 8084fac:	4770      	bx	lr

08084fae <__env_unlock>:
 8084fae:	4770      	bx	lr

08084fb0 <dynalib_user>:
 8084fb0:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8084fc0:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
 8084fd0:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
 8085004:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
 8085014:	3225 302e 2566 2025 2500 2e34 6631 4320     %2.0f%% .%4.1f C
 8085024:	2500 2e34 6631 2520 0025 3425 312e 2066     .%4.1f %%.%4.1f 
 8085034:	536d 6d2f 2500 2069 2525 4100 2b54 4643     mS/m.%i %%.AT+CF
 8085044:	4e55 313d 0d36 000a 227b 6554 706d 7265     UN=16...{"Temper
 8085054:	7461 7275 2265 253a 2e34 6631 202c 4822     ature":%4.1f, "H
 8085064:	6d75 6469 7469 2279 253a 2e34 6631 202c     umidity":%4.1f, 
 8085074:	5322 696f 636c 6e6f 7564 7463 7669 7469     "Soilconductivit
 8085084:	2279 253a 2e34 6631 202c 5322 696f 746c     y":%4.1f, "Soilt
 8085094:	6d65 2270 253a 2e34 6631 202c 5322 696f     emp":%4.1f, "Soi
 80850a4:	6d6c 696f 7473 7275 2265 253a 2e34 6631     lmoisture":%4.1f
 80850b4:	202c 4222 7461 6574 7972 3a22 6925 202c     , "Battery":%i, 
 80850c4:	5222 7365 7465 2273 253a 2c69 2220 6c41     "Resets":%i, "Al
 80850d4:	7265 7374 3a22 6925 007d 6543 6c6c 6c75     erts":%i}.Cellul
 80850e4:	7261 535f 696f 5f6c 6f48 6b6f 4500 7272     ar_Soil_Hook.Err
 80850f4:	726f 7420 6b61 6e69 2067 654d 7361 7275     or taking Measur
 8085104:	6d65 6e65 7374 5300 6174 6574 4700 696f     ements.State.Goi
 8085114:	676e 7420 206f 6c53 6565 0070 6f4c 2077     ng to Sleep.Low 
 8085124:	6142 7474 7265 2079 202d 6c53 6565 6970     Battery - Sleepi
 8085134:	676e 5200 7065 726f 6974 676e 4900 6c64     ng.Reporting.Idl
 8085144:	0065 7245 6f72 2072 202d 6552 6f70 7472     e.Error - Report
 8085154:	6e69 2067 6954 656d 2064 754f 0074 5245     ing Timed Out.ER
 8085164:	4f52 5f52 5453 5441 2045 202d 6552 6573     ROR_STATE - Rese
 8085174:	7474 6e69 0067 6f4e 4420 7461 0061 6255     tting.No Data.Ub
 8085184:	6469 746f 2073 6f48 6b6f 5200 7365 6f70     idots Hook.Respo
 8085194:	736e 2065 6552 6563 7669 6465 5300 7465     nse Received.Set
 80851a4:	5320 6c6f 7261 5020 776f 7265 6465 4d20      Solar Powered M
 80851b4:	646f 0065 0030 6c43 6165 6572 2064 6f53     ode.0.Cleared So
 80851c4:	616c 2072 6f50 6577 6572 2064 6f4d 6564     lar Powered Mode
 80851d4:	5300 7465 5620 7265 6f62 6573 4d20 646f     .Set Verbose Mod
 80851e4:	0065 6c43 6165 6572 2064 6556 6272 736f     e.Cleared Verbos
 80851f4:	2065 6f4d 6564 5400 6d69 2065 6f7a 656e     e Mode.Time zone
 8085204:	6f20 6666 6573 2074 6925 5400 6d69 0065      offset %i.Time.
 8085214:	6f4c 2077 6f50 6577 0072 6f4e 6d72 6c61     Low Power.Normal
 8085224:	4f20 6570 6172 6974 6e6f 0073 6953 6e67      Operations.Sign
 8085234:	6c61 5200 7365 7465 6f43 6e75 0074 6552     al.ResetCount.Re
 8085244:	656c 7361 0065 7473 7461 4f65 4366 6768     lease.stateOfChg
 8085254:	6c00 776f 6f50 6577 4d72 646f 0065 6574     .lowPowerMode.te
 8085264:	706d 7265 7461 7275 0065 7568 696d 6964     mperature.humidi
 8085274:	7974 4300 6e6f 7564 7463 7669 7469 0079     ty.Conductivity.
 8085284:	6f53 6c69 6554 706d 5600 6c6f 6d75 7465     SoilTemp.Volumet
 8085294:	6972 4863 4f32 4d00 6165 7573 6572 4e2d     ricH2O.Measure-N
 80852a4:	776f 4c00 776f 6f50 6577 4d72 646f 0065     ow.LowPowerMode.
 80852b4:	6f53 616c 2d72 6f4d 6564 5600 7265 6f62     Solar-Mode.Verbo
 80852c4:	6573 4d2d 646f 0065 6553 5474 6d69 5a65     se-Mode.SetTimeZ
 80852d4:	6e6f 0065 7453 7261 7574 0070 6e55 6e6b     one.Startup.Unkn
 80852e4:	776f 006e 6f4e 656e 5700 4669 0069 5347     own.None.WiFi.GS
 80852f4:	004d 4d55 5354 4300 4d44 0041 544c 0045     M.UMTS.CDMA.LTE.
 8085304:	4549 4545 3038 3132 3435 3100 302e 0034     IEEE802154.1.04.

08085314 <_ZTVN5spark13CellularClassE>:
	...
 808531c:	19fb 0808 19f1 0808 19e7 0808 1959 0808     ............Y...
 808532c:	19db 0808 19cf 0808 19c3 0808 19bb 0808     ................
 808533c:	19b1 0808 19a7 0808 1963 0808               ........c...

08085348 <_ZTV14CellularSignal>:
	...
 8085350:	1ab9 0808 1b3b 0808 1abb 0808 1b79 0808     ....;.......y...
 8085360:	1ac1 0808 1b49 0808 1ae5 0808 1b09 0808     ....I...........
 8085370:	fffc ffff 0000 0000 1b33 0808               ........3...

0808537c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8085384:	1bc1 0808 1bc7 0808 1bef 0808 1bd3 0808     ................
 8085394:	1bc3 0808                                   ....

08085398 <_ZTV7TwoWire>:
	...
 80853a0:	2241 0808 228b 0808 2263 0808 2243 0808     A"..."..c"..C"..
 80853b0:	226b 0808 2273 0808 227b 0808 2283 0808     k"..s"..{"..."..

080853c0 <_ZTV9IPAddress>:
	...
 80853c8:	2393 0808 2385 0808 2387 0808 0066 6e6c     .#...#...#..f.ln
 80853d8:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80853e8:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
 80853f8:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 8085408:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
 8085418:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 8085428:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 8085438:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 8085448:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 8085458:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 8085468:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 8085478:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 8085488:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
 8085498:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 80854a8:	6170 696e 0063 6c61 006c 0000               panic.all...

080854b4 <_ZTVN5spark12NetworkClassE>:
	...
 80854bc:	2431 0808 243b 0808 2445 0808 244f 0808     1$..;$..E$..O$..
 80854cc:	2459 0808 2465 0808 2471 0808 247d 0808     Y$..e$..q$..}$..
 80854dc:	2485 0808 248f 0808 2499 0808               .$...$...$..

080854e8 <_ZTV8SPIClass>:
	...
 80854f0:	299d 0808 299f 0808 2b25 3330 3a64 3025     .)...)..%+03d:%0
 8085500:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8085510:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08085520 <_ZTV11USARTSerial>:
	...
 8085528:	2d0d 0808 2d31 0808 2d3d 0808 2881 0808     .-..1-..=-...(..
 8085538:	2d19 0808 2d25 0808 2d1f 0808 2d2b 0808     .-..%-...-..+-..
 8085548:	2d0f 0808 2d13 0808                         .-...-..

08085550 <_ZTV9USBSerial>:
	...
 8085558:	2de5 0808 2e29 0808 2e03 0808 2881 0808     .-..)........(..
 8085568:	2dfd 0808 2de7 0808 2def 0808 2e23 0808     .-...-...-..#...
 8085578:	2df7 0808 2de1 0808                         .-...-..

08085580 <day_name.4723>:
 8085580:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8085590:	6972 6153 4a74                                   riSat

08085595 <mon_name.4724>:
 8085595:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80855a5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80855b5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80855c5:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80855d5:	6425 000a                                   %d..

080855d9 <_ctype_>:
 80855d9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80855e9:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80855f9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8085609:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8085619:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8085629:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8085639:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8085649:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8085659:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080856dc <__sf_fake_stdin>:
	...

080856fc <__sf_fake_stdout>:
	...

0808571c <__sf_fake_stderr>:
	...

0808573c <__month_lengths>:
 808573c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 808574c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808575c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808576c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808577c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808578c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808579c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80857ac:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80857bc:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80857cc:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080857d8 <link_const_variable_data_end>:
 80857d8:	08080ed5 	.word	0x08080ed5
 80857dc:	08081225 	.word	0x08081225
 80857e0:	08081371 	.word	0x08081371
 80857e4:	08081a79 	.word	0x08081a79
 80857e8:	08082421 	.word	0x08082421
 80857ec:	080824e5 	.word	0x080824e5
 80857f0:	08082981 	.word	0x08082981
 80857f4:	08082b59 	.word	0x08082b59
 80857f8:	08082cf9 	.word	0x08082cf9
 80857fc:	0808324d 	.word	0x0808324d
 8085800:	0808327d 	.word	0x0808327d
 8085804:	080832e9 	.word	0x080832e9
 8085808:	080833ad 	.word	0x080833ad
 808580c:	08083431 	.word	0x08083431
 8085810:	080834b5 	.word	0x080834b5

08085814 <link_constructors_end>:
	...
