
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Soil/target/Cellular-Soil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005288  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080852a0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000f0  20000400  080852a4  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000071c  200004f0  200004f0  000404f0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08085394  08085394  00035394  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080853bc  080853bc  000353bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b0737  00000000  00000000  000353c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010be5  00000000  00000000  000e5af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016358  00000000  00000000  000f66dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002220  00000000  00000000  0010ca34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003720  00000000  00000000  0010ec54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00026397  00000000  00000000  00112374  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026953  00000000  00000000  0013870b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000996d9  00000000  00000000  0015f05e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c548  00000000  00000000  001f8738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	18 4b 08 08                                         .K..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f004 f8b1 	bl	8084194 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f004 f8b6 	bl	80841aa <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	080852a4 	.word	0x080852a4
 808004c:	200004f0 	.word	0x200004f0
 8080050:	200004f0 	.word	0x200004f0
 8080054:	20000c0c 	.word	0x20000c0c
 8080058:	20000c0c 	.word	0x20000c0c

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f002 fda5 	bl	8082bac <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08085260 	.word	0x08085260
 8080084:	08085294 	.word	0x08085294

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 bd1c 	b.w	8080ac4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f9d3 	bl	8080438 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f002 bd4b 	b.w	8082b30 <_post_loop>

0808009a <_Znwj>:
 808009a:	f001 ba7f 	b.w	808159c <malloc>

0808009e <_ZdlPv>:
 808009e:	f001 ba85 	b.w	80815ac <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <_Z11watchdogISRv>:
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void watchdogISR() {
  watchDogFlag = true;
 80800b4:	4b01      	ldr	r3, [pc, #4]	; (80800bc <_Z11watchdogISRv+0x8>)
 80800b6:	2201      	movs	r2, #1
 80800b8:	701a      	strb	r2, [r3, #0]
 80800ba:	4770      	bx	lr
 80800bc:	2000059d 	.word	0x2000059d

080800c0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
 80800c0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80800c2:	4904      	ldr	r1, [pc, #16]	; (80800d4 <_Z10measureNow6String+0x14>)
 80800c4:	f002 fa9b 	bl	80825fe <_ZNK6String6equalsEPKc>
  if (command == "1")
 80800c8:	b118      	cbz	r0, 80800d2 <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
 80800ca:	4b03      	ldr	r3, [pc, #12]	; (80800d8 <_Z10measureNow6String+0x18>)
 80800cc:	2203      	movs	r2, #3
 80800ce:	701a      	strb	r2, [r3, #0]
    return 1;
 80800d0:	2001      	movs	r0, #1
  }
  else return 0;
}
 80800d2:	bd08      	pop	{r3, pc}
 80800d4:	08084ee0 	.word	0x08084ee0
 80800d8:	2000052d 	.word	0x2000052d

080800dc <_ZN11EEPROMClass4readEi.isra.17>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80800dc:	f001 b852 	b.w	8081184 <HAL_EEPROM_Read>

080800e0 <_ZN11EEPROMClass5writeEih.isra.18>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 80800e0:	f001 b858 	b.w	8081194 <HAL_EEPROM_Write>

080800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80800e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80800e6:	4605      	mov	r5, r0
 80800e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80800ec:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800ee:	f88d 3000 	strb.w	r3, [sp]
 80800f2:	233c      	movs	r3, #60	; 0x3c
 80800f4:	f001 fcf6 	bl	8081ae4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80800f8:	4628      	mov	r0, r5
 80800fa:	b003      	add	sp, #12
 80800fc:	bd30      	pop	{r4, r5, pc}
	...

08080100 <_Z17getSignalStrengthv>:

  return 1;
}

void getSignalStrength()
{
 8080100:	b530      	push	{r4, r5, lr}
 8080102:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 8080104:	4910      	ldr	r1, [pc, #64]	; (8080148 <_Z17getSignalStrengthv+0x48>)
 8080106:	a804      	add	r0, sp, #16
 8080108:	f001 faa4 	bl	8081654 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 808010c:	a804      	add	r0, sp, #16
 808010e:	f001 fafa 	bl	8081706 <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080112:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 8080114:	a804      	add	r0, sp, #16
 8080116:	f001 fb55 	bl	80817c4 <_ZNK14CellularSignal11getStrengthEv>
 808011a:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 808011c:	a804      	add	r0, sp, #16
 808011e:	f001 fb39 	bl	8081794 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080122:	f003 f941 	bl	80833a8 <__aeabi_f2d>
 8080126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808012a:	4628      	mov	r0, r5
 808012c:	f003 f93c 	bl	80833a8 <__aeabi_f2d>
 8080130:	e9cd 0100 	strd	r0, r1, [sp]
 8080134:	4b05      	ldr	r3, [pc, #20]	; (808014c <_Z17getSignalStrengthv+0x4c>)
 8080136:	4a06      	ldr	r2, [pc, #24]	; (8080150 <_Z17getSignalStrengthv+0x50>)
 8080138:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 808013c:	2140      	movs	r1, #64	; 0x40
 808013e:	4805      	ldr	r0, [pc, #20]	; (8080154 <_Z17getSignalStrengthv+0x54>)
 8080140:	f001 fa54 	bl	80815ec <snprintf>
}
 8080144:	b00f      	add	sp, #60	; 0x3c
 8080146:	bd30      	pop	{r4, r5, pc}
 8080148:	200005c4 	.word	0x200005c4
 808014c:	20000418 	.word	0x20000418
 8080150:	08084b6c 	.word	0x08084b6c
 8080154:	2000053c 	.word	0x2000053c

08080158 <_Z16takeMeasurementsv>:
  else Particle.publish("Ubidots Hook", dataCopy,PRIVATE);       // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
 8080158:	b508      	push	{r3, lr}
  // Read values from the sensor
  temperatureInC = sht1x.readTemperatureC();
 808015a:	480d      	ldr	r0, [pc, #52]	; (8080190 <_Z16takeMeasurementsv+0x38>)
 808015c:	f000 ff4c 	bl	8080ff8 <_ZN5SHT1x16readTemperatureCEv>
 8080160:	4b0c      	ldr	r3, [pc, #48]	; (8080194 <_Z16takeMeasurementsv+0x3c>)
 8080162:	6018      	str	r0, [r3, #0]
  relativeHumidity = sht1x.readHumidity();
 8080164:	480a      	ldr	r0, [pc, #40]	; (8080190 <_Z16takeMeasurementsv+0x38>)
 8080166:	f000 ff59 	bl	808101c <_ZN5SHT1x12readHumidityEv>
 808016a:	4b0b      	ldr	r3, [pc, #44]	; (8080198 <_Z16takeMeasurementsv+0x40>)
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808016c:	2200      	movs	r2, #0
 808016e:	6018      	str	r0, [r3, #0]
 8080170:	4611      	mov	r1, r2
 8080172:	4610      	mov	r0, r2
 8080174:	f001 f9fa 	bl	808156c <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
 8080178:	b108      	cbz	r0, 808017e <_Z16takeMeasurementsv+0x26>
 808017a:	f7ff ffc1 	bl	8080100 <_Z17getSignalStrengthv>
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
 808017e:	4807      	ldr	r0, [pc, #28]	; (808019c <_Z16takeMeasurementsv+0x44>)
 8080180:	f001 fe60 	bl	8081e44 <_ZN9FuelGauge6getSoCEv>
 8080184:	f003 fe9a 	bl	8083ebc <__aeabi_f2iz>
 8080188:	4b05      	ldr	r3, [pc, #20]	; (80801a0 <_Z16takeMeasurementsv+0x48>)
 808018a:	6018      	str	r0, [r3, #0]

  return 1;
}
 808018c:	2001      	movs	r0, #1
 808018e:	bd08      	pop	{r3, pc}
 8080190:	20000510 	.word	0x20000510
 8080194:	20000590 	.word	0x20000590
 8080198:	2000051c 	.word	0x2000051c
 808019c:	20000524 	.word	0x20000524
 80801a0:	20000538 	.word	0x20000538

080801a4 <_Z17connectToParticlev>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80801a4:	2300      	movs	r3, #0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 80801a6:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 80801aa:	461a      	mov	r2, r3
 80801ac:	4619      	mov	r1, r3
 80801ae:	4618      	mov	r0, r3
 80801b0:	f001 f9e4 	bl	808157c <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80801b4:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80801b8:	f001 f998 	bl	80814ec <spark_cloud_flag_connect>
 80801bc:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80801c0:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801c2:	2000      	movs	r0, #0
 80801c4:	f000 fffe 	bl	80811c4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80801c8:	4680      	mov	r8, r0
 80801ca:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801ce:	2000      	movs	r0, #0
 80801d0:	f000 fff8 	bl	80811c4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80801d4:	ebb0 0008 	subs.w	r0, r0, r8
 80801d8:	eb61 0109 	sbc.w	r1, r1, r9
 80801dc:	428f      	cmp	r7, r1
 80801de:	bf08      	it	eq
 80801e0:	4286      	cmpeq	r6, r0
 80801e2:	d305      	bcc.n	80801f0 <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801e4:	f001 f992 	bl	808150c <spark_cloud_flag_connected>
 80801e8:	b910      	cbnz	r0, 80801f0 <_Z17connectToParticlev+0x4c>
            spark_process();
 80801ea:	f001 f977 	bl	80814dc <spark_process>
 80801ee:	e7ee      	b.n	80801ce <_Z17connectToParticlev+0x2a>
 80801f0:	f001 f98c 	bl	808150c <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80801f4:	b118      	cbz	r0, 80801fe <_Z17connectToParticlev+0x5a>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 80801f6:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 80801fa:	f001 b987 	b.w	808150c <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80801fe:	f000 ffa9 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080202:	4b03      	ldr	r3, [pc, #12]	; (8080210 <_Z17connectToParticlev+0x6c>)
 8080204:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080206:	f001 f969 	bl	80814dc <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 808020a:	3c01      	subs	r4, #1
 808020c:	d0f3      	beq.n	80801f6 <_Z17connectToParticlev+0x52>
 808020e:	e7d8      	b.n	80801c2 <_Z17connectToParticlev+0x1e>
 8080210:	20000ad0 	.word	0x20000ad0

08080214 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()
{
 8080214:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8080216:	f001 f971 	bl	80814fc <spark_cloud_flag_disconnect>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808021a:	2300      	movs	r3, #0
 808021c:	4618      	mov	r0, r3
 808021e:	461a      	mov	r2, r3
 8080220:	4619      	mov	r1, r3
 8080222:	f001 f9b3 	bl	808158c <network_off>
  Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
  Cellular.off();
  delay(1000);                                                    // Bummer but only should happen once an hour
 8080226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808022a:	f001 f9f7 	bl	808161c <delay>
  return true;
}
 808022e:	2001      	movs	r0, #1
 8080230:	bd08      	pop	{r3, pc}
	...

08080234 <_Z9PMICresetv>:
bool notConnected() {
  return !Particle.connected();                             // This is a requirement to use waitFor
}

// Power Management function
void PMICreset() {
 8080234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
 8080236:	481f      	ldr	r0, [pc, #124]	; (80802b4 <_Z9PMICresetv+0x80>)
 8080238:	f001 ff06 	bl	8082048 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
 808023c:	481d      	ldr	r0, [pc, #116]	; (80802b4 <_Z9PMICresetv+0x80>)
 808023e:	f002 f8a7 	bl	8082390 <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
 8080242:	4b1d      	ldr	r3, [pc, #116]	; (80802b8 <_Z9PMICresetv+0x84>)
 8080244:	781c      	ldrb	r4, [r3, #0]
 8080246:	4b1d      	ldr	r3, [pc, #116]	; (80802bc <_Z9PMICresetv+0x88>)
 8080248:	b1bc      	cbz	r4, 808027a <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 808024a:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 808024c:	f241 21e8 	movw	r1, #4840	; 0x12e8
 8080250:	4818      	ldr	r0, [pc, #96]	; (80802b4 <_Z9PMICresetv+0x80>)
// Power Management function
void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 8080252:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080254:	f001 ff71 	bl	808213a <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
 8080258:	f44f 7161 	mov.w	r1, #900	; 0x384
 808025c:	4815      	ldr	r0, [pc, #84]	; (80802b4 <_Z9PMICresetv+0x80>)
 808025e:	f001 fff6 	bl	808224e <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
 8080262:	2200      	movs	r2, #0
 8080264:	4611      	mov	r1, r2
 8080266:	9202      	str	r2, [sp, #8]
 8080268:	9201      	str	r2, [sp, #4]
 808026a:	9200      	str	r2, [sp, #0]
 808026c:	2301      	movs	r3, #1
 808026e:	4811      	ldr	r0, [pc, #68]	; (80802b4 <_Z9PMICresetv+0x80>)
 8080270:	f002 f835 	bl	80822de <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
 8080274:	f241 0170 	movw	r1, #4208	; 0x1070
 8080278:	e016      	b.n	80802a8 <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 808027a:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 808027c:	f241 0170 	movw	r1, #4208	; 0x1070
 8080280:	480c      	ldr	r0, [pc, #48]	; (80802b4 <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 8080282:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080284:	f001 ff59 	bl	808213a <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
 8080288:	f240 51dc 	movw	r1, #1500	; 0x5dc
 808028c:	4809      	ldr	r0, [pc, #36]	; (80802b4 <_Z9PMICresetv+0x80>)
 808028e:	f001 ffde 	bl	808224e <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
 8080292:	2301      	movs	r3, #1
 8080294:	4621      	mov	r1, r4
 8080296:	9402      	str	r4, [sp, #8]
 8080298:	9401      	str	r4, [sp, #4]
 808029a:	9400      	str	r4, [sp, #0]
 808029c:	461a      	mov	r2, r3
 808029e:	4805      	ldr	r0, [pc, #20]	; (80802b4 <_Z9PMICresetv+0x80>)
 80802a0:	f002 f81d 	bl	80822de <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 80802a4:	f241 0110 	movw	r1, #4112	; 0x1010
 80802a8:	4802      	ldr	r0, [pc, #8]	; (80802b4 <_Z9PMICresetv+0x80>)
  }
}
 80802aa:	b004      	add	sp, #16
 80802ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 80802b0:	f002 b848 	b.w	8082344 <_ZN4PMIC16setChargeVoltageEt>
 80802b4:	2000052e 	.word	0x2000052e
 80802b8:	200005ae 	.word	0x200005ae
 80802bc:	20000504 	.word	0x20000504

080802c0 <_Z20meterParticlePublishv>:
  return 1;
}


bool meterParticlePublish(void)
{
 80802c0:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80802c2:	f000 ff47 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 80802c6:	4b05      	ldr	r3, [pc, #20]	; (80802dc <_Z20meterParticlePublishv+0x1c>)
 80802c8:	681b      	ldr	r3, [r3, #0]
 80802ca:	1ac0      	subs	r0, r0, r3
 80802cc:	4b04      	ldr	r3, [pc, #16]	; (80802e0 <_Z20meterParticlePublishv+0x20>)
 80802ce:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 80802d0:	4298      	cmp	r0, r3
 80802d2:	bf34      	ite	cc
 80802d4:	2000      	movcc	r0, #0
 80802d6:	2001      	movcs	r0, #1
 80802d8:	bd08      	pop	{r3, pc}
 80802da:	bf00      	nop
 80802dc:	20000530 	.word	0x20000530
 80802e0:	2000040c 	.word	0x2000040c

080802e4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.25>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80802e4:	b508      	push	{r3, lr}
    }
    else if (waiting && millis() >= (webhookTimeStamp + webhookWaitTime))
    {
      state = ERROR_STATE;
      if (verboseMode) {
        waitUntil(meterParticlePublish);
 80802e6:	f7ff ffeb 	bl	80802c0 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802ea:	b118      	cbz	r0, 80802f4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.25+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80802ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80802f0:	f7ff bfe6 	b.w	80802c0 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 80802f4:	f001 f8f2 	bl	80814dc <spark_process>
 80802f8:	e7f5      	b.n	80802e6 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.25+0x2>
	...

080802fc <_Z14fullModemResetv>:
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 80802fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80802fe:	f001 f8fd 	bl	80814fc <spark_cloud_flag_disconnect>
 8080302:	f000 ff27 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080306:	f643 2597 	movw	r5, #14999	; 0x3a97
 808030a:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808030c:	f001 f8fe 	bl	808150c <spark_cloud_flag_connected>
 8080310:	b140      	cbz	r0, 8080324 <_Z14fullModemResetv+0x28>
 8080312:	f000 ff1f 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
 8080316:	1b00      	subs	r0, r0, r4
 8080318:	42a8      	cmp	r0, r5
 808031a:	d803      	bhi.n	8080324 <_Z14fullModemResetv+0x28>
		delay(100);
 808031c:	2064      	movs	r0, #100	; 0x64
 808031e:	f001 f97d 	bl	808161c <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080322:	e7f3      	b.n	808030c <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080324:	2100      	movs	r1, #0
 8080326:	4b09      	ldr	r3, [pc, #36]	; (808034c <_Z14fullModemResetv+0x50>)
 8080328:	f247 5230 	movw	r2, #30000	; 0x7530
 808032c:	4608      	mov	r0, r1
 808032e:	f000 fee1 	bl	80810f4 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080336:	f001 f971 	bl	808161c <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 808033a:	4b05      	ldr	r3, [pc, #20]	; (8080350 <_Z14fullModemResetv+0x54>)
 808033c:	220a      	movs	r2, #10
 808033e:	681b      	ldr	r3, [r3, #0]
 8080340:	2101      	movs	r1, #1
 8080342:	4668      	mov	r0, sp
 8080344:	f002 f98e 	bl	8082664 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080348:	b003      	add	sp, #12
 808034a:	bd30      	pop	{r4, r5, pc}
 808034c:	08084b85 	.word	0x08084b85
 8080350:	20000584 	.word	0x20000584

08080354 <_Z11petWatchdogv>:

void watchdogISR() {
  watchDogFlag = true;
}

void petWatchdog() {
 8080354:	b508      	push	{r3, lr}
  digitalWrite(donePin,HIGH);
 8080356:	2101      	movs	r1, #1
 8080358:	2006      	movs	r0, #6
 808035a:	f002 fc88 	bl	8082c6e <digitalWrite>
  digitalWrite(donePin,LOW);
 808035e:	2100      	movs	r1, #0
 8080360:	2006      	movs	r0, #6
 8080362:	f002 fc84 	bl	8082c6e <digitalWrite>
  watchDogFlag = false;
 8080366:	4b02      	ldr	r3, [pc, #8]	; (8080370 <_Z11petWatchdogv+0x1c>)
 8080368:	2200      	movs	r2, #0
 808036a:	701a      	strb	r2, [r3, #0]
 808036c:	bd08      	pop	{r3, pc}
 808036e:	bf00      	nop
 8080370:	2000059d 	.word	0x2000059d

08080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080374:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080376:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080378:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808037a:	b17c      	cbz	r4, 808039c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808037c:	6863      	ldr	r3, [r4, #4]
 808037e:	3b01      	subs	r3, #1
 8080380:	6063      	str	r3, [r4, #4]
 8080382:	b95b      	cbnz	r3, 808039c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080384:	6823      	ldr	r3, [r4, #0]
 8080386:	4620      	mov	r0, r4
 8080388:	689b      	ldr	r3, [r3, #8]
 808038a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808038c:	68a3      	ldr	r3, [r4, #8]
 808038e:	3b01      	subs	r3, #1
 8080390:	60a3      	str	r3, [r4, #8]
 8080392:	b91b      	cbnz	r3, 808039c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080394:	6823      	ldr	r3, [r4, #0]
 8080396:	4620      	mov	r0, r4
 8080398:	68db      	ldr	r3, [r3, #12]
 808039a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808039c:	4628      	mov	r0, r5
 808039e:	bd38      	pop	{r3, r4, r5, pc}

080803a0 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
 80803a0:	b510      	push	{r4, lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, stateOfCharge,resetCount, alertCount);
 80803a2:	4b1a      	ldr	r3, [pc, #104]	; (808040c <_Z9sendEventv+0x6c>)
    break;
  }
}

void sendEvent()
{
 80803a4:	b0ca      	sub	sp, #296	; 0x128
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, stateOfCharge,resetCount, alertCount);
 80803a6:	681b      	ldr	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80803a8:	2400      	movs	r4, #0
 80803aa:	9306      	str	r3, [sp, #24]
 80803ac:	4b18      	ldr	r3, [pc, #96]	; (8080410 <_Z9sendEventv+0x70>)
 80803ae:	681b      	ldr	r3, [r3, #0]
 80803b0:	9305      	str	r3, [sp, #20]
 80803b2:	4b18      	ldr	r3, [pc, #96]	; (8080414 <_Z9sendEventv+0x74>)
 80803b4:	681b      	ldr	r3, [r3, #0]
 80803b6:	9304      	str	r3, [sp, #16]
 80803b8:	4b17      	ldr	r3, [pc, #92]	; (8080418 <_Z9sendEventv+0x78>)
 80803ba:	6818      	ldr	r0, [r3, #0]
 80803bc:	f002 fff4 	bl	80833a8 <__aeabi_f2d>
 80803c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80803c4:	4b15      	ldr	r3, [pc, #84]	; (808041c <_Z9sendEventv+0x7c>)
 80803c6:	6818      	ldr	r0, [r3, #0]
 80803c8:	f002 ffee 	bl	80833a8 <__aeabi_f2d>
 80803cc:	4a14      	ldr	r2, [pc, #80]	; (8080420 <_Z9sendEventv+0x80>)
 80803ce:	e9cd 0100 	strd	r0, r1, [sp]
 80803d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80803d6:	a80a      	add	r0, sp, #40	; 0x28
 80803d8:	f001 f908 	bl	80815ec <snprintf>
 80803dc:	4b11      	ldr	r3, [pc, #68]	; (8080424 <_Z9sendEventv+0x84>)
  Particle.publish("Cellular_Soil_Hook", data, PRIVATE);
 80803de:	aa0a      	add	r2, sp, #40	; 0x28
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80803e0:	781b      	ldrb	r3, [r3, #0]
 80803e2:	4911      	ldr	r1, [pc, #68]	; (8080428 <_Z9sendEventv+0x88>)
 80803e4:	a808      	add	r0, sp, #32
 80803e6:	f88d 4000 	strb.w	r4, [sp]
 80803ea:	f7ff fe7b 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80803ee:	a809      	add	r0, sp, #36	; 0x24
 80803f0:	f7ff ffc0 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 80803f4:	f002 fa16 	bl	8082824 <_ZN9TimeClass4hourEv>
 80803f8:	4b0c      	ldr	r3, [pc, #48]	; (808042c <_Z9sendEventv+0x8c>)
 80803fa:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();
 80803fc:	f002 fa26 	bl	808284c <_ZN9TimeClass3dayEv>
 8080400:	4b0b      	ldr	r3, [pc, #44]	; (8080430 <_Z9sendEventv+0x90>)
 8080402:	7018      	strb	r0, [r3, #0]
  doneEnabled = false;
 8080404:	4b0b      	ldr	r3, [pc, #44]	; (8080434 <_Z9sendEventv+0x94>)
 8080406:	701c      	strb	r4, [r3, #0]
}
 8080408:	b04a      	add	sp, #296	; 0x128
 808040a:	bd10      	pop	{r4, pc}
 808040c:	20000534 	.word	0x20000534
 8080410:	2000057c 	.word	0x2000057c
 8080414:	20000538 	.word	0x20000538
 8080418:	2000051c 	.word	0x2000051c
 808041c:	20000590 	.word	0x20000590
 8080420:	08084b92 	.word	0x08084b92
 8080424:	2000050c 	.word	0x2000050c
 8080428:	08084be2 	.word	0x08084be2
 808042c:	20000580 	.word	0x20000580
 8080430:	2000052f 	.word	0x2000052f
 8080434:	20000414 	.word	0x20000414

08080438 <loop>:
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);           // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
 8080438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  switch(state) {
 808043a:	4ca1      	ldr	r4, [pc, #644]	; (80806c0 <loop+0x288>)
 808043c:	7823      	ldrb	r3, [r4, #0]
 808043e:	3b01      	subs	r3, #1
 8080440:	2b05      	cmp	r3, #5
 8080442:	f200 8183 	bhi.w	808074c <loop+0x314>
 8080446:	e8df f013 	tbh	[pc, r3, lsl #1]
 808044a:	0119      	.short	0x0119
 808044c:	002c0006 	.word	0x002c0006
 8080450:	007d0042 	.word	0x007d0042
 8080454:	00af      	.short	0x00af
  case IDLE_STATE:
    if (watchDogFlag) petWatchdog();
 8080456:	4b9b      	ldr	r3, [pc, #620]	; (80806c4 <loop+0x28c>)
 8080458:	781b      	ldrb	r3, [r3, #0]
 808045a:	b10b      	cbz	r3, 8080460 <loop+0x28>
 808045c:	f7ff ff7a 	bl	8080354 <_Z11petWatchdogv>
    if (!waiting && lowPowerMode && millis() > (keepAwakeTimeStamp+sleepWait)) state = SLEEPING_STATE;
 8080460:	4b99      	ldr	r3, [pc, #612]	; (80806c8 <loop+0x290>)
 8080462:	781b      	ldrb	r3, [r3, #0]
 8080464:	b963      	cbnz	r3, 8080480 <loop+0x48>
 8080466:	4b99      	ldr	r3, [pc, #612]	; (80806cc <loop+0x294>)
 8080468:	781b      	ldrb	r3, [r3, #0]
 808046a:	b14b      	cbz	r3, 8080480 <loop+0x48>
 808046c:	f000 fe72 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
 8080470:	4b97      	ldr	r3, [pc, #604]	; (80806d0 <loop+0x298>)
 8080472:	681a      	ldr	r2, [r3, #0]
 8080474:	4b97      	ldr	r3, [pc, #604]	; (80806d4 <loop+0x29c>)
 8080476:	681b      	ldr	r3, [r3, #0]
 8080478:	4413      	add	r3, r2
 808047a:	4283      	cmp	r3, r0
 808047c:	f0c0 8163 	bcc.w	8080746 <loop+0x30e>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;    // We want to report on the hour but not after bedtime
 8080480:	f002 f9d0 	bl	8082824 <_ZN9TimeClass4hourEv>
 8080484:	4b94      	ldr	r3, [pc, #592]	; (80806d8 <loop+0x2a0>)
 8080486:	781b      	ldrb	r3, [r3, #0]
 8080488:	4298      	cmp	r0, r3
 808048a:	bf1c      	itt	ne
 808048c:	2303      	movne	r3, #3
 808048e:	7023      	strbne	r3, [r4, #0]
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;               // The battery is low - sleep
 8080490:	4b92      	ldr	r3, [pc, #584]	; (80806dc <loop+0x2a4>)
 8080492:	681a      	ldr	r2, [r3, #0]
 8080494:	4b92      	ldr	r3, [pc, #584]	; (80806e0 <loop+0x2a8>)
 8080496:	681b      	ldr	r3, [r3, #0]
 8080498:	429a      	cmp	r2, r3
 808049a:	f300 8157 	bgt.w	808074c <loop+0x314>
 808049e:	2305      	movs	r3, #5
 80804a0:	e013      	b.n	80804ca <loop+0x92>
    break;

  case MEASURING_STATE:
    if (!takeMeasurements())
 80804a2:	f7ff fe59 	bl	8080158 <_Z16takeMeasurementsv>
 80804a6:	4605      	mov	r5, r0
 80804a8:	b970      	cbnz	r0, 80804c8 <loop+0x90>
    {
      state = ERROR_STATE;
 80804aa:	2301      	movs	r3, #1
 80804ac:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 80804ae:	4b8d      	ldr	r3, [pc, #564]	; (80806e4 <loop+0x2ac>)
 80804b0:	781b      	ldrb	r3, [r3, #0]
 80804b2:	2b00      	cmp	r3, #0
 80804b4:	f000 814a 	beq.w	808074c <loop+0x314>
        waitUntil(meterParticlePublish);
 80804b8:	f7ff ff14 	bl	80802e4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.25>
 80804bc:	4b8a      	ldr	r3, [pc, #552]	; (80806e8 <loop+0x2b0>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
 80804be:	4a8b      	ldr	r2, [pc, #556]	; (80806ec <loop+0x2b4>)
 80804c0:	781b      	ldrb	r3, [r3, #0]
 80804c2:	f88d 5000 	strb.w	r5, [sp]
 80804c6:	e0ce      	b.n	8080666 <loop+0x22e>
        lastPublish = millis();
      }
    }
    else state = REPORTING_STATE;
 80804c8:	2306      	movs	r3, #6
 80804ca:	7023      	strb	r3, [r4, #0]
 80804cc:	e13e      	b.n	808074c <loop+0x314>
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (!readyForBed)                                                   // Only do these things once - at bedtime
 80804ce:	4b88      	ldr	r3, [pc, #544]	; (80806f0 <loop+0x2b8>)
 80804d0:	781c      	ldrb	r4, [r3, #0]
 80804d2:	461d      	mov	r5, r3
 80804d4:	bb64      	cbnz	r4, 8080530 <loop+0xf8>
 80804d6:	f001 f819 	bl	808150c <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
 80804da:	b1d0      	cbz	r0, 8080512 <loop+0xda>
        if (verboseMode) {
 80804dc:	4b81      	ldr	r3, [pc, #516]	; (80806e4 <loop+0x2ac>)
 80804de:	781b      	ldrb	r3, [r3, #0]
 80804e0:	b18b      	cbz	r3, 8080506 <loop+0xce>
          waitUntil(meterParticlePublish);
 80804e2:	f7ff feff 	bl	80802e4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.25>
 80804e6:	4b80      	ldr	r3, [pc, #512]	; (80806e8 <loop+0x2b0>)
          Particle.publish("State","Going to Sleep",PRIVATE);
 80804e8:	4a82      	ldr	r2, [pc, #520]	; (80806f4 <loop+0x2bc>)
 80804ea:	781b      	ldrb	r3, [r3, #0]
 80804ec:	4982      	ldr	r1, [pc, #520]	; (80806f8 <loop+0x2c0>)
 80804ee:	a802      	add	r0, sp, #8
 80804f0:	f88d 4000 	strb.w	r4, [sp]
 80804f4:	f7ff fdf6 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 80804f8:	a803      	add	r0, sp, #12
 80804fa:	f7ff ff3b 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80804fe:	f000 fe29 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 8080502:	4b7e      	ldr	r3, [pc, #504]	; (80806fc <loop+0x2c4>)
 8080504:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 8080506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808050a:	f001 f887 	bl	808161c <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 808050e:	f7ff fe81 	bl	8080214 <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
 8080512:	f002 fbfb 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080516:	4b7a      	ldr	r3, [pc, #488]	; (8080700 <loop+0x2c8>)
 8080518:	2002      	movs	r0, #2
 808051a:	7819      	ldrb	r1, [r3, #0]
 808051c:	f7ff fde0 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
      ledState = false;
 8080520:	4b78      	ldr	r3, [pc, #480]	; (8080704 <loop+0x2cc>)
 8080522:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080524:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
 8080526:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080528:	f002 fba1 	bl	8082c6e <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
 808052c:	2301      	movs	r3, #1
 808052e:	702b      	strb	r3, [r5, #0]
    }
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
 8080530:	f002 f982 	bl	8082838 <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
 8080534:	4b74      	ldr	r3, [pc, #464]	; (8080708 <loop+0x2d0>)
 8080536:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 808053a:	223c      	movs	r2, #60	; 0x3c
 808053c:	681b      	ldr	r3, [r3, #0]
 808053e:	4342      	muls	r2, r0
 8080540:	2102      	movs	r1, #2
 8080542:	e02d      	b.n	80805a0 <loop+0x168>
 8080544:	f000 ffe2 	bl	808150c <spark_cloud_flag_connected>
    } break;


  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
      if (Particle.connected()) {
 8080548:	b1d8      	cbz	r0, 8080582 <loop+0x14a>
        if (verboseMode) {
 808054a:	4b66      	ldr	r3, [pc, #408]	; (80806e4 <loop+0x2ac>)
 808054c:	781b      	ldrb	r3, [r3, #0]
 808054e:	b193      	cbz	r3, 8080576 <loop+0x13e>
          waitUntil(meterParticlePublish);
 8080550:	f7ff fec8 	bl	80802e4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.25>
 8080554:	4b64      	ldr	r3, [pc, #400]	; (80806e8 <loop+0x2b0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080556:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080558:	781b      	ldrb	r3, [r3, #0]
          Particle.publish("State","Low Battery - Sleeping",PRIVATE);
 808055a:	4967      	ldr	r1, [pc, #412]	; (80806f8 <loop+0x2c0>)
 808055c:	f88d 2000 	strb.w	r2, [sp]
 8080560:	a802      	add	r0, sp, #8
 8080562:	4a6a      	ldr	r2, [pc, #424]	; (808070c <loop+0x2d4>)
 8080564:	f7ff fdbe 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 8080568:	a803      	add	r0, sp, #12
 808056a:	f7ff ff03 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808056e:	f000 fdf1 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 8080572:	4b62      	ldr	r3, [pc, #392]	; (80806fc <loop+0x2c4>)
 8080574:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 8080576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808057a:	f001 f84f 	bl	808161c <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 808057e:	f7ff fe49 	bl	8080214 <_Z22disconnectFromParticlev>
      }
      ledState = false;
 8080582:	4b60      	ldr	r3, [pc, #384]	; (8080704 <loop+0x2cc>)
 8080584:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080586:	2007      	movs	r0, #7
          lastPublish = millis();
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      ledState = false;
 8080588:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 808058a:	f002 fb70 	bl	8082c6e <digitalWrite>
      int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 808058e:	f002 f953 	bl	8082838 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
 8080592:	223c      	movs	r2, #60	; 0x3c
 8080594:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080598:	4b5b      	ldr	r3, [pc, #364]	; (8080708 <loop+0x2d0>)
 808059a:	4342      	muls	r2, r0
 808059c:	681b      	ldr	r3, [r3, #0]
 808059e:	2101      	movs	r1, #1
 80805a0:	a802      	add	r0, sp, #8
 80805a2:	f002 f85f 	bl	8082664 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 80805a6:	e0d1      	b.n	808074c <loop+0x314>
 80805a8:	f000 ffb0 	bl	808150c <spark_cloud_flag_connected>

  case REPORTING_STATE:                                                 // Reporting - hourly or on command
    if (!Particle.connected()) connectToParticle();
 80805ac:	b910      	cbnz	r0, 80805b4 <loop+0x17c>
 80805ae:	f7ff fdf9 	bl	80801a4 <_Z17connectToParticlev>
 80805b2:	e0cb      	b.n	808074c <loop+0x314>
    else if (!waiting)
 80805b4:	4d44      	ldr	r5, [pc, #272]	; (80806c8 <loop+0x290>)
 80805b6:	782b      	ldrb	r3, [r5, #0]
 80805b8:	b9eb      	cbnz	r3, 80805f6 <loop+0x1be>
    {
      if (verboseMode) {
 80805ba:	4b4a      	ldr	r3, [pc, #296]	; (80806e4 <loop+0x2ac>)
 80805bc:	781b      	ldrb	r3, [r3, #0]
 80805be:	b18b      	cbz	r3, 80805e4 <loop+0x1ac>
        waitUntil(meterParticlePublish);
 80805c0:	f7ff fe90 	bl	80802e4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.25>
 80805c4:	4b48      	ldr	r3, [pc, #288]	; (80806e8 <loop+0x2b0>)
        Particle.publish("State","Reporting",PRIVATE,PRIVATE);
 80805c6:	4a52      	ldr	r2, [pc, #328]	; (8080710 <loop+0x2d8>)
 80805c8:	781b      	ldrb	r3, [r3, #0]
 80805ca:	494b      	ldr	r1, [pc, #300]	; (80806f8 <loop+0x2c0>)
 80805cc:	f88d 3000 	strb.w	r3, [sp]
 80805d0:	a802      	add	r0, sp, #8
 80805d2:	f7ff fd87 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 80805d6:	a803      	add	r0, sp, #12
 80805d8:	f7ff fecc 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80805dc:	f000 fdba 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 80805e0:	4b46      	ldr	r3, [pc, #280]	; (80806fc <loop+0x2c4>)
 80805e2:	6018      	str	r0, [r3, #0]
 80805e4:	f000 fdb6 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
      }
      webhookTimeStamp = millis();
 80805e8:	4b4a      	ldr	r3, [pc, #296]	; (8080714 <loop+0x2dc>)
 80805ea:	6018      	str	r0, [r3, #0]
      waiting = true;                                                   // Make sure we set the flag for flow through this case
 80805ec:	2301      	movs	r3, #1
 80805ee:	702b      	strb	r3, [r5, #0]
      sendEvent();                                                      // Send the data to Ubidots
 80805f0:	f7ff fed6 	bl	80803a0 <_Z9sendEventv>
 80805f4:	e0aa      	b.n	808074c <loop+0x314>
    }
    else if (waiting && doneEnabled)
 80805f6:	4b48      	ldr	r3, [pc, #288]	; (8080718 <loop+0x2e0>)
 80805f8:	781e      	ldrb	r6, [r3, #0]
 80805fa:	b1f6      	cbz	r6, 808063a <loop+0x202>
    {
      if (verboseMode) {
 80805fc:	4b39      	ldr	r3, [pc, #228]	; (80806e4 <loop+0x2ac>)
 80805fe:	781b      	ldrb	r3, [r3, #0]
 8080600:	b193      	cbz	r3, 8080628 <loop+0x1f0>
        waitUntil(meterParticlePublish);
 8080602:	f7ff fe6f 	bl	80802e4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.25>
 8080606:	4b38      	ldr	r3, [pc, #224]	; (80806e8 <loop+0x2b0>)
        Particle.publish("State","Idle",PRIVATE);
 8080608:	2200      	movs	r2, #0
 808060a:	781b      	ldrb	r3, [r3, #0]
 808060c:	493a      	ldr	r1, [pc, #232]	; (80806f8 <loop+0x2c0>)
 808060e:	f88d 2000 	strb.w	r2, [sp]
 8080612:	a802      	add	r0, sp, #8
 8080614:	4a41      	ldr	r2, [pc, #260]	; (808071c <loop+0x2e4>)
 8080616:	f7ff fd65 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 808061a:	a803      	add	r0, sp, #12
 808061c:	f7ff feaa 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080620:	f000 fd98 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8080624:	4b35      	ldr	r3, [pc, #212]	; (80806fc <loop+0x2c4>)
 8080626:	6018      	str	r0, [r3, #0]
      }
      state = IDLE_STATE;       // This is how we know if Ubidots got the data
 8080628:	2302      	movs	r3, #2
 808062a:	7023      	strb	r3, [r4, #0]
      waiting = false;
 808062c:	2300      	movs	r3, #0
 808062e:	702b      	strb	r3, [r5, #0]
 8080630:	f000 fd90 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
      keepAwakeTimeStamp = millis();
 8080634:	4b26      	ldr	r3, [pc, #152]	; (80806d0 <loop+0x298>)
 8080636:	6018      	str	r0, [r3, #0]
 8080638:	e088      	b.n	808074c <loop+0x314>
 808063a:	f000 fd8b 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (waiting && millis() >= (webhookTimeStamp + webhookWaitTime))
 808063e:	4b35      	ldr	r3, [pc, #212]	; (8080714 <loop+0x2dc>)
 8080640:	681a      	ldr	r2, [r3, #0]
 8080642:	4b37      	ldr	r3, [pc, #220]	; (8080720 <loop+0x2e8>)
 8080644:	681b      	ldr	r3, [r3, #0]
 8080646:	4413      	add	r3, r2
 8080648:	4298      	cmp	r0, r3
 808064a:	d37f      	bcc.n	808074c <loop+0x314>
    {
      state = ERROR_STATE;
 808064c:	2301      	movs	r3, #1
 808064e:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 8080650:	4b24      	ldr	r3, [pc, #144]	; (80806e4 <loop+0x2ac>)
 8080652:	781b      	ldrb	r3, [r3, #0]
 8080654:	2b00      	cmp	r3, #0
 8080656:	d079      	beq.n	808074c <loop+0x314>
        waitUntil(meterParticlePublish);
 8080658:	f7ff fe44 	bl	80802e4 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.25>
 808065c:	4b22      	ldr	r3, [pc, #136]	; (80806e8 <loop+0x2b0>)
        Particle.publish("State","Error - Reporting Timed Out",PRIVATE);
 808065e:	4a31      	ldr	r2, [pc, #196]	; (8080724 <loop+0x2ec>)
 8080660:	781b      	ldrb	r3, [r3, #0]
 8080662:	f88d 6000 	strb.w	r6, [sp]
 8080666:	4924      	ldr	r1, [pc, #144]	; (80806f8 <loop+0x2c0>)
 8080668:	a802      	add	r0, sp, #8
 808066a:	f7ff fd3b 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 808066e:	a803      	add	r0, sp, #12
 8080670:	f7ff fe80 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080674:	f000 fd6e 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8080678:	4b20      	ldr	r3, [pc, #128]	; (80806fc <loop+0x2c4>)
 808067a:	e7dc      	b.n	8080636 <loop+0x1fe>
 808067c:	f000 fd6a 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
      }
    }
    break;

  case ERROR_STATE:                                          // To be enhanced - where we deal with errors
    if (millis() > resetTimeStamp + resetWait)
 8080680:	4b29      	ldr	r3, [pc, #164]	; (8080728 <loop+0x2f0>)
 8080682:	681a      	ldr	r2, [r3, #0]
 8080684:	4b29      	ldr	r3, [pc, #164]	; (808072c <loop+0x2f4>)
 8080686:	681b      	ldr	r3, [r3, #0]
 8080688:	4413      	add	r3, r2
 808068a:	4298      	cmp	r0, r3
 808068c:	d95e      	bls.n	808074c <loop+0x314>
 808068e:	4b16      	ldr	r3, [pc, #88]	; (80806e8 <loop+0x2b0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080690:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080692:	781b      	ldrb	r3, [r3, #0]
    {
      Particle.publish("State","ERROR_STATE - Resetting",PRIVATE);
 8080694:	4a26      	ldr	r2, [pc, #152]	; (8080730 <loop+0x2f8>)
 8080696:	4918      	ldr	r1, [pc, #96]	; (80806f8 <loop+0x2c0>)
 8080698:	a802      	add	r0, sp, #8
 808069a:	f88d 4000 	strb.w	r4, [sp]
 808069e:	f7ff fd21 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 80806a2:	a803      	add	r0, sp, #12
 80806a4:	f7ff fe66 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                          // This makes sure it goes through before reset
 80806a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80806ac:	f000 ffb6 	bl	808161c <delay>
      if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 80806b0:	4b13      	ldr	r3, [pc, #76]	; (8080700 <loop+0x2c8>)
 80806b2:	681b      	ldr	r3, [r3, #0]
 80806b4:	2b03      	cmp	r3, #3
 80806b6:	dc3d      	bgt.n	8080734 <loop+0x2fc>
 80806b8:	f001 ffd0 	bl	808265c <_ZN11SystemClass5resetEv>
 80806bc:	e046      	b.n	808074c <loop+0x314>
 80806be:	bf00      	nop
 80806c0:	2000052d 	.word	0x2000052d
 80806c4:	2000059d 	.word	0x2000059d
 80806c8:	2000059c 	.word	0x2000059c
 80806cc:	2000058e 	.word	0x2000058e
 80806d0:	20000594 	.word	0x20000594
 80806d4:	20000408 	.word	0x20000408
 80806d8:	20000580 	.word	0x20000580
 80806dc:	20000538 	.word	0x20000538
 80806e0:	20000504 	.word	0x20000504
 80806e4:	2000058f 	.word	0x2000058f
 80806e8:	2000050c 	.word	0x2000050c
 80806ec:	08084bf5 	.word	0x08084bf5
 80806f0:	200005c0 	.word	0x200005c0
 80806f4:	08084c15 	.word	0x08084c15
 80806f8:	08084c0f 	.word	0x08084c0f
 80806fc:	20000530 	.word	0x20000530
 8080700:	2000057c 	.word	0x2000057c
 8080704:	2000052c 	.word	0x2000052c
 8080708:	20000584 	.word	0x20000584
 808070c:	08084c24 	.word	0x08084c24
 8080710:	08084c3b 	.word	0x08084c3b
 8080714:	20000508 	.word	0x20000508
 8080718:	20000414 	.word	0x20000414
 808071c:	08084c45 	.word	0x08084c45
 8080720:	20000410 	.word	0x20000410
 8080724:	08084c4a 	.word	0x08084c4a
 8080728:	20000598 	.word	0x20000598
 808072c:	20000400 	.word	0x20000400
 8080730:	08084c66 	.word	0x08084c66
      else {
        EEPROM.write(MEM_MAP::resetCountAddr,0);            // Zero the ResetCount
 8080734:	f002 faea 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080738:	4621      	mov	r1, r4
 808073a:	2002      	movs	r0, #2
 808073c:	f7ff fcd0 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
        fullModemReset();                                   // Full Modem reset and reboot
 8080740:	f7ff fddc 	bl	80802fc <_Z14fullModemResetv>
      }
    }
    break;
  }
}
 8080744:	e002      	b.n	808074c <loop+0x314>
{

  switch(state) {
  case IDLE_STATE:
    if (watchDogFlag) petWatchdog();
    if (!waiting && lowPowerMode && millis() > (keepAwakeTimeStamp+sleepWait)) state = SLEEPING_STATE;
 8080746:	2304      	movs	r3, #4
 8080748:	7023      	strb	r3, [r4, #0]
 808074a:	e699      	b.n	8080480 <loop+0x48>
        fullModemReset();                                   // Full Modem reset and reboot
      }
    }
    break;
  }
}
 808074c:	b004      	add	sp, #16
 808074e:	bd70      	pop	{r4, r5, r6, pc}

08080750 <_Z14UbidotsHandlerPKcS0_>:
  currentDailyPeriod = Time.day();
  doneEnabled = false;
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 8080750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080752:	b085      	sub	sp, #20
  // Response Template: "{{temperature.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 8080754:	4608      	mov	r0, r1
  currentDailyPeriod = Time.day();
  doneEnabled = false;
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 8080756:	af02      	add	r7, sp, #8
 8080758:	460d      	mov	r5, r1
  // Response Template: "{{temperature.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 808075a:	f003 fd84 	bl	8084266 <strlen>
 808075e:	f100 0308 	add.w	r3, r0, #8
 8080762:	f023 0307 	bic.w	r3, r3, #7
  if ((responseCode == 200) || (responseCode == 201))
  {
    Particle.publish("State","Response Received",PRIVATE);
    doneEnabled = true;                                   // Successful response - can pet the dog again
  }
  else Particle.publish("Ubidots Hook", dataCopy,PRIVATE);       // Publish the response code
 8080766:	466e      	mov	r6, sp
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
  // Response Template: "{{temperature.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 8080768:	ebad 0d03 	sub.w	sp, sp, r3
 808076c:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                        // Copy - overflow safe
 808076e:	1c42      	adds	r2, r0, #1
 8080770:	4629      	mov	r1, r5
 8080772:	4620      	mov	r0, r4
 8080774:	f003 fd94 	bl	80842a0 <strncpy>
  if (!strlen(dataCopy)) {                                          // First check to see if there is any data
 8080778:	f89d 2008 	ldrb.w	r2, [sp, #8]
 808077c:	4d14      	ldr	r5, [pc, #80]	; (80807d0 <_Z14UbidotsHandlerPKcS0_+0x80>)
 808077e:	b922      	cbnz	r2, 808078a <_Z14UbidotsHandlerPKcS0_+0x3a>
 8080780:	782b      	ldrb	r3, [r5, #0]
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
 8080782:	f88d 2000 	strb.w	r2, [sp]
 8080786:	4a13      	ldr	r2, [pc, #76]	; (80807d4 <_Z14UbidotsHandlerPKcS0_+0x84>)
 8080788:	e016      	b.n	80807b8 <_Z14UbidotsHandlerPKcS0_+0x68>
    return;
  }
  int responseCode = atoi(dataCopy);                    // Response is only a single number thanks to Template
 808078a:	4620      	mov	r0, r4
 808078c:	f003 fbf8 	bl	8083f80 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8080790:	38c8      	subs	r0, #200	; 0xc8
 8080792:	2200      	movs	r2, #0
 8080794:	2801      	cmp	r0, #1
 8080796:	782b      	ldrb	r3, [r5, #0]
  {
    Particle.publish("State","Response Received",PRIVATE);
 8080798:	f88d 2000 	strb.w	r2, [sp]
  if (!strlen(dataCopy)) {                                          // First check to see if there is any data
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
    return;
  }
  int responseCode = atoi(dataCopy);                    // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
 808079c:	d80b      	bhi.n	80807b6 <_Z14UbidotsHandlerPKcS0_+0x66>
  {
    Particle.publish("State","Response Received",PRIVATE);
 808079e:	4a0e      	ldr	r2, [pc, #56]	; (80807d8 <_Z14UbidotsHandlerPKcS0_+0x88>)
 80807a0:	490e      	ldr	r1, [pc, #56]	; (80807dc <_Z14UbidotsHandlerPKcS0_+0x8c>)
 80807a2:	4638      	mov	r0, r7
 80807a4:	f7ff fc9e 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 80807a8:	1d38      	adds	r0, r7, #4
 80807aa:	f7ff fde3 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    doneEnabled = true;                                   // Successful response - can pet the dog again
 80807ae:	4b0c      	ldr	r3, [pc, #48]	; (80807e0 <_Z14UbidotsHandlerPKcS0_+0x90>)
 80807b0:	2201      	movs	r2, #1
 80807b2:	701a      	strb	r2, [r3, #0]
 80807b4:	e007      	b.n	80807c6 <_Z14UbidotsHandlerPKcS0_+0x76>
  }
  else Particle.publish("Ubidots Hook", dataCopy,PRIVATE);       // Publish the response code
 80807b6:	4622      	mov	r2, r4
 80807b8:	4638      	mov	r0, r7
 80807ba:	490a      	ldr	r1, [pc, #40]	; (80807e4 <_Z14UbidotsHandlerPKcS0_+0x94>)
 80807bc:	f7ff fc92 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 80807c0:	1d38      	adds	r0, r7, #4
 80807c2:	f7ff fdd7 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80807c6:	46b5      	mov	sp, r6
}
 80807c8:	370c      	adds	r7, #12
 80807ca:	46bd      	mov	sp, r7
 80807cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80807ce:	bf00      	nop
 80807d0:	2000050c 	.word	0x2000050c
 80807d4:	08084c7e 	.word	0x08084c7e
 80807d8:	08084c93 	.word	0x08084c93
 80807dc:	08084c0f 	.word	0x08084c0f
 80807e0:	20000414 	.word	0x20000414
 80807e4:	08084c86 	.word	0x08084c86

080807e8 <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
 80807e8:	b530      	push	{r4, r5, lr}
 80807ea:	4924      	ldr	r1, [pc, #144]	; (808087c <_Z12setSolarMode6String+0x94>)
 80807ec:	b085      	sub	sp, #20
 80807ee:	4605      	mov	r5, r0
 80807f0:	f001 ff05 	bl	80825fe <_ZNK6String6equalsEPKc>
  if (command == "1")
 80807f4:	4604      	mov	r4, r0
 80807f6:	b1d0      	cbz	r0, 808082e <_Z12setSolarMode6String+0x46>
  {
    solarPowerMode = true;
 80807f8:	4b21      	ldr	r3, [pc, #132]	; (8080880 <_Z12setSolarMode6String+0x98>)
 80807fa:	2401      	movs	r4, #1
 80807fc:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80807fe:	f002 fa85 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080802:	2004      	movs	r0, #4
 8080804:	f7ff fc6a 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.17>
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
 8080808:	4d1e      	ldr	r5, [pc, #120]	; (8080884 <_Z12setSolarMode6String+0x9c>)
 808080a:	f040 0004 	orr.w	r0, r0, #4
 808080e:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister);// Write it to the register
 8080810:	f002 fa7c 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080814:	7829      	ldrb	r1, [r5, #0]
 8080816:	2004      	movs	r0, #4
 8080818:	f7ff fc62 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
    PMICreset();                                               // Change the power management Settings
 808081c:	f7ff fd0a 	bl	8080234 <_Z9PMICresetv>
 8080820:	4b19      	ldr	r3, [pc, #100]	; (8080888 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
 8080822:	2200      	movs	r2, #0
 8080824:	781b      	ldrb	r3, [r3, #0]
 8080826:	f88d 2000 	strb.w	r2, [sp]
 808082a:	4a18      	ldr	r2, [pc, #96]	; (808088c <_Z12setSolarMode6String+0xa4>)
 808082c:	e01c      	b.n	8080868 <_Z12setSolarMode6String+0x80>
 808082e:	4918      	ldr	r1, [pc, #96]	; (8080890 <_Z12setSolarMode6String+0xa8>)
 8080830:	4628      	mov	r0, r5
 8080832:	f001 fee4 	bl	80825fe <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 8080836:	b1f8      	cbz	r0, 8080878 <_Z12setSolarMode6String+0x90>
  {
    solarPowerMode = false;
 8080838:	4b11      	ldr	r3, [pc, #68]	; (8080880 <_Z12setSolarMode6String+0x98>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 808083a:	4d12      	ldr	r5, [pc, #72]	; (8080884 <_Z12setSolarMode6String+0x9c>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
 808083c:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 808083e:	f002 fa65 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080842:	2004      	movs	r0, #4
 8080844:	f7ff fc4a 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.17>
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 8080848:	f020 0004 	bic.w	r0, r0, #4
 808084c:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 808084e:	f002 fa5d 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080852:	7829      	ldrb	r1, [r5, #0]
 8080854:	2004      	movs	r0, #4
 8080856:	f7ff fc43 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
    PMICreset();                                                // Change the power management settings
 808085a:	f7ff fceb 	bl	8080234 <_Z9PMICresetv>
 808085e:	4b0a      	ldr	r3, [pc, #40]	; (8080888 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Cleared Solar Powered Mode",PRIVATE);
 8080860:	4a0c      	ldr	r2, [pc, #48]	; (8080894 <_Z12setSolarMode6String+0xac>)
 8080862:	781b      	ldrb	r3, [r3, #0]
 8080864:	f88d 4000 	strb.w	r4, [sp]
 8080868:	490b      	ldr	r1, [pc, #44]	; (8080898 <_Z12setSolarMode6String+0xb0>)
 808086a:	a802      	add	r0, sp, #8
 808086c:	f7ff fc3a 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 8080870:	a803      	add	r0, sp, #12
 8080872:	f7ff fd7f 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 8080876:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080878:	b005      	add	sp, #20
 808087a:	bd30      	pop	{r4, r5, pc}
 808087c:	08084ee0 	.word	0x08084ee0
 8080880:	200005ae 	.word	0x200005ae
 8080884:	200005bf 	.word	0x200005bf
 8080888:	2000050c 	.word	0x2000050c
 808088c:	08084ca5 	.word	0x08084ca5
 8080890:	08084df0 	.word	0x08084df0
 8080894:	08084cbc 	.word	0x08084cbc
 8080898:	08084cd2 	.word	0x08084cd2

0808089c <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 808089c:	b530      	push	{r4, r5, lr}
 808089e:	4922      	ldr	r1, [pc, #136]	; (8080928 <_Z14setVerboseMode6String+0x8c>)
 80808a0:	b085      	sub	sp, #20
 80808a2:	4605      	mov	r5, r0
 80808a4:	f001 feab 	bl	80825fe <_ZNK6String6equalsEPKc>
  if (command == "1")
 80808a8:	4604      	mov	r4, r0
 80808aa:	b1c0      	cbz	r0, 80808de <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
 80808ac:	4b1f      	ldr	r3, [pc, #124]	; (808092c <_Z14setVerboseMode6String+0x90>)
 80808ae:	2401      	movs	r4, #1
 80808b0:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80808b2:	f002 fa2b 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 80808b6:	2004      	movs	r0, #4
 80808b8:	f7ff fc10 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.17>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 80808bc:	4d1c      	ldr	r5, [pc, #112]	; (8080930 <_Z14setVerboseMode6String+0x94>)
 80808be:	f040 0008 	orr.w	r0, r0, #8
 80808c2:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80808c4:	f002 fa22 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 80808c8:	7829      	ldrb	r1, [r5, #0]
 80808ca:	2004      	movs	r0, #4
 80808cc:	f7ff fc08 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
 80808d0:	4b18      	ldr	r3, [pc, #96]	; (8080934 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 80808d2:	2200      	movs	r2, #0
 80808d4:	781b      	ldrb	r3, [r3, #0]
 80808d6:	f88d 2000 	strb.w	r2, [sp]
 80808da:	4a17      	ldr	r2, [pc, #92]	; (8080938 <_Z14setVerboseMode6String+0x9c>)
 80808dc:	e01a      	b.n	8080914 <_Z14setVerboseMode6String+0x78>
 80808de:	4917      	ldr	r1, [pc, #92]	; (808093c <_Z14setVerboseMode6String+0xa0>)
 80808e0:	4628      	mov	r0, r5
 80808e2:	f001 fe8c 	bl	80825fe <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 80808e6:	b1e8      	cbz	r0, 8080924 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 80808e8:	4b10      	ldr	r3, [pc, #64]	; (808092c <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 80808ea:	4d11      	ldr	r5, [pc, #68]	; (8080930 <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 80808ec:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80808ee:	f002 fa0d 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 80808f2:	2004      	movs	r0, #4
 80808f4:	f7ff fbf2 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.17>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 80808f8:	f020 0008 	bic.w	r0, r0, #8
 80808fc:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80808fe:	f002 fa05 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080902:	7829      	ldrb	r1, [r5, #0]
 8080904:	2004      	movs	r0, #4
 8080906:	f7ff fbeb 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
 808090a:	4b0a      	ldr	r3, [pc, #40]	; (8080934 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 808090c:	4a0c      	ldr	r2, [pc, #48]	; (8080940 <_Z14setVerboseMode6String+0xa4>)
 808090e:	781b      	ldrb	r3, [r3, #0]
 8080910:	f88d 4000 	strb.w	r4, [sp]
 8080914:	490b      	ldr	r1, [pc, #44]	; (8080944 <_Z14setVerboseMode6String+0xa8>)
 8080916:	a802      	add	r0, sp, #8
 8080918:	f7ff fbe4 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 808091c:	a803      	add	r0, sp, #12
 808091e:	f7ff fd29 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 8080922:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080924:	b005      	add	sp, #20
 8080926:	bd30      	pop	{r4, r5, pc}
 8080928:	08084ee0 	.word	0x08084ee0
 808092c:	2000058f 	.word	0x2000058f
 8080930:	200005bf 	.word	0x200005bf
 8080934:	2000050c 	.word	0x2000050c
 8080938:	08084cd7 	.word	0x08084cd7
 808093c:	08084df0 	.word	0x08084df0
 8080940:	08084ce8 	.word	0x08084ce8
 8080944:	08084cd2 	.word	0x08084cd2

08080948 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 8080948:	b570      	push	{r4, r5, r6, lr}
 808094a:	b0cc      	sub	sp, #304	; 0x130
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 808094c:	220a      	movs	r2, #10
 808094e:	a905      	add	r1, sp, #20
 8080950:	6800      	ldr	r0, [r0, #0]
 8080952:	f003 fd3f 	bl	80843d4 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080956:	b2c5      	uxtb	r5, r0
 8080958:	f105 030c 	add.w	r3, r5, #12
 808095c:	b2db      	uxtb	r3, r3
 808095e:	2b18      	cmp	r3, #24
 8080960:	d83d      	bhi.n	80809de <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080962:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 8080964:	4620      	mov	r0, r4
 8080966:	f003 f88f 	bl	8083a88 <__aeabi_i2f>
 808096a:	f001 fef5 	bl	8082758 <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 808096e:	f002 f9cd 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080972:	4629      	mov	r1, r5
 8080974:	2003      	movs	r0, #3
 8080976:	f7ff fbb3 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
  t = Time.now();
 808097a:	f001 ff4c 	bl	8082816 <_ZN9TimeClass3nowEv>
 808097e:	4e19      	ldr	r6, [pc, #100]	; (80809e4 <_Z11setTimeZone6String+0x9c>)
 8080980:	4d19      	ldr	r5, [pc, #100]	; (80809e8 <_Z11setTimeZone6String+0xa0>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080982:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 8080984:	6030      	str	r0, [r6, #0]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080986:	4a19      	ldr	r2, [pc, #100]	; (80809ec <_Z11setTimeZone6String+0xa4>)
 8080988:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808098c:	2400      	movs	r4, #0
 808098e:	a80c      	add	r0, sp, #48	; 0x30
 8080990:	f000 fe2c 	bl	80815ec <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080994:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
 8080996:	aa0c      	add	r2, sp, #48	; 0x30
 8080998:	4915      	ldr	r1, [pc, #84]	; (80809f0 <_Z11setTimeZone6String+0xa8>)
 808099a:	a808      	add	r0, sp, #32
 808099c:	f88d 4000 	strb.w	r4, [sp]
 80809a0:	f7ff fba0 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 80809a4:	a809      	add	r0, sp, #36	; 0x24
 80809a6:	f7ff fce5 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80809aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80809ae:	f000 fe35 	bl	808161c <delay>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 80809b2:	6831      	ldr	r1, [r6, #0]
 80809b4:	a808      	add	r0, sp, #32
 80809b6:	f001 feeb 	bl	8082790 <_ZN9TimeClass7timeStrEl>
 80809ba:	9b08      	ldr	r3, [sp, #32]
 80809bc:	490c      	ldr	r1, [pc, #48]	; (80809f0 <_Z11setTimeZone6String+0xa8>)
 80809be:	9303      	str	r3, [sp, #12]
 80809c0:	9a03      	ldr	r2, [sp, #12]
 80809c2:	782b      	ldrb	r3, [r5, #0]
 80809c4:	a806      	add	r0, sp, #24
 80809c6:	f88d 4000 	strb.w	r4, [sp]
 80809ca:	f7ff fb8b 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 80809ce:	a807      	add	r0, sp, #28
 80809d0:	f7ff fcd0 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80809d4:	a808      	add	r0, sp, #32
 80809d6:	f001 fd9e 	bl	8082516 <_ZN6StringD1Ev>
  return 1;
 80809da:	2001      	movs	r0, #1
 80809dc:	e000      	b.n	80809e0 <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80809de:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  return 1;
}
 80809e0:	b04c      	add	sp, #304	; 0x130
 80809e2:	bd70      	pop	{r4, r5, r6, pc}
 80809e4:	20000520 	.word	0x20000520
 80809e8:	2000050c 	.word	0x2000050c
 80809ec:	08084cfd 	.word	0x08084cfd
 80809f0:	08084d11 	.word	0x08084d11

080809f4 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 80809f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80809f6:	4926      	ldr	r1, [pc, #152]	; (8080a90 <_Z15setLowPowerMode6String+0x9c>)
 80809f8:	4605      	mov	r5, r0
 80809fa:	f001 fe00 	bl	80825fe <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 80809fe:	b928      	cbnz	r0, 8080a0c <_Z15setLowPowerMode6String+0x18>
 8080a00:	4924      	ldr	r1, [pc, #144]	; (8080a94 <_Z15setLowPowerMode6String+0xa0>)
 8080a02:	4628      	mov	r0, r5
 8080a04:	f001 fdfb 	bl	80825fe <_ZNK6String6equalsEPKc>
 8080a08:	2800      	cmp	r0, #0
 8080a0a:	d03f      	beq.n	8080a8c <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080a0c:	f002 f97e 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080a10:	2004      	movs	r0, #4
 8080a12:	f7ff fb63 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.17>
 8080a16:	4c20      	ldr	r4, [pc, #128]	; (8080a98 <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080a18:	491d      	ldr	r1, [pc, #116]	; (8080a90 <_Z15setLowPowerMode6String+0x9c>)
 8080a1a:	7020      	strb	r0, [r4, #0]
 8080a1c:	4628      	mov	r0, r5
 8080a1e:	f001 fdee 	bl	80825fe <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 8080a22:	4606      	mov	r6, r0
 8080a24:	b1a0      	cbz	r0, 8080a50 <_Z15setLowPowerMode6String+0x5c>
 8080a26:	4b1d      	ldr	r3, [pc, #116]	; (8080a9c <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
 8080a28:	2200      	movs	r2, #0
 8080a2a:	781b      	ldrb	r3, [r3, #0]
 8080a2c:	491c      	ldr	r1, [pc, #112]	; (8080aa0 <_Z15setLowPowerMode6String+0xac>)
 8080a2e:	f88d 2000 	strb.w	r2, [sp]
 8080a32:	a802      	add	r0, sp, #8
 8080a34:	4a1b      	ldr	r2, [pc, #108]	; (8080aa4 <_Z15setLowPowerMode6String+0xb0>)
 8080a36:	f7ff fb55 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 8080a3a:	a803      	add	r0, sp, #12
 8080a3c:	f7ff fc9a 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 8080a40:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
 8080a42:	2201      	movs	r2, #1
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    Particle.publish("Mode","Low Power",PRIVATE);
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 8080a44:	f043 0301 	orr.w	r3, r3, #1
 8080a48:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
 8080a4a:	4b17      	ldr	r3, [pc, #92]	; (8080aa8 <_Z15setLowPowerMode6String+0xb4>)
 8080a4c:	701a      	strb	r2, [r3, #0]
 8080a4e:	e016      	b.n	8080a7e <_Z15setLowPowerMode6String+0x8a>
 8080a50:	4910      	ldr	r1, [pc, #64]	; (8080a94 <_Z15setLowPowerMode6String+0xa0>)
 8080a52:	4628      	mov	r0, r5
 8080a54:	f001 fdd3 	bl	80825fe <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 8080a58:	b188      	cbz	r0, 8080a7e <_Z15setLowPowerMode6String+0x8a>
 8080a5a:	4b10      	ldr	r3, [pc, #64]	; (8080a9c <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
 8080a5c:	4a13      	ldr	r2, [pc, #76]	; (8080aac <_Z15setLowPowerMode6String+0xb8>)
 8080a5e:	781b      	ldrb	r3, [r3, #0]
 8080a60:	490f      	ldr	r1, [pc, #60]	; (8080aa0 <_Z15setLowPowerMode6String+0xac>)
 8080a62:	a802      	add	r0, sp, #8
 8080a64:	f88d 6000 	strb.w	r6, [sp]
 8080a68:	f7ff fb3c 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 8080a6c:	a803      	add	r0, sp, #12
 8080a6e:	f7ff fc81 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
 8080a72:	7823      	ldrb	r3, [r4, #0]
 8080a74:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8080a78:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
 8080a7a:	4b0b      	ldr	r3, [pc, #44]	; (8080aa8 <_Z15setLowPowerMode6String+0xb4>)
 8080a7c:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080a7e:	f002 f945 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080a82:	2004      	movs	r0, #4
 8080a84:	7821      	ldrb	r1, [r4, #0]
 8080a86:	f7ff fb2b 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
 8080a8a:	2001      	movs	r0, #1
  return 1;
}
 8080a8c:	b004      	add	sp, #16
 8080a8e:	bd70      	pop	{r4, r5, r6, pc}
 8080a90:	08084ee0 	.word	0x08084ee0
 8080a94:	08084df0 	.word	0x08084df0
 8080a98:	200005bf 	.word	0x200005bf
 8080a9c:	2000050c 	.word	0x2000050c
 8080aa0:	08084cd2 	.word	0x08084cd2
 8080aa4:	08084d16 	.word	0x08084d16
 8080aa8:	2000058e 	.word	0x2000058e
 8080aac:	08084d20 	.word	0x08084d20

08080ab0 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080ab0:	2300      	movs	r3, #0
 8080ab2:	2204      	movs	r2, #4
 8080ab4:	f000 bd02 	b.w	80814bc <spark_variable>

08080ab8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080ab8:	4602      	mov	r2, r0
 8080aba:	4801      	ldr	r0, [pc, #4]	; (8080ac0 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080abc:	f000 bef2 	b.w	80818a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080ac0:	08081879 	.word	0x08081879

08080ac4 <setup>:
float temperatureInC = 0;
float relativeHumidity = 0;


void setup()                                                      // Note: Disconnected Setup()
{
 8080ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080ac6:	b0b9      	sub	sp, #228	; 0xe4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080ac8:	aa08      	add	r2, sp, #32
 8080aca:	4616      	mov	r6, r2
 8080acc:	4b88      	ldr	r3, [pc, #544]	; (8080cf0 <setup+0x22c>)
 8080ace:	f103 0510 	add.w	r5, r3, #16
 8080ad2:	4614      	mov	r4, r2
 8080ad4:	6818      	ldr	r0, [r3, #0]
 8080ad6:	6859      	ldr	r1, [r3, #4]
 8080ad8:	3308      	adds	r3, #8
 8080ada:	c403      	stmia	r4!, {r0, r1}
 8080adc:	42ab      	cmp	r3, r5
 8080ade:	4622      	mov	r2, r4
 8080ae0:	d1f7      	bne.n	8080ad2 <setup+0xe>
 8080ae2:	8819      	ldrh	r1, [r3, #0]
 8080ae4:	789b      	ldrb	r3, [r3, #2]
 8080ae6:	222d      	movs	r2, #45	; 0x2d
 8080ae8:	8021      	strh	r1, [r4, #0]
 8080aea:	70a3      	strb	r3, [r4, #2]
 8080aec:	2100      	movs	r1, #0
 8080aee:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8080af2:	f003 fb5a 	bl	80841aa <memset>
  state = IDLE_STATE;
 8080af6:	4b7f      	ldr	r3, [pc, #508]	; (8080cf4 <setup+0x230>)
 8080af8:	2502      	movs	r5, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080afa:	2101      	movs	r1, #1
 8080afc:	2007      	movs	r0, #7


void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
 8080afe:	701d      	strb	r5, [r3, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080b00:	f002 f8a4 	bl	8082c4c <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080b04:	2100      	movs	r1, #0
 8080b06:	2005      	movs	r0, #5
 8080b08:	f002 f8a0 	bl	8082c4c <pinMode>
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
 8080b0c:	2101      	movs	r1, #1
 8080b0e:	2006      	movs	r0, #6
 8080b10:	f002 f89c 	bl	8082c4c <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8080b14:	a804      	add	r0, sp, #16
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8080b16:	2400      	movs	r4, #0
 8080b18:	f000 fd00 	bl	808151c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080b1c:	2300      	movs	r3, #0
 8080b1e:	227d      	movs	r2, #125	; 0x7d
 8080b20:	a918      	add	r1, sp, #96	; 0x60
 8080b22:	a804      	add	r0, sp, #16
 8080b24:	f001 fd7d 	bl	8082622 <_ZNK6String8getBytesEPhjj>
 8080b28:	4623      	mov	r3, r4
 8080b2a:	4622      	mov	r2, r4
 8080b2c:	4972      	ldr	r1, [pc, #456]	; (8080cf8 <setup+0x234>)
 8080b2e:	9401      	str	r4, [sp, #4]
 8080b30:	9400      	str	r4, [sp, #0]
 8080b32:	a818      	add	r0, sp, #96	; 0x60
 8080b34:	f000 fd02 	bl	808153c <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
 8080b38:	4970      	ldr	r1, [pc, #448]	; (8080cfc <setup+0x238>)
 8080b3a:	4871      	ldr	r0, [pc, #452]	; (8080d00 <setup+0x23c>)
 8080b3c:	f7ff ffb8 	bl	8080ab0 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080b40:	4623      	mov	r3, r4
 8080b42:	462a      	mov	r2, r5
 8080b44:	496f      	ldr	r1, [pc, #444]	; (8080d04 <setup+0x240>)
 8080b46:	4870      	ldr	r0, [pc, #448]	; (8080d08 <setup+0x244>)
 8080b48:	f000 fcb8 	bl	80814bc <spark_variable>
 8080b4c:	496f      	ldr	r1, [pc, #444]	; (8080d0c <setup+0x248>)
 8080b4e:	4623      	mov	r3, r4
 8080b50:	2204      	movs	r2, #4
 8080b52:	6809      	ldr	r1, [r1, #0]
 8080b54:	486e      	ldr	r0, [pc, #440]	; (8080d10 <setup+0x24c>)
 8080b56:	f000 fcb1 	bl	80814bc <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", batteryString);
 8080b5a:	496e      	ldr	r1, [pc, #440]	; (8080d14 <setup+0x250>)
 8080b5c:	486e      	ldr	r0, [pc, #440]	; (8080d18 <setup+0x254>)
 8080b5e:	f7ff ffa7 	bl	8080ab0 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
 8080b62:	4623      	mov	r3, r4
 8080b64:	2201      	movs	r2, #1
 8080b66:	496d      	ldr	r1, [pc, #436]	; (8080d1c <setup+0x258>)
 8080b68:	486d      	ldr	r0, [pc, #436]	; (8080d20 <setup+0x25c>)
 8080b6a:	f000 fca7 	bl	80814bc <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
 8080b6e:	496d      	ldr	r1, [pc, #436]	; (8080d24 <setup+0x260>)
 8080b70:	486d      	ldr	r0, [pc, #436]	; (8080d28 <setup+0x264>)
 8080b72:	f7ff ff9d 	bl	8080ab0 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("humidity", humidityString);
 8080b76:	496d      	ldr	r1, [pc, #436]	; (8080d2c <setup+0x268>)
 8080b78:	486d      	ldr	r0, [pc, #436]	; (8080d30 <setup+0x26c>)
 8080b7a:	f7ff ff99 	bl	8080ab0 <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  
  Particle.function("Measure-Now",measureNow);
 8080b7e:	496d      	ldr	r1, [pc, #436]	; (8080d34 <setup+0x270>)
 8080b80:	486d      	ldr	r0, [pc, #436]	; (8080d38 <setup+0x274>)
 8080b82:	f7ff ff99 	bl	8080ab8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 8080b86:	496d      	ldr	r1, [pc, #436]	; (8080d3c <setup+0x278>)
 8080b88:	486d      	ldr	r0, [pc, #436]	; (8080d40 <setup+0x27c>)
 8080b8a:	f7ff ff95 	bl	8080ab8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
 8080b8e:	496d      	ldr	r1, [pc, #436]	; (8080d44 <setup+0x280>)
 8080b90:	486d      	ldr	r0, [pc, #436]	; (8080d48 <setup+0x284>)
 8080b92:	f7ff ff91 	bl	8080ab8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8080b96:	496d      	ldr	r1, [pc, #436]	; (8080d4c <setup+0x288>)
 8080b98:	486d      	ldr	r0, [pc, #436]	; (8080d50 <setup+0x28c>)
 8080b9a:	f7ff ff8d 	bl	8080ab8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
 8080b9e:	496d      	ldr	r1, [pc, #436]	; (8080d54 <setup+0x290>)
 8080ba0:	486d      	ldr	r0, [pc, #436]	; (8080d58 <setup+0x294>)
 8080ba2:	f7ff ff89 	bl	8080ab8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
 8080ba6:	f002 f8b1 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080baa:	4620      	mov	r0, r4
 8080bac:	f7ff fa96 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.17>
 8080bb0:	2801      	cmp	r0, #1
 8080bb2:	d119      	bne.n	8080be8 <setup+0x124>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                     // Retrive system recount data from FRAM
 8080bb4:	f002 f8aa 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080bb8:	2002      	movs	r0, #2
 8080bba:	f7ff fa8f 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.17>
 8080bbe:	4c51      	ldr	r4, [pc, #324]	; (8080d04 <setup+0x240>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080bc0:	2200      	movs	r2, #0
 8080bc2:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080bc4:	4611      	mov	r1, r2
 8080bc6:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080bc8:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080bca:	f000 fab3 	bl	8081134 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080bce:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8080bd0:	2b14      	cmp	r3, #20
 8080bd2:	d11e      	bne.n	8080c12 <setup+0x14e>
  {
    resetCount++;
 8080bd4:	6823      	ldr	r3, [r4, #0]
 8080bd6:	3301      	adds	r3, #1
 8080bd8:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                    // If so, store incremented number - watchdog must have done This
 8080bda:	f002 f897 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080bde:	7821      	ldrb	r1, [r4, #0]
 8080be0:	2002      	movs	r0, #2
 8080be2:	f7ff fa7d 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
 8080be6:	e014      	b.n	8080c12 <setup+0x14e>
  Particle.function("Solar-Mode",setSolarMode);
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
 8080be8:	f002 f890 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080bec:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080bee:	2204      	movs	r2, #4
 8080bf0:	a902      	add	r1, sp, #8
 8080bf2:	4620      	mov	r0, r4
 8080bf4:	9502      	str	r5, [sp, #8]
 8080bf6:	f000 fad5 	bl	80811a4 <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
 8080bfa:	f002 f887 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080bfe:	4628      	mov	r0, r5
 8080c00:	2204      	movs	r2, #4
 8080c02:	a902      	add	r1, sp, #8
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080c04:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                 // Zero out the memory - new map or new device
 8080c06:	9402      	str	r4, [sp, #8]
 8080c08:	f000 facc 	bl	80811a4 <HAL_EEPROM_Put>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080c0c:	2d0a      	cmp	r5, #10
 8080c0e:	d1f4      	bne.n	8080bfa <setup+0x136>
 8080c10:	e7d0      	b.n	8080bb4 <setup+0xf0>
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                    // If so, store incremented number - watchdog must have done This
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8080c12:	6823      	ldr	r3, [r4, #0]
 8080c14:	2b05      	cmp	r3, #5
 8080c16:	dd07      	ble.n	8080c28 <setup+0x164>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                                           // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8080c18:	f002 f878 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080c1c:	2104      	movs	r1, #4
 8080c1e:	2002      	movs	r0, #2
 8080c20:	f7ff fa5e 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8080c24:	f7ff fb6a 	bl	80802fc <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
 8080c28:	f002 f870 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080c2c:	2003      	movs	r0, #3
 8080c2e:	f7ff fa55 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.17>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
 8080c32:	f100 030c 	add.w	r3, r0, #12
 8080c36:	b2db      	uxtb	r3, r3
 8080c38:	2b18      	cmp	r3, #24
 8080c3a:	d803      	bhi.n	8080c44 <setup+0x180>
 8080c3c:	b240      	sxtb	r0, r0
 8080c3e:	f002 ff23 	bl	8083a88 <__aeabi_i2f>
 8080c42:	e000      	b.n	8080c46 <setup+0x182>
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM
 8080c44:	2000      	movs	r0, #0
 8080c46:	f001 fd87 	bl	8082758 <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
 8080c4a:	f002 f85f 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080c4e:	2004      	movs	r0, #4
 8080c50:	f7ff fa44 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.17>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080c54:	4c31      	ldr	r4, [pc, #196]	; (8080d1c <setup+0x258>)
 8080c56:	f000 0301 	and.w	r3, r0, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
 8080c5a:	4f40      	ldr	r7, [pc, #256]	; (8080d5c <setup+0x298>)
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080c5c:	7023      	strb	r3, [r4, #0]
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080c5e:	4d40      	ldr	r5, [pc, #256]	; (8080d60 <setup+0x29c>)
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080c60:	4b40      	ldr	r3, [pc, #256]	; (8080d64 <setup+0x2a0>)
 8080c62:	f3c0 0280 	ubfx	r2, r0, #2, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);                      // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
 8080c66:	7038      	strb	r0, [r7, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080c68:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  else Time.zone(0);                                                   // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);            // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080c6c:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8080c6e:	7028      	strb	r0, [r5, #0]

  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
 8080c70:	f7ff fae0 	bl	8080234 <_Z9PMICresetv>

  takeMeasurements();                                                   // For the benefit of monitoring the device
 8080c74:	f7ff fa70 	bl	8080158 <_Z16takeMeasurementsv>

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
 8080c78:	2005      	movs	r0, #5
 8080c7a:	f002 f811 	bl	8082ca0 <digitalRead>
 8080c7e:	b950      	cbnz	r0, 8080c96 <setup+0x1d2>
  lowPowerMode = false;                                                 // Press the user switch while resetting the device
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080c80:	783b      	ldrb	r3, [r7, #0]
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
  lowPowerMode = false;                                                 // Press the user switch while resetting the device
 8080c82:	7020      	strb	r0, [r4, #0]
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080c84:	f023 0301 	bic.w	r3, r3, #1
 8080c88:	703b      	strb	r3, [r7, #0]
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
 8080c8a:	f002 f83f 	bl	8082d0c <_Z21__fetch_global_EEPROMv>
 8080c8e:	2104      	movs	r1, #4
 8080c90:	7838      	ldrb	r0, [r7, #0]
 8080c92:	f7ff fa25 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.18>
  }

  if (!lowPowerMode && (stateOfCharge >= lowBattLimit)) connectToParticle();  // If not lowpower or sleeping, we can connect
 8080c96:	7823      	ldrb	r3, [r4, #0]
 8080c98:	b93b      	cbnz	r3, 8080caa <setup+0x1e6>
 8080c9a:	4b33      	ldr	r3, [pc, #204]	; (8080d68 <setup+0x2a4>)
 8080c9c:	681a      	ldr	r2, [r3, #0]
 8080c9e:	4b33      	ldr	r3, [pc, #204]	; (8080d6c <setup+0x2a8>)
 8080ca0:	681b      	ldr	r3, [r3, #0]
 8080ca2:	429a      	cmp	r2, r3
 8080ca4:	db01      	blt.n	8080caa <setup+0x1e6>
 8080ca6:	f7ff fa7d 	bl	80801a4 <_Z17connectToParticlev>
  connectToParticle();  // For now, let's just connect

  attachInterrupt(donePin,watchdogISR,RISING);
 8080caa:	2400      	movs	r4, #0
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
  }

  if (!lowPowerMode && (stateOfCharge >= lowBattLimit)) connectToParticle();  // If not lowpower or sleeping, we can connect
  connectToParticle();  // For now, let's just connect
 8080cac:	f7ff fa7a 	bl	80801a4 <_Z17connectToParticlev>

  attachInterrupt(donePin,watchdogISR,RISING);
 8080cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080cb4:	9400      	str	r4, [sp, #0]
 8080cb6:	2201      	movs	r2, #1
 8080cb8:	492d      	ldr	r1, [pc, #180]	; (8080d70 <setup+0x2ac>)
 8080cba:	2006      	movs	r0, #6
 8080cbc:	f001 f95a 	bl	8081f74 <_Z15attachInterrupttPFvvE13InterruptModeah>

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);           // Let Particle know how the startup process went
 8080cc0:	782b      	ldrb	r3, [r5, #0]
 8080cc2:	b15b      	cbz	r3, 8080cdc <setup+0x218>
 8080cc4:	4b2b      	ldr	r3, [pc, #172]	; (8080d74 <setup+0x2b0>)
 8080cc6:	a802      	add	r0, sp, #8
 8080cc8:	781b      	ldrb	r3, [r3, #0]
 8080cca:	4632      	mov	r2, r6
 8080ccc:	f88d 4000 	strb.w	r4, [sp]
 8080cd0:	4929      	ldr	r1, [pc, #164]	; (8080d78 <setup+0x2b4>)
 8080cd2:	f7ff fa07 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.43>
 8080cd6:	a803      	add	r0, sp, #12
 8080cd8:	f7ff fb4c 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080cdc:	f000 fa3a 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080ce0:	4b26      	ldr	r3, [pc, #152]	; (8080d7c <setup+0x2b8>)
 8080ce2:	6018      	str	r0, [r3, #0]
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
 8080ce4:	a804      	add	r0, sp, #16
 8080ce6:	f001 fc16 	bl	8082516 <_ZN6StringD1Ev>

  attachInterrupt(donePin,watchdogISR,RISING);

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);           // Let Particle know how the startup process went
  lastPublish = millis();
}
 8080cea:	b039      	add	sp, #228	; 0xe4
 8080cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080cee:	bf00      	nop
 8080cf0:	08084b2c 	.word	0x08084b2c
 8080cf4:	2000052d 	.word	0x2000052d
 8080cf8:	08080751 	.word	0x08080751
 8080cfc:	2000053c 	.word	0x2000053c
 8080d00:	08084d32 	.word	0x08084d32
 8080d04:	2000057c 	.word	0x2000057c
 8080d08:	08084d39 	.word	0x08084d39
 8080d0c:	20000404 	.word	0x20000404
 8080d10:	08084d44 	.word	0x08084d44
 8080d14:	200005af 	.word	0x200005af
 8080d18:	08084d4c 	.word	0x08084d4c
 8080d1c:	2000058e 	.word	0x2000058e
 8080d20:	08084d57 	.word	0x08084d57
 8080d24:	200004f4 	.word	0x200004f4
 8080d28:	08084d64 	.word	0x08084d64
 8080d2c:	2000059e 	.word	0x2000059e
 8080d30:	08084d70 	.word	0x08084d70
 8080d34:	080800c1 	.word	0x080800c1
 8080d38:	08084d79 	.word	0x08084d79
 8080d3c:	080809f5 	.word	0x080809f5
 8080d40:	08084d85 	.word	0x08084d85
 8080d44:	080807e9 	.word	0x080807e9
 8080d48:	08084d92 	.word	0x08084d92
 8080d4c:	0808089d 	.word	0x0808089d
 8080d50:	08084d9d 	.word	0x08084d9d
 8080d54:	08080949 	.word	0x08080949
 8080d58:	08084daa 	.word	0x08084daa
 8080d5c:	200005bf 	.word	0x200005bf
 8080d60:	2000058f 	.word	0x2000058f
 8080d64:	200005ae 	.word	0x200005ae
 8080d68:	20000538 	.word	0x20000538
 8080d6c:	20000504 	.word	0x20000504
 8080d70:	080800b5 	.word	0x080800b5
 8080d74:	2000050c 	.word	0x2000050c
 8080d78:	08084db6 	.word	0x08084db6
 8080d7c:	20000530 	.word	0x20000530

08080d80 <_GLOBAL__sub_I_sht1x>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080d80:	4b21      	ldr	r3, [pc, #132]	; (8080e08 <_GLOBAL__sub_I_sht1x+0x88>)

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 8080d82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080d84:	2500      	movs	r5, #0
 8080d86:	601d      	str	r5, [r3, #0]
 8080d88:	4b20      	ldr	r3, [pc, #128]	; (8080e0c <_GLOBAL__sub_I_sht1x+0x8c>)
 8080d8a:	2201      	movs	r2, #1
 8080d8c:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080d8e:	f000 fa21 	bl	80811d4 <HAL_Pin_Map>
#include "SHT1x.h"

// Specify data and clock connections and instantiate SHT1x object
#define dataPin  C4
#define clockPin C5
SHT1x sht1x(dataPin, clockPin);
 8080d92:	2223      	movs	r2, #35	; 0x23
 8080d94:	2122      	movs	r1, #34	; 0x22
 8080d96:	481e      	ldr	r0, [pc, #120]	; (8080e10 <_GLOBAL__sub_I_sht1x+0x90>)
 8080d98:	f000 f848 	bl	8080e2c <_ZN5SHT1xC1Eii>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080d9c:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8080da0:	4c1c      	ldr	r4, [pc, #112]	; (8080e14 <_GLOBAL__sub_I_sht1x+0x94>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080da2:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080da4:	8063      	strh	r3, [r4, #2]
 8080da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8080daa:	7025      	strb	r5, [r4, #0]
 8080dac:	80a3      	strh	r3, [r4, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080dae:	f000 fb39 	bl	8081424 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080db2:	a802      	add	r0, sp, #8
 8080db4:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080db8:	462a      	mov	r2, r5
 8080dba:	4629      	mov	r1, r5
 8080dbc:	f000 f9ba 	bl	8081134 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080dc0:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 8080dc2:	2b1e      	cmp	r3, #30
 8080dc4:	d104      	bne.n	8080dd0 <_GLOBAL__sub_I_sht1x+0x50>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 8080dc6:	2303      	movs	r3, #3
 8080dc8:	7023      	strb	r3, [r4, #0]
 8080dca:	2311      	movs	r3, #17
 8080dcc:	8065      	strh	r5, [r4, #2]
 8080dce:	80a3      	strh	r3, [r4, #4]
#define SEALEVELPRESSURE_HPA (1013.25)              // Universal variables
#define MEMORYMAPVERSION 1                          // Lets us know if we need to reinitialize the memory map

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
 8080dd0:	2100      	movs	r1, #0
 8080dd2:	2001      	movs	r0, #1
 8080dd4:	f000 fb3e 	bl	8081454 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8080dd8:	2101      	movs	r1, #1
 8080dda:	2004      	movs	r0, #4
 8080ddc:	f000 f99a 	bl	8081114 <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8080de0:	2100      	movs	r1, #0
 8080de2:	480d      	ldr	r0, [pc, #52]	; (8080e18 <_GLOBAL__sub_I_sht1x+0x98>)
 8080de4:	f000 ffee 	bl	8081dc4 <_ZN9FuelGaugeC1Eb>
 8080de8:	4a0c      	ldr	r2, [pc, #48]	; (8080e1c <_GLOBAL__sub_I_sht1x+0x9c>)
 8080dea:	490d      	ldr	r1, [pc, #52]	; (8080e20 <_GLOBAL__sub_I_sht1x+0xa0>)
 8080dec:	480a      	ldr	r0, [pc, #40]	; (8080e18 <_GLOBAL__sub_I_sht1x+0x98>)
 8080dee:	f002 f827 	bl	8082e40 <__aeabi_atexit>
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8080df2:	2100      	movs	r1, #0
 8080df4:	480b      	ldr	r0, [pc, #44]	; (8080e24 <_GLOBAL__sub_I_sht1x+0xa4>)
 8080df6:	f001 f935 	bl	8082064 <_ZN4PMICC1Eb>
 8080dfa:	4a08      	ldr	r2, [pc, #32]	; (8080e1c <_GLOBAL__sub_I_sht1x+0x9c>)
 8080dfc:	490a      	ldr	r1, [pc, #40]	; (8080e28 <_GLOBAL__sub_I_sht1x+0xa8>)
 8080dfe:	4809      	ldr	r0, [pc, #36]	; (8080e24 <_GLOBAL__sub_I_sht1x+0xa4>)
 8080e00:	f002 f81e 	bl	8082e40 <__aeabi_atexit>

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 8080e04:	b003      	add	sp, #12
 8080e06:	bd30      	pop	{r4, r5, pc}
 8080e08:	20000584 	.word	0x20000584
 8080e0c:	2000050c 	.word	0x2000050c
 8080e10:	20000510 	.word	0x20000510
 8080e14:	20000588 	.word	0x20000588
 8080e18:	20000524 	.word	0x20000524
 8080e1c:	200004f0 	.word	0x200004f0
 8080e20:	08081de3 	.word	0x08081de3
 8080e24:	2000052e 	.word	0x2000052e
 8080e28:	08082083 	.word	0x08082083

08080e2c <_ZN5SHT1xC1Eii>:
#include "SHT1x.h"

SHT1x::SHT1x(int dataPin, int clockPin)
{
    _dataPin = dataPin;
    _clockPin = clockPin;
 8080e2c:	e880 0006 	stmia.w	r0, {r1, r2}
}
 8080e30:	4770      	bx	lr

08080e32 <_ZN5SHT1x7shiftInEiii>:
}

/**
 */
int SHT1x::shiftIn(int _dataPin, int _clockPin, int _numBits)
{
 8080e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    int i;
    
    for (i=0; i<_numBits; ++i)
 8080e36:	2500      	movs	r5, #0
}

/**
 */
int SHT1x::shiftIn(int _dataPin, int _clockPin, int _numBits)
{
 8080e38:	460f      	mov	r7, r1
 8080e3a:	4698      	mov	r8, r3
    int ret = 0;
 8080e3c:	462c      	mov	r4, r5
    int i;
    
    for (i=0; i<_numBits; ++i)
    {
        digitalWrite(_clockPin, HIGH);
 8080e3e:	b296      	uxth	r6, r2
int SHT1x::shiftIn(int _dataPin, int _clockPin, int _numBits)
{
    int ret = 0;
    int i;
    
    for (i=0; i<_numBits; ++i)
 8080e40:	4545      	cmp	r5, r8
 8080e42:	da11      	bge.n	8080e68 <_ZN5SHT1x7shiftInEiii+0x36>
    {
        digitalWrite(_clockPin, HIGH);
 8080e44:	2101      	movs	r1, #1
 8080e46:	4630      	mov	r0, r6
 8080e48:	f001 ff11 	bl	8082c6e <digitalWrite>
        delay(10);  // I don't know why I need this, but without it I don't get my 8 lsb of temp
 8080e4c:	200a      	movs	r0, #10
 8080e4e:	f000 fbe5 	bl	808161c <delay>
        ret = ret*2 + digitalRead(_dataPin);
 8080e52:	b2b8      	uxth	r0, r7
 8080e54:	f001 ff24 	bl	8082ca0 <digitalRead>
 8080e58:	0064      	lsls	r4, r4, #1
 8080e5a:	4404      	add	r4, r0
        digitalWrite(_clockPin, LOW);
 8080e5c:	2100      	movs	r1, #0
 8080e5e:	4630      	mov	r0, r6
 8080e60:	f001 ff05 	bl	8082c6e <digitalWrite>
int SHT1x::shiftIn(int _dataPin, int _clockPin, int _numBits)
{
    int ret = 0;
    int i;
    
    for (i=0; i<_numBits; ++i)
 8080e64:	3501      	adds	r5, #1
 8080e66:	e7eb      	b.n	8080e40 <_ZN5SHT1x7shiftInEiii+0xe>
        ret = ret*2 + digitalRead(_dataPin);
        digitalWrite(_clockPin, LOW);
    }
    
    return(ret);
}
 8080e68:	4620      	mov	r0, r4
 8080e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080e6e <_ZN5SHT1x14sendCommandSHTEiii>:

/**
 */
void SHT1x::sendCommandSHT(int _command, int _dataPin, int _clockPin)
{
 8080e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080e72:	461f      	mov	r7, r3
 8080e74:	4616      	mov	r6, r2
 8080e76:	4688      	mov	r8, r1
    int ack;
    
    // Transmission Start
    pinMode(_dataPin, OUTPUT);
 8080e78:	b294      	uxth	r4, r2
    pinMode(_clockPin, OUTPUT);
 8080e7a:	b2bd      	uxth	r5, r7
void SHT1x::sendCommandSHT(int _command, int _dataPin, int _clockPin)
{
    int ack;
    
    // Transmission Start
    pinMode(_dataPin, OUTPUT);
 8080e7c:	4620      	mov	r0, r4
 8080e7e:	2101      	movs	r1, #1
 8080e80:	f001 fee4 	bl	8082c4c <pinMode>
    pinMode(_clockPin, OUTPUT);
 8080e84:	4628      	mov	r0, r5
 8080e86:	2101      	movs	r1, #1
 8080e88:	f001 fee0 	bl	8082c4c <pinMode>
    digitalWrite(_dataPin, HIGH);
 8080e8c:	4620      	mov	r0, r4
 8080e8e:	2101      	movs	r1, #1
 8080e90:	f001 feed 	bl	8082c6e <digitalWrite>
    digitalWrite(_clockPin, HIGH);
 8080e94:	4628      	mov	r0, r5
 8080e96:	2101      	movs	r1, #1
 8080e98:	f001 fee9 	bl	8082c6e <digitalWrite>
    digitalWrite(_dataPin, LOW);
 8080e9c:	4620      	mov	r0, r4
 8080e9e:	2100      	movs	r1, #0
 8080ea0:	f001 fee5 	bl	8082c6e <digitalWrite>
    digitalWrite(_clockPin, LOW);
 8080ea4:	4628      	mov	r0, r5
 8080ea6:	2100      	movs	r1, #0
 8080ea8:	f001 fee1 	bl	8082c6e <digitalWrite>
    digitalWrite(_clockPin, HIGH);
 8080eac:	4628      	mov	r0, r5
 8080eae:	2101      	movs	r1, #1
 8080eb0:	f001 fedd 	bl	8082c6e <digitalWrite>
    digitalWrite(_dataPin, HIGH);
 8080eb4:	4620      	mov	r0, r4
 8080eb6:	2101      	movs	r1, #1
 8080eb8:	f001 fed9 	bl	8082c6e <digitalWrite>
    digitalWrite(_clockPin, LOW);
 8080ebc:	4628      	mov	r0, r5
 8080ebe:	2100      	movs	r1, #0
 8080ec0:	f001 fed5 	bl	8082c6e <digitalWrite>
    
    // The command (3 msb are address and must be 000, and last 5 bits are command)
    shiftOut(_dataPin, _clockPin, MSBFIRST, _command);
 8080ec4:	fa5f f388 	uxtb.w	r3, r8
 8080ec8:	2201      	movs	r2, #1
 8080eca:	b2f9      	uxtb	r1, r7
 8080ecc:	b2f0      	uxtb	r0, r6
 8080ece:	f001 fefa 	bl	8082cc6 <shiftOut>
    
    // Verify we get the correct ack
    digitalWrite(_clockPin, HIGH);
 8080ed2:	4628      	mov	r0, r5
 8080ed4:	2101      	movs	r1, #1
 8080ed6:	f001 feca 	bl	8082c6e <digitalWrite>
    pinMode(_dataPin, INPUT);
 8080eda:	2100      	movs	r1, #0
 8080edc:	4620      	mov	r0, r4
 8080ede:	f001 feb5 	bl	8082c4c <pinMode>
    ack = digitalRead(_dataPin);
 8080ee2:	4620      	mov	r0, r4
 8080ee4:	f001 fedc 	bl	8082ca0 <digitalRead>
    if (ack != LOW) {
    //Serial.println("Ack Error 0");
    }
    digitalWrite(_clockPin, LOW);
 8080ee8:	4628      	mov	r0, r5
 8080eea:	2100      	movs	r1, #0
 8080eec:	f001 febf 	bl	8082c6e <digitalWrite>
    ack = digitalRead(_dataPin);
 8080ef0:	4620      	mov	r0, r4
    if (ack != HIGH) {
    //Serial.println("Ack Error 1");
    }
}
 8080ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ack = digitalRead(_dataPin);
    if (ack != LOW) {
    //Serial.println("Ack Error 0");
    }
    digitalWrite(_clockPin, LOW);
    ack = digitalRead(_dataPin);
 8080ef6:	f001 bed3 	b.w	8082ca0 <digitalRead>

08080efa <_ZN5SHT1x16waitForResultSHTEi>:
}

/**
 */
void SHT1x::waitForResultSHT(int _dataPin)
{
 8080efa:	b538      	push	{r3, r4, r5, lr}
    int i;
    int ack;
    
    pinMode(_dataPin, INPUT);
 8080efc:	b28d      	uxth	r5, r1
 8080efe:	4628      	mov	r0, r5
 8080f00:	2100      	movs	r1, #0
 8080f02:	f001 fea3 	bl	8082c4c <pinMode>
 8080f06:	2464      	movs	r4, #100	; 0x64
    
    for(i= 0; i < 100; ++i)
    {
        delay(10);
 8080f08:	200a      	movs	r0, #10
 8080f0a:	f000 fb87 	bl	808161c <delay>
        ack = digitalRead(_dataPin);
 8080f0e:	4628      	mov	r0, r5
 8080f10:	f001 fec6 	bl	8082ca0 <digitalRead>
        
        if (ack == LOW) {
 8080f14:	b108      	cbz	r0, 8080f1a <_ZN5SHT1x16waitForResultSHTEi+0x20>
    int i;
    int ack;
    
    pinMode(_dataPin, INPUT);
    
    for(i= 0; i < 100; ++i)
 8080f16:	3c01      	subs	r4, #1
 8080f18:	d1f6      	bne.n	8080f08 <_ZN5SHT1x16waitForResultSHTEi+0xe>
 8080f1a:	bd38      	pop	{r3, r4, r5, pc}

08080f1c <_ZN5SHT1x12getData16SHTEii>:
}

/**
 */
int SHT1x::getData16SHT(int _dataPin, int _clockPin)
{
 8080f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080f20:	4616      	mov	r6, r2
 8080f22:	4680      	mov	r8, r0
 8080f24:	460d      	mov	r5, r1
    int val;
    
    // Get the most significant bits
    pinMode(_dataPin, INPUT);
 8080f26:	b28c      	uxth	r4, r1
    pinMode(_clockPin, OUTPUT);
 8080f28:	b2b7      	uxth	r7, r6
int SHT1x::getData16SHT(int _dataPin, int _clockPin)
{
    int val;
    
    // Get the most significant bits
    pinMode(_dataPin, INPUT);
 8080f2a:	4620      	mov	r0, r4
 8080f2c:	2100      	movs	r1, #0
 8080f2e:	f001 fe8d 	bl	8082c4c <pinMode>
    pinMode(_clockPin, OUTPUT);
 8080f32:	4638      	mov	r0, r7
 8080f34:	2101      	movs	r1, #1
 8080f36:	f001 fe89 	bl	8082c4c <pinMode>
    val = shiftIn(_dataPin, _clockPin, 8);
 8080f3a:	4632      	mov	r2, r6
 8080f3c:	2308      	movs	r3, #8
 8080f3e:	4629      	mov	r1, r5
 8080f40:	4640      	mov	r0, r8
 8080f42:	f7ff ff76 	bl	8080e32 <_ZN5SHT1x7shiftInEiii>
    val *= 256;
    
    // Send the required ack
    pinMode(_dataPin, OUTPUT);
 8080f46:	2101      	movs	r1, #1
    
    // Get the most significant bits
    pinMode(_dataPin, INPUT);
    pinMode(_clockPin, OUTPUT);
    val = shiftIn(_dataPin, _clockPin, 8);
    val *= 256;
 8080f48:	ea4f 2900 	mov.w	r9, r0, lsl #8
    
    // Send the required ack
    pinMode(_dataPin, OUTPUT);
 8080f4c:	4620      	mov	r0, r4
 8080f4e:	f001 fe7d 	bl	8082c4c <pinMode>
    digitalWrite(_dataPin, HIGH);
 8080f52:	4620      	mov	r0, r4
 8080f54:	2101      	movs	r1, #1
 8080f56:	f001 fe8a 	bl	8082c6e <digitalWrite>
    digitalWrite(_dataPin, LOW);
 8080f5a:	4620      	mov	r0, r4
 8080f5c:	2100      	movs	r1, #0
 8080f5e:	f001 fe86 	bl	8082c6e <digitalWrite>
    digitalWrite(_clockPin, HIGH);
 8080f62:	4638      	mov	r0, r7
 8080f64:	2101      	movs	r1, #1
 8080f66:	f001 fe82 	bl	8082c6e <digitalWrite>
    digitalWrite(_clockPin, LOW);
 8080f6a:	4638      	mov	r0, r7
 8080f6c:	2100      	movs	r1, #0
 8080f6e:	f001 fe7e 	bl	8082c6e <digitalWrite>
    
    // Get the least significant bits
    pinMode(_dataPin, INPUT);
 8080f72:	4620      	mov	r0, r4
 8080f74:	2100      	movs	r1, #0
 8080f76:	f001 fe69 	bl	8082c4c <pinMode>
    val |= shiftIn(_dataPin, _clockPin, 8);
 8080f7a:	2308      	movs	r3, #8
 8080f7c:	4632      	mov	r2, r6
 8080f7e:	4629      	mov	r1, r5
 8080f80:	4640      	mov	r0, r8
 8080f82:	f7ff ff56 	bl	8080e32 <_ZN5SHT1x7shiftInEiii>
    
    return val;
}
 8080f86:	ea49 0000 	orr.w	r0, r9, r0
 8080f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08080f8e <_ZN5SHT1x10skipCrcSHTEii>:

/**
 */
void SHT1x::skipCrcSHT(int _dataPin, int _clockPin)
{
 8080f8e:	b538      	push	{r3, r4, r5, lr}
 8080f90:	4614      	mov	r4, r2
    // Skip acknowledge to end trans (no CRC)
    pinMode(_dataPin, OUTPUT);
 8080f92:	b28d      	uxth	r5, r1
    pinMode(_clockPin, OUTPUT);
 8080f94:	b2a4      	uxth	r4, r4
/**
 */
void SHT1x::skipCrcSHT(int _dataPin, int _clockPin)
{
    // Skip acknowledge to end trans (no CRC)
    pinMode(_dataPin, OUTPUT);
 8080f96:	4628      	mov	r0, r5
 8080f98:	2101      	movs	r1, #1
 8080f9a:	f001 fe57 	bl	8082c4c <pinMode>
    pinMode(_clockPin, OUTPUT);
 8080f9e:	4620      	mov	r0, r4
 8080fa0:	2101      	movs	r1, #1
 8080fa2:	f001 fe53 	bl	8082c4c <pinMode>
    
    digitalWrite(_dataPin, HIGH);
 8080fa6:	4628      	mov	r0, r5
 8080fa8:	2101      	movs	r1, #1
 8080faa:	f001 fe60 	bl	8082c6e <digitalWrite>
    digitalWrite(_clockPin, HIGH);
 8080fae:	4620      	mov	r0, r4
 8080fb0:	2101      	movs	r1, #1
 8080fb2:	f001 fe5c 	bl	8082c6e <digitalWrite>
    digitalWrite(_clockPin, LOW);
 8080fb6:	4620      	mov	r0, r4
}
 8080fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pinMode(_dataPin, OUTPUT);
    pinMode(_clockPin, OUTPUT);
    
    digitalWrite(_dataPin, HIGH);
    digitalWrite(_clockPin, HIGH);
    digitalWrite(_clockPin, LOW);
 8080fbc:	2100      	movs	r1, #0
 8080fbe:	f001 be56 	b.w	8082c6e <digitalWrite>

08080fc2 <_ZN5SHT1x18readTemperatureRawEv>:

/**
 * Reads the current raw temperature value
 */
float SHT1x::readTemperatureRaw()
{
 8080fc2:	b538      	push	{r3, r4, r5, lr}
 8080fc4:	4604      	mov	r4, r0
    int _val;
    
    // Command to send to the SHT1x to request Temperature
    int _gTempCmd  = 0b00000011;
    
    sendCommandSHT(_gTempCmd, _dataPin, _clockPin);
 8080fc6:	e890 000c 	ldmia.w	r0, {r2, r3}
 8080fca:	2103      	movs	r1, #3
 8080fcc:	f7ff ff4f 	bl	8080e6e <_ZN5SHT1x14sendCommandSHTEiii>
    waitForResultSHT(_dataPin);
 8080fd0:	6821      	ldr	r1, [r4, #0]
 8080fd2:	4620      	mov	r0, r4
 8080fd4:	f7ff ff91 	bl	8080efa <_ZN5SHT1x16waitForResultSHTEi>
    _val = getData16SHT(_dataPin, _clockPin);
 8080fd8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8080fdc:	4620      	mov	r0, r4
 8080fde:	f7ff ff9d 	bl	8080f1c <_ZN5SHT1x12getData16SHTEii>
    skipCrcSHT(_dataPin, _clockPin);
 8080fe2:	e894 0006 	ldmia.w	r4, {r1, r2}
    // Command to send to the SHT1x to request Temperature
    int _gTempCmd  = 0b00000011;
    
    sendCommandSHT(_gTempCmd, _dataPin, _clockPin);
    waitForResultSHT(_dataPin);
    _val = getData16SHT(_dataPin, _clockPin);
 8080fe6:	4605      	mov	r5, r0
    skipCrcSHT(_dataPin, _clockPin);
 8080fe8:	4620      	mov	r0, r4
 8080fea:	f7ff ffd0 	bl	8080f8e <_ZN5SHT1x10skipCrcSHTEii>
    
    return (_val);
 8080fee:	4628      	mov	r0, r5
 8080ff0:	f002 fd4a 	bl	8083a88 <__aeabi_i2f>
}
 8080ff4:	bd38      	pop	{r3, r4, r5, pc}
	...

08080ff8 <_ZN5SHT1x16readTemperatureCEv>:

/**
 * Reads the current temperature in degrees Celsius
 */
float SHT1x::readTemperatureC()
{
 8080ff8:	b508      	push	{r3, lr}
    // Conversion coefficients from SHT15 datasheet
    const float Dat1 = -40.0;  // for 14 Bit @ 5V
    const float Dat2 =   0.01; // for 14 Bit DEGC
    
    // Fetch raw value
    _val = readTemperatureRaw();
 8080ffa:	f7ff ffe2 	bl	8080fc2 <_ZN5SHT1x18readTemperatureRawEv>
    
    // Convert raw value to degrees Celsius
    _temperature = (_val * Dat2) + Dat1;
    
    return (_temperature);
 8080ffe:	f002 ff5d 	bl	8083ebc <__aeabi_f2iz>
 8081002:	f002 fd41 	bl	8083a88 <__aeabi_i2f>
 8081006:	4903      	ldr	r1, [pc, #12]	; (8081014 <_ZN5SHT1x16readTemperatureCEv+0x1c>)
 8081008:	f002 fd92 	bl	8083b30 <__aeabi_fmul>
 808100c:	4902      	ldr	r1, [pc, #8]	; (8081018 <_ZN5SHT1x16readTemperatureCEv+0x20>)
 808100e:	f002 fc85 	bl	808391c <__aeabi_fsub>
}
 8081012:	bd08      	pop	{r3, pc}
 8081014:	3c23d70a 	.word	0x3c23d70a
 8081018:	42200000 	.word	0x42200000

0808101c <_ZN5SHT1x12readHumidityEv>:

/**
 * Reads current temperature-corrected relative humidity
 */
float SHT1x::readHumidity()
{
 808101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808101e:	4604      	mov	r4, r0
    
    // Command to send to the SHT1x to request humidity
    int _gHumidCmd = 0b00000101;
    
    // Fetch the value from the sensor
    sendCommandSHT(_gHumidCmd, _dataPin, _clockPin);
 8081020:	e890 000c 	ldmia.w	r0, {r2, r3}
 8081024:	2105      	movs	r1, #5
 8081026:	f7ff ff22 	bl	8080e6e <_ZN5SHT1x14sendCommandSHTEiii>
    waitForResultSHT(_dataPin);
 808102a:	6821      	ldr	r1, [r4, #0]
 808102c:	4620      	mov	r0, r4
 808102e:	f7ff ff64 	bl	8080efa <_ZN5SHT1x16waitForResultSHTEi>
    _val = getData16SHT(_dataPin, _clockPin);
 8081032:	e894 0006 	ldmia.w	r4, {r1, r2}
 8081036:	4620      	mov	r0, r4
 8081038:	f7ff ff70 	bl	8080f1c <_ZN5SHT1x12getData16SHTEii>
    skipCrcSHT(_dataPin, _clockPin);
 808103c:	e894 0006 	ldmia.w	r4, {r1, r2}
    int _gHumidCmd = 0b00000101;
    
    // Fetch the value from the sensor
    sendCommandSHT(_gHumidCmd, _dataPin, _clockPin);
    waitForResultSHT(_dataPin);
    _val = getData16SHT(_dataPin, _clockPin);
 8081040:	4605      	mov	r5, r0
    skipCrcSHT(_dataPin, _clockPin);
 8081042:	4620      	mov	r0, r4
 8081044:	f7ff ffa3 	bl	8080f8e <_ZN5SHT1x10skipCrcSHTEii>
    
    // Apply linear conversion to raw value
    _linearHumidity = X1 + X2 * _val + X3 * _val * _val;
 8081048:	4628      	mov	r0, r5
 808104a:	f002 fd1d 	bl	8083a88 <__aeabi_i2f>
 808104e:	491f      	ldr	r1, [pc, #124]	; (80810cc <_ZN5SHT1x12readHumidityEv+0xb0>)
 8081050:	4605      	mov	r5, r0
 8081052:	f002 fd6d 	bl	8083b30 <__aeabi_fmul>
 8081056:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 808105a:	f002 fc5f 	bl	808391c <__aeabi_fsub>
 808105e:	491c      	ldr	r1, [pc, #112]	; (80810d0 <_ZN5SHT1x12readHumidityEv+0xb4>)
 8081060:	4606      	mov	r6, r0
 8081062:	4628      	mov	r0, r5
 8081064:	f002 fd64 	bl	8083b30 <__aeabi_fmul>
 8081068:	4629      	mov	r1, r5
 808106a:	f002 fd61 	bl	8083b30 <__aeabi_fmul>
 808106e:	4601      	mov	r1, r0
 8081070:	4630      	mov	r0, r6
 8081072:	f002 fc55 	bl	8083920 <__addsf3>
 8081076:	4606      	mov	r6, r0
    
    // Get current temperature for humidity correction
    _temperature = readTemperatureC();
 8081078:	4620      	mov	r0, r4
 808107a:	f7ff ffbd 	bl	8080ff8 <_ZN5SHT1x16readTemperatureCEv>
    
    // Correct humidity value for current temperature
    _correctedHumidity = (_temperature - 25.0 ) * (T1 + T2 * _val) + _linearHumidity;
    
    return (_correctedHumidity);
 808107e:	4915      	ldr	r1, [pc, #84]	; (80810d4 <_ZN5SHT1x12readHumidityEv+0xb8>)
    
    // Apply linear conversion to raw value
    _linearHumidity = X1 + X2 * _val + X3 * _val * _val;
    
    // Get current temperature for humidity correction
    _temperature = readTemperatureC();
 8081080:	4607      	mov	r7, r0
    
    // Correct humidity value for current temperature
    _correctedHumidity = (_temperature - 25.0 ) * (T1 + T2 * _val) + _linearHumidity;
    
    return (_correctedHumidity);
 8081082:	4628      	mov	r0, r5
 8081084:	f002 fd54 	bl	8083b30 <__aeabi_fmul>
 8081088:	4913      	ldr	r1, [pc, #76]	; (80810d8 <_ZN5SHT1x12readHumidityEv+0xbc>)
 808108a:	f002 fc49 	bl	8083920 <__addsf3>
 808108e:	f002 f98b 	bl	80833a8 <__aeabi_f2d>
 8081092:	4604      	mov	r4, r0
 8081094:	4638      	mov	r0, r7
 8081096:	460d      	mov	r5, r1
 8081098:	f002 f986 	bl	80833a8 <__aeabi_f2d>
 808109c:	2200      	movs	r2, #0
 808109e:	4b0f      	ldr	r3, [pc, #60]	; (80810dc <_ZN5SHT1x12readHumidityEv+0xc0>)
 80810a0:	f002 f822 	bl	80830e8 <__aeabi_dsub>
 80810a4:	4602      	mov	r2, r0
 80810a6:	460b      	mov	r3, r1
 80810a8:	4620      	mov	r0, r4
 80810aa:	4629      	mov	r1, r5
 80810ac:	f002 f9d0 	bl	8083450 <__aeabi_dmul>
 80810b0:	4604      	mov	r4, r0
 80810b2:	4630      	mov	r0, r6
 80810b4:	460d      	mov	r5, r1
 80810b6:	f002 f977 	bl	80833a8 <__aeabi_f2d>
 80810ba:	4602      	mov	r2, r0
 80810bc:	460b      	mov	r3, r1
 80810be:	4620      	mov	r0, r4
 80810c0:	4629      	mov	r1, r5
 80810c2:	f002 f813 	bl	80830ec <__adddf3>
 80810c6:	f002 fbd5 	bl	8083874 <__aeabi_d2f>
}
 80810ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80810cc:	3d25e354 	.word	0x3d25e354
 80810d0:	b63be7a2 	.word	0xb63be7a2
 80810d4:	38a7c5ac 	.word	0x38a7c5ac
 80810d8:	3c23d70a 	.word	0x3c23d70a
 80810dc:	40390000 	.word	0x40390000

080810e0 <_GLOBAL__sub_I__ZN5SHT1xC2Eii>:
 80810e0:	f000 b878 	b.w	80811d4 <HAL_Pin_Map>

080810e4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 80810e4:	b508      	push	{r3, lr}
 80810e6:	4b02      	ldr	r3, [pc, #8]	; (80810f0 <cellular_signal+0xc>)
 80810e8:	681b      	ldr	r3, [r3, #0]
 80810ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80810ec:	9301      	str	r3, [sp, #4]
 80810ee:	bd08      	pop	{r3, pc}
 80810f0:	08060020 	.word	0x08060020

080810f4 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 80810f4:	b508      	push	{r3, lr}
 80810f6:	4b02      	ldr	r3, [pc, #8]	; (8081100 <cellular_command+0xc>)
 80810f8:	681b      	ldr	r3, [r3, #0]
 80810fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80810fc:	9301      	str	r3, [sp, #4]
 80810fe:	bd08      	pop	{r3, pc}
 8081100:	08060020 	.word	0x08060020

08081104 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081104:	b508      	push	{r3, lr}
 8081106:	4b02      	ldr	r3, [pc, #8]	; (8081110 <os_mutex_create+0xc>)
 8081108:	681b      	ldr	r3, [r3, #0]
 808110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808110c:	9301      	str	r3, [sp, #4]
 808110e:	bd08      	pop	{r3, pc}
 8081110:	080401d0 	.word	0x080401d0

08081114 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081114:	b508      	push	{r3, lr}
 8081116:	4b02      	ldr	r3, [pc, #8]	; (8081120 <HAL_Feature_Set+0xc>)
 8081118:	681b      	ldr	r3, [r3, #0]
 808111a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808111c:	9301      	str	r3, [sp, #4]
 808111e:	bd08      	pop	{r3, pc}
 8081120:	080401b8 	.word	0x080401b8

08081124 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081124:	b508      	push	{r3, lr}
 8081126:	4b02      	ldr	r3, [pc, #8]	; (8081130 <HAL_Core_System_Reset_Ex+0xc>)
 8081128:	681b      	ldr	r3, [r3, #0]
 808112a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808112c:	9301      	str	r3, [sp, #4]
 808112e:	bd08      	pop	{r3, pc}
 8081130:	080401b8 	.word	0x080401b8

08081134 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081134:	b508      	push	{r3, lr}
 8081136:	4b02      	ldr	r3, [pc, #8]	; (8081140 <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081138:	681b      	ldr	r3, [r3, #0]
 808113a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808113c:	9301      	str	r3, [sp, #4]
 808113e:	bd08      	pop	{r3, pc}
 8081140:	080401b8 	.word	0x080401b8

08081144 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081144:	b508      	push	{r3, lr}
 8081146:	4b02      	ldr	r3, [pc, #8]	; (8081150 <HAL_RNG_GetRandomNumber+0xc>)
 8081148:	681b      	ldr	r3, [r3, #0]
 808114a:	685b      	ldr	r3, [r3, #4]
 808114c:	9301      	str	r3, [sp, #4]
 808114e:	bd08      	pop	{r3, pc}
 8081150:	0804019c 	.word	0x0804019c

08081154 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081154:	b508      	push	{r3, lr}
 8081156:	4b02      	ldr	r3, [pc, #8]	; (8081160 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081158:	681b      	ldr	r3, [r3, #0]
 808115a:	695b      	ldr	r3, [r3, #20]
 808115c:	9301      	str	r3, [sp, #4]
 808115e:	bd08      	pop	{r3, pc}
 8081160:	0804019c 	.word	0x0804019c

08081164 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081164:	b508      	push	{r3, lr}
 8081166:	4b02      	ldr	r3, [pc, #8]	; (8081170 <HAL_RTC_Get_UnixTime+0xc>)
 8081168:	681b      	ldr	r3, [r3, #0]
 808116a:	69db      	ldr	r3, [r3, #28]
 808116c:	9301      	str	r3, [sp, #4]
 808116e:	bd08      	pop	{r3, pc}
 8081170:	0804019c 	.word	0x0804019c

08081174 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 8081174:	b508      	push	{r3, lr}
 8081176:	4b02      	ldr	r3, [pc, #8]	; (8081180 <HAL_EEPROM_Init+0xc>)
 8081178:	681b      	ldr	r3, [r3, #0]
 808117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808117c:	9301      	str	r3, [sp, #4]
 808117e:	bd08      	pop	{r3, pc}
 8081180:	0804019c 	.word	0x0804019c

08081184 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 8081184:	b508      	push	{r3, lr}
 8081186:	4b02      	ldr	r3, [pc, #8]	; (8081190 <HAL_EEPROM_Read+0xc>)
 8081188:	681b      	ldr	r3, [r3, #0]
 808118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808118c:	9301      	str	r3, [sp, #4]
 808118e:	bd08      	pop	{r3, pc}
 8081190:	0804019c 	.word	0x0804019c

08081194 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 8081194:	b508      	push	{r3, lr}
 8081196:	4b02      	ldr	r3, [pc, #8]	; (80811a0 <HAL_EEPROM_Write+0xc>)
 8081198:	681b      	ldr	r3, [r3, #0]
 808119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808119c:	9301      	str	r3, [sp, #4]
 808119e:	bd08      	pop	{r3, pc}
 80811a0:	0804019c 	.word	0x0804019c

080811a4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80811a4:	b508      	push	{r3, lr}
 80811a6:	4b02      	ldr	r3, [pc, #8]	; (80811b0 <HAL_EEPROM_Put+0xc>)
 80811a8:	681b      	ldr	r3, [r3, #0]
 80811aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80811ac:	9301      	str	r3, [sp, #4]
 80811ae:	bd08      	pop	{r3, pc}
 80811b0:	0804019c 	.word	0x0804019c

080811b4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80811b4:	b508      	push	{r3, lr}
 80811b6:	4b02      	ldr	r3, [pc, #8]	; (80811c0 <HAL_RTC_Time_Is_Valid+0xc>)
 80811b8:	681b      	ldr	r3, [r3, #0]
 80811ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80811bc:	9301      	str	r3, [sp, #4]
 80811be:	bd08      	pop	{r3, pc}
 80811c0:	0804019c 	.word	0x0804019c

080811c4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80811c4:	b508      	push	{r3, lr}
 80811c6:	4b02      	ldr	r3, [pc, #8]	; (80811d0 <hal_timer_millis+0xc>)
 80811c8:	681b      	ldr	r3, [r3, #0]
 80811ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80811cc:	9301      	str	r3, [sp, #4]
 80811ce:	bd08      	pop	{r3, pc}
 80811d0:	0804019c 	.word	0x0804019c

080811d4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80811d4:	b508      	push	{r3, lr}
 80811d6:	4b02      	ldr	r3, [pc, #8]	; (80811e0 <HAL_Pin_Map+0xc>)
 80811d8:	681b      	ldr	r3, [r3, #0]
 80811da:	681b      	ldr	r3, [r3, #0]
 80811dc:	9301      	str	r3, [sp, #4]
 80811de:	bd08      	pop	{r3, pc}
 80811e0:	080401b0 	.word	0x080401b0

080811e4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80811e4:	b508      	push	{r3, lr}
 80811e6:	4b02      	ldr	r3, [pc, #8]	; (80811f0 <HAL_Pin_Mode+0xc>)
 80811e8:	681b      	ldr	r3, [r3, #0]
 80811ea:	689b      	ldr	r3, [r3, #8]
 80811ec:	9301      	str	r3, [sp, #4]
 80811ee:	bd08      	pop	{r3, pc}
 80811f0:	080401b0 	.word	0x080401b0

080811f4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80811f4:	b508      	push	{r3, lr}
 80811f6:	4b02      	ldr	r3, [pc, #8]	; (8081200 <HAL_Get_Pin_Mode+0xc>)
 80811f8:	681b      	ldr	r3, [r3, #0]
 80811fa:	68db      	ldr	r3, [r3, #12]
 80811fc:	9301      	str	r3, [sp, #4]
 80811fe:	bd08      	pop	{r3, pc}
 8081200:	080401b0 	.word	0x080401b0

08081204 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081204:	b508      	push	{r3, lr}
 8081206:	4b02      	ldr	r3, [pc, #8]	; (8081210 <HAL_GPIO_Write+0xc>)
 8081208:	681b      	ldr	r3, [r3, #0]
 808120a:	691b      	ldr	r3, [r3, #16]
 808120c:	9301      	str	r3, [sp, #4]
 808120e:	bd08      	pop	{r3, pc}
 8081210:	080401b0 	.word	0x080401b0

08081214 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081214:	b508      	push	{r3, lr}
 8081216:	4b02      	ldr	r3, [pc, #8]	; (8081220 <HAL_GPIO_Read+0xc>)
 8081218:	681b      	ldr	r3, [r3, #0]
 808121a:	695b      	ldr	r3, [r3, #20]
 808121c:	9301      	str	r3, [sp, #4]
 808121e:	bd08      	pop	{r3, pc}
 8081220:	080401b0 	.word	0x080401b0

08081224 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081224:	b508      	push	{r3, lr}
 8081226:	4b02      	ldr	r3, [pc, #8]	; (8081230 <HAL_Interrupts_Attach+0xc>)
 8081228:	681b      	ldr	r3, [r3, #0]
 808122a:	699b      	ldr	r3, [r3, #24]
 808122c:	9301      	str	r3, [sp, #4]
 808122e:	bd08      	pop	{r3, pc}
 8081230:	080401b0 	.word	0x080401b0

08081234 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 8081234:	b508      	push	{r3, lr}
 8081236:	4b02      	ldr	r3, [pc, #8]	; (8081240 <HAL_Interrupts_Detach+0xc>)
 8081238:	681b      	ldr	r3, [r3, #0]
 808123a:	69db      	ldr	r3, [r3, #28]
 808123c:	9301      	str	r3, [sp, #4]
 808123e:	bd08      	pop	{r3, pc}
 8081240:	080401b0 	.word	0x080401b0

08081244 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8081244:	b508      	push	{r3, lr}
 8081246:	4b02      	ldr	r3, [pc, #8]	; (8081250 <HAL_I2C_Begin+0xc>)
 8081248:	681b      	ldr	r3, [r3, #0]
 808124a:	68db      	ldr	r3, [r3, #12]
 808124c:	9301      	str	r3, [sp, #4]
 808124e:	bd08      	pop	{r3, pc}
 8081250:	080401ac 	.word	0x080401ac

08081254 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8081254:	b508      	push	{r3, lr}
 8081256:	4b02      	ldr	r3, [pc, #8]	; (8081260 <HAL_I2C_Request_Data+0xc>)
 8081258:	681b      	ldr	r3, [r3, #0]
 808125a:	695b      	ldr	r3, [r3, #20]
 808125c:	9301      	str	r3, [sp, #4]
 808125e:	bd08      	pop	{r3, pc}
 8081260:	080401ac 	.word	0x080401ac

08081264 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8081264:	b508      	push	{r3, lr}
 8081266:	4b02      	ldr	r3, [pc, #8]	; (8081270 <HAL_I2C_Begin_Transmission+0xc>)
 8081268:	681b      	ldr	r3, [r3, #0]
 808126a:	699b      	ldr	r3, [r3, #24]
 808126c:	9301      	str	r3, [sp, #4]
 808126e:	bd08      	pop	{r3, pc}
 8081270:	080401ac 	.word	0x080401ac

08081274 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081274:	b508      	push	{r3, lr}
 8081276:	4b02      	ldr	r3, [pc, #8]	; (8081280 <HAL_I2C_End_Transmission+0xc>)
 8081278:	681b      	ldr	r3, [r3, #0]
 808127a:	69db      	ldr	r3, [r3, #28]
 808127c:	9301      	str	r3, [sp, #4]
 808127e:	bd08      	pop	{r3, pc}
 8081280:	080401ac 	.word	0x080401ac

08081284 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081284:	b508      	push	{r3, lr}
 8081286:	4b02      	ldr	r3, [pc, #8]	; (8081290 <HAL_I2C_Write_Data+0xc>)
 8081288:	681b      	ldr	r3, [r3, #0]
 808128a:	6a1b      	ldr	r3, [r3, #32]
 808128c:	9301      	str	r3, [sp, #4]
 808128e:	bd08      	pop	{r3, pc}
 8081290:	080401ac 	.word	0x080401ac

08081294 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081294:	b508      	push	{r3, lr}
 8081296:	4b02      	ldr	r3, [pc, #8]	; (80812a0 <HAL_I2C_Available_Data+0xc>)
 8081298:	681b      	ldr	r3, [r3, #0]
 808129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808129c:	9301      	str	r3, [sp, #4]
 808129e:	bd08      	pop	{r3, pc}
 80812a0:	080401ac 	.word	0x080401ac

080812a4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80812a4:	b508      	push	{r3, lr}
 80812a6:	4b02      	ldr	r3, [pc, #8]	; (80812b0 <HAL_I2C_Read_Data+0xc>)
 80812a8:	681b      	ldr	r3, [r3, #0]
 80812aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80812ac:	9301      	str	r3, [sp, #4]
 80812ae:	bd08      	pop	{r3, pc}
 80812b0:	080401ac 	.word	0x080401ac

080812b4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80812b4:	b508      	push	{r3, lr}
 80812b6:	4b02      	ldr	r3, [pc, #8]	; (80812c0 <HAL_I2C_Peek_Data+0xc>)
 80812b8:	681b      	ldr	r3, [r3, #0]
 80812ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80812bc:	9301      	str	r3, [sp, #4]
 80812be:	bd08      	pop	{r3, pc}
 80812c0:	080401ac 	.word	0x080401ac

080812c4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80812c4:	b508      	push	{r3, lr}
 80812c6:	4b02      	ldr	r3, [pc, #8]	; (80812d0 <HAL_I2C_Flush_Data+0xc>)
 80812c8:	681b      	ldr	r3, [r3, #0]
 80812ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80812cc:	9301      	str	r3, [sp, #4]
 80812ce:	bd08      	pop	{r3, pc}
 80812d0:	080401ac 	.word	0x080401ac

080812d4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80812d4:	b508      	push	{r3, lr}
 80812d6:	4b02      	ldr	r3, [pc, #8]	; (80812e0 <HAL_I2C_Is_Enabled+0xc>)
 80812d8:	681b      	ldr	r3, [r3, #0]
 80812da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80812dc:	9301      	str	r3, [sp, #4]
 80812de:	bd08      	pop	{r3, pc}
 80812e0:	080401ac 	.word	0x080401ac

080812e4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80812e4:	b508      	push	{r3, lr}
 80812e6:	4b02      	ldr	r3, [pc, #8]	; (80812f0 <HAL_I2C_Init+0xc>)
 80812e8:	681b      	ldr	r3, [r3, #0]
 80812ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80812ec:	9301      	str	r3, [sp, #4]
 80812ee:	bd08      	pop	{r3, pc}
 80812f0:	080401ac 	.word	0x080401ac

080812f4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80812f4:	b508      	push	{r3, lr}
 80812f6:	4b02      	ldr	r3, [pc, #8]	; (8081300 <HAL_I2C_Acquire+0xc>)
 80812f8:	681b      	ldr	r3, [r3, #0]
 80812fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80812fc:	9301      	str	r3, [sp, #4]
 80812fe:	bd08      	pop	{r3, pc}
 8081300:	080401ac 	.word	0x080401ac

08081304 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8081304:	b508      	push	{r3, lr}
 8081306:	4b02      	ldr	r3, [pc, #8]	; (8081310 <HAL_I2C_Release+0xc>)
 8081308:	681b      	ldr	r3, [r3, #0]
 808130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808130c:	9301      	str	r3, [sp, #4]
 808130e:	bd08      	pop	{r3, pc}
 8081310:	080401ac 	.word	0x080401ac

08081314 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081314:	b508      	push	{r3, lr}
 8081316:	4b02      	ldr	r3, [pc, #8]	; (8081320 <HAL_SPI_Init+0xc>)
 8081318:	681b      	ldr	r3, [r3, #0]
 808131a:	69db      	ldr	r3, [r3, #28]
 808131c:	9301      	str	r3, [sp, #4]
 808131e:	bd08      	pop	{r3, pc}
 8081320:	080401b4 	.word	0x080401b4

08081324 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081324:	b508      	push	{r3, lr}
 8081326:	4b02      	ldr	r3, [pc, #8]	; (8081330 <HAL_SPI_Is_Enabled+0xc>)
 8081328:	681b      	ldr	r3, [r3, #0]
 808132a:	6a1b      	ldr	r3, [r3, #32]
 808132c:	9301      	str	r3, [sp, #4]
 808132e:	bd08      	pop	{r3, pc}
 8081330:	080401b4 	.word	0x080401b4

08081334 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081334:	b508      	push	{r3, lr}
 8081336:	4b02      	ldr	r3, [pc, #8]	; (8081340 <HAL_USART_Init+0xc>)
 8081338:	681b      	ldr	r3, [r3, #0]
 808133a:	699b      	ldr	r3, [r3, #24]
 808133c:	9301      	str	r3, [sp, #4]
 808133e:	bd08      	pop	{r3, pc}
 8081340:	080401c4 	.word	0x080401c4

08081344 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081344:	b508      	push	{r3, lr}
 8081346:	4b02      	ldr	r3, [pc, #8]	; (8081350 <HAL_USART_Write_Data+0xc>)
 8081348:	681b      	ldr	r3, [r3, #0]
 808134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808134c:	9301      	str	r3, [sp, #4]
 808134e:	bd08      	pop	{r3, pc}
 8081350:	080401c4 	.word	0x080401c4

08081354 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081354:	b508      	push	{r3, lr}
 8081356:	4b02      	ldr	r3, [pc, #8]	; (8081360 <HAL_USART_Available_Data+0xc>)
 8081358:	681b      	ldr	r3, [r3, #0]
 808135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808135c:	9301      	str	r3, [sp, #4]
 808135e:	bd08      	pop	{r3, pc}
 8081360:	080401c4 	.word	0x080401c4

08081364 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081364:	b508      	push	{r3, lr}
 8081366:	4b02      	ldr	r3, [pc, #8]	; (8081370 <HAL_USART_Read_Data+0xc>)
 8081368:	681b      	ldr	r3, [r3, #0]
 808136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808136c:	9301      	str	r3, [sp, #4]
 808136e:	bd08      	pop	{r3, pc}
 8081370:	080401c4 	.word	0x080401c4

08081374 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081374:	b508      	push	{r3, lr}
 8081376:	4b02      	ldr	r3, [pc, #8]	; (8081380 <HAL_USART_Peek_Data+0xc>)
 8081378:	681b      	ldr	r3, [r3, #0]
 808137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808137c:	9301      	str	r3, [sp, #4]
 808137e:	bd08      	pop	{r3, pc}
 8081380:	080401c4 	.word	0x080401c4

08081384 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081384:	b508      	push	{r3, lr}
 8081386:	4b02      	ldr	r3, [pc, #8]	; (8081390 <HAL_USART_Flush_Data+0xc>)
 8081388:	681b      	ldr	r3, [r3, #0]
 808138a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808138c:	9301      	str	r3, [sp, #4]
 808138e:	bd08      	pop	{r3, pc}
 8081390:	080401c4 	.word	0x080401c4

08081394 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081394:	b508      	push	{r3, lr}
 8081396:	4b02      	ldr	r3, [pc, #8]	; (80813a0 <HAL_USART_Is_Enabled+0xc>)
 8081398:	681b      	ldr	r3, [r3, #0]
 808139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808139c:	9301      	str	r3, [sp, #4]
 808139e:	bd08      	pop	{r3, pc}
 80813a0:	080401c4 	.word	0x080401c4

080813a4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80813a4:	b508      	push	{r3, lr}
 80813a6:	4b02      	ldr	r3, [pc, #8]	; (80813b0 <HAL_USART_Available_Data_For_Write+0xc>)
 80813a8:	681b      	ldr	r3, [r3, #0]
 80813aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80813ac:	9301      	str	r3, [sp, #4]
 80813ae:	bd08      	pop	{r3, pc}
 80813b0:	080401c4 	.word	0x080401c4

080813b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80813b4:	b508      	push	{r3, lr}
 80813b6:	4b02      	ldr	r3, [pc, #8]	; (80813c0 <HAL_USB_USART_Init+0xc>)
 80813b8:	681b      	ldr	r3, [r3, #0]
 80813ba:	681b      	ldr	r3, [r3, #0]
 80813bc:	9301      	str	r3, [sp, #4]
 80813be:	bd08      	pop	{r3, pc}
 80813c0:	0806001c 	.word	0x0806001c

080813c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80813c4:	b508      	push	{r3, lr}
 80813c6:	4b02      	ldr	r3, [pc, #8]	; (80813d0 <HAL_USB_USART_Available_Data+0xc>)
 80813c8:	681b      	ldr	r3, [r3, #0]
 80813ca:	691b      	ldr	r3, [r3, #16]
 80813cc:	9301      	str	r3, [sp, #4]
 80813ce:	bd08      	pop	{r3, pc}
 80813d0:	0806001c 	.word	0x0806001c

080813d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80813d4:	b508      	push	{r3, lr}
 80813d6:	4b02      	ldr	r3, [pc, #8]	; (80813e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80813d8:	681b      	ldr	r3, [r3, #0]
 80813da:	695b      	ldr	r3, [r3, #20]
 80813dc:	9301      	str	r3, [sp, #4]
 80813de:	bd08      	pop	{r3, pc}
 80813e0:	0806001c 	.word	0x0806001c

080813e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80813e4:	b508      	push	{r3, lr}
 80813e6:	4b02      	ldr	r3, [pc, #8]	; (80813f0 <HAL_USB_USART_Receive_Data+0xc>)
 80813e8:	681b      	ldr	r3, [r3, #0]
 80813ea:	699b      	ldr	r3, [r3, #24]
 80813ec:	9301      	str	r3, [sp, #4]
 80813ee:	bd08      	pop	{r3, pc}
 80813f0:	0806001c 	.word	0x0806001c

080813f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80813f4:	b508      	push	{r3, lr}
 80813f6:	4b02      	ldr	r3, [pc, #8]	; (8081400 <HAL_USB_USART_Send_Data+0xc>)
 80813f8:	681b      	ldr	r3, [r3, #0]
 80813fa:	69db      	ldr	r3, [r3, #28]
 80813fc:	9301      	str	r3, [sp, #4]
 80813fe:	bd08      	pop	{r3, pc}
 8081400:	0806001c 	.word	0x0806001c

08081404 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081404:	b508      	push	{r3, lr}
 8081406:	4b02      	ldr	r3, [pc, #8]	; (8081410 <HAL_USB_USART_Flush_Data+0xc>)
 8081408:	681b      	ldr	r3, [r3, #0]
 808140a:	6a1b      	ldr	r3, [r3, #32]
 808140c:	9301      	str	r3, [sp, #4]
 808140e:	bd08      	pop	{r3, pc}
 8081410:	0806001c 	.word	0x0806001c

08081414 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081414:	b508      	push	{r3, lr}
 8081416:	4b02      	ldr	r3, [pc, #8]	; (8081420 <system_mode+0xc>)
 8081418:	681b      	ldr	r3, [r3, #0]
 808141a:	681b      	ldr	r3, [r3, #0]
 808141c:	9301      	str	r3, [sp, #4]
 808141e:	bd08      	pop	{r3, pc}
 8081420:	080401a4 	.word	0x080401a4

08081424 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081424:	b508      	push	{r3, lr}
 8081426:	4b02      	ldr	r3, [pc, #8]	; (8081430 <set_system_mode+0xc>)
 8081428:	681b      	ldr	r3, [r3, #0]
 808142a:	685b      	ldr	r3, [r3, #4]
 808142c:	9301      	str	r3, [sp, #4]
 808142e:	bd08      	pop	{r3, pc}
 8081430:	080401a4 	.word	0x080401a4

08081434 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081434:	b508      	push	{r3, lr}
 8081436:	4b02      	ldr	r3, [pc, #8]	; (8081440 <system_delay_ms+0xc>)
 8081438:	681b      	ldr	r3, [r3, #0]
 808143a:	695b      	ldr	r3, [r3, #20]
 808143c:	9301      	str	r3, [sp, #4]
 808143e:	bd08      	pop	{r3, pc}
 8081440:	080401a4 	.word	0x080401a4

08081444 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081444:	b508      	push	{r3, lr}
 8081446:	4b02      	ldr	r3, [pc, #8]	; (8081450 <system_sleep+0xc>)
 8081448:	681b      	ldr	r3, [r3, #0]
 808144a:	699b      	ldr	r3, [r3, #24]
 808144c:	9301      	str	r3, [sp, #4]
 808144e:	bd08      	pop	{r3, pc}
 8081450:	080401a4 	.word	0x080401a4

08081454 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081454:	b508      	push	{r3, lr}
 8081456:	4b02      	ldr	r3, [pc, #8]	; (8081460 <system_thread_set_state+0xc>)
 8081458:	681b      	ldr	r3, [r3, #0]
 808145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808145c:	9301      	str	r3, [sp, #4]
 808145e:	bd08      	pop	{r3, pc}
 8081460:	080401a4 	.word	0x080401a4

08081464 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081464:	b508      	push	{r3, lr}
 8081466:	4b02      	ldr	r3, [pc, #8]	; (8081470 <application_thread_current+0xc>)
 8081468:	681b      	ldr	r3, [r3, #0]
 808146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808146c:	9301      	str	r3, [sp, #4]
 808146e:	bd08      	pop	{r3, pc}
 8081470:	080401a4 	.word	0x080401a4

08081474 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081474:	b508      	push	{r3, lr}
 8081476:	4b02      	ldr	r3, [pc, #8]	; (8081480 <application_thread_invoke+0xc>)
 8081478:	681b      	ldr	r3, [r3, #0]
 808147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808147c:	9301      	str	r3, [sp, #4]
 808147e:	bd08      	pop	{r3, pc}
 8081480:	080401a4 	.word	0x080401a4

08081484 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081484:	b508      	push	{r3, lr}
 8081486:	4b02      	ldr	r3, [pc, #8]	; (8081490 <system_thread_get_state+0xc>)
 8081488:	681b      	ldr	r3, [r3, #0]
 808148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808148c:	9301      	str	r3, [sp, #4]
 808148e:	bd08      	pop	{r3, pc}
 8081490:	080401a4 	.word	0x080401a4

08081494 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081494:	b508      	push	{r3, lr}
 8081496:	4b03      	ldr	r3, [pc, #12]	; (80814a4 <system_ctrl_set_app_request_handler+0x10>)
 8081498:	681b      	ldr	r3, [r3, #0]
 808149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808149e:	9301      	str	r3, [sp, #4]
 80814a0:	bd08      	pop	{r3, pc}
 80814a2:	0000      	.short	0x0000
 80814a4:	080401a4 	.word	0x080401a4

080814a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80814a8:	b508      	push	{r3, lr}
 80814aa:	4b03      	ldr	r3, [pc, #12]	; (80814b8 <system_ctrl_set_result+0x10>)
 80814ac:	681b      	ldr	r3, [r3, #0]
 80814ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80814b2:	9301      	str	r3, [sp, #4]
 80814b4:	bd08      	pop	{r3, pc}
 80814b6:	0000      	.short	0x0000
 80814b8:	080401a4 	.word	0x080401a4

080814bc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80814bc:	b508      	push	{r3, lr}
 80814be:	4b02      	ldr	r3, [pc, #8]	; (80814c8 <spark_variable+0xc>)
 80814c0:	681b      	ldr	r3, [r3, #0]
 80814c2:	681b      	ldr	r3, [r3, #0]
 80814c4:	9301      	str	r3, [sp, #4]
 80814c6:	bd08      	pop	{r3, pc}
 80814c8:	080401cc 	.word	0x080401cc

080814cc <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80814cc:	b508      	push	{r3, lr}
 80814ce:	4b02      	ldr	r3, [pc, #8]	; (80814d8 <spark_function+0xc>)
 80814d0:	681b      	ldr	r3, [r3, #0]
 80814d2:	685b      	ldr	r3, [r3, #4]
 80814d4:	9301      	str	r3, [sp, #4]
 80814d6:	bd08      	pop	{r3, pc}
 80814d8:	080401cc 	.word	0x080401cc

080814dc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80814dc:	b508      	push	{r3, lr}
 80814de:	4b02      	ldr	r3, [pc, #8]	; (80814e8 <spark_process+0xc>)
 80814e0:	681b      	ldr	r3, [r3, #0]
 80814e2:	689b      	ldr	r3, [r3, #8]
 80814e4:	9301      	str	r3, [sp, #4]
 80814e6:	bd08      	pop	{r3, pc}
 80814e8:	080401cc 	.word	0x080401cc

080814ec <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80814ec:	b508      	push	{r3, lr}
 80814ee:	4b02      	ldr	r3, [pc, #8]	; (80814f8 <spark_cloud_flag_connect+0xc>)
 80814f0:	681b      	ldr	r3, [r3, #0]
 80814f2:	68db      	ldr	r3, [r3, #12]
 80814f4:	9301      	str	r3, [sp, #4]
 80814f6:	bd08      	pop	{r3, pc}
 80814f8:	080401cc 	.word	0x080401cc

080814fc <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 80814fc:	b508      	push	{r3, lr}
 80814fe:	4b02      	ldr	r3, [pc, #8]	; (8081508 <spark_cloud_flag_disconnect+0xc>)
 8081500:	681b      	ldr	r3, [r3, #0]
 8081502:	691b      	ldr	r3, [r3, #16]
 8081504:	9301      	str	r3, [sp, #4]
 8081506:	bd08      	pop	{r3, pc}
 8081508:	080401cc 	.word	0x080401cc

0808150c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808150c:	b508      	push	{r3, lr}
 808150e:	4b02      	ldr	r3, [pc, #8]	; (8081518 <spark_cloud_flag_connected+0xc>)
 8081510:	681b      	ldr	r3, [r3, #0]
 8081512:	695b      	ldr	r3, [r3, #20]
 8081514:	9301      	str	r3, [sp, #4]
 8081516:	bd08      	pop	{r3, pc}
 8081518:	080401cc 	.word	0x080401cc

0808151c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 808151c:	b508      	push	{r3, lr}
 808151e:	4b02      	ldr	r3, [pc, #8]	; (8081528 <spark_deviceID+0xc>)
 8081520:	681b      	ldr	r3, [r3, #0]
 8081522:	69db      	ldr	r3, [r3, #28]
 8081524:	9301      	str	r3, [sp, #4]
 8081526:	bd08      	pop	{r3, pc}
 8081528:	080401cc 	.word	0x080401cc

0808152c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808152c:	b508      	push	{r3, lr}
 808152e:	4b02      	ldr	r3, [pc, #8]	; (8081538 <spark_send_event+0xc>)
 8081530:	681b      	ldr	r3, [r3, #0]
 8081532:	6a1b      	ldr	r3, [r3, #32]
 8081534:	9301      	str	r3, [sp, #4]
 8081536:	bd08      	pop	{r3, pc}
 8081538:	080401cc 	.word	0x080401cc

0808153c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808153c:	b508      	push	{r3, lr}
 808153e:	4b02      	ldr	r3, [pc, #8]	; (8081548 <spark_subscribe+0xc>)
 8081540:	681b      	ldr	r3, [r3, #0]
 8081542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081544:	9301      	str	r3, [sp, #4]
 8081546:	bd08      	pop	{r3, pc}
 8081548:	080401cc 	.word	0x080401cc

0808154c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808154c:	b508      	push	{r3, lr}
 808154e:	4b02      	ldr	r3, [pc, #8]	; (8081558 <spark_sync_time_pending+0xc>)
 8081550:	681b      	ldr	r3, [r3, #0]
 8081552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081554:	9301      	str	r3, [sp, #4]
 8081556:	bd08      	pop	{r3, pc}
 8081558:	080401cc 	.word	0x080401cc

0808155c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808155c:	b508      	push	{r3, lr}
 808155e:	4b02      	ldr	r3, [pc, #8]	; (8081568 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081560:	681b      	ldr	r3, [r3, #0]
 8081562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081564:	9301      	str	r3, [sp, #4]
 8081566:	bd08      	pop	{r3, pc}
 8081568:	080401cc 	.word	0x080401cc

0808156c <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808156c:	b508      	push	{r3, lr}
 808156e:	4b02      	ldr	r3, [pc, #8]	; (8081578 <network_ready+0xc>)
 8081570:	681b      	ldr	r3, [r3, #0]
 8081572:	691b      	ldr	r3, [r3, #16]
 8081574:	9301      	str	r3, [sp, #4]
 8081576:	bd08      	pop	{r3, pc}
 8081578:	080401c8 	.word	0x080401c8

0808157c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808157c:	b508      	push	{r3, lr}
 808157e:	4b02      	ldr	r3, [pc, #8]	; (8081588 <network_on+0xc>)
 8081580:	681b      	ldr	r3, [r3, #0]
 8081582:	695b      	ldr	r3, [r3, #20]
 8081584:	9301      	str	r3, [sp, #4]
 8081586:	bd08      	pop	{r3, pc}
 8081588:	080401c8 	.word	0x080401c8

0808158c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808158c:	b508      	push	{r3, lr}
 808158e:	4b02      	ldr	r3, [pc, #8]	; (8081598 <network_off+0xc>)
 8081590:	681b      	ldr	r3, [r3, #0]
 8081592:	699b      	ldr	r3, [r3, #24]
 8081594:	9301      	str	r3, [sp, #4]
 8081596:	bd08      	pop	{r3, pc}
 8081598:	080401c8 	.word	0x080401c8

0808159c <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808159c:	b508      	push	{r3, lr}
 808159e:	4b02      	ldr	r3, [pc, #8]	; (80815a8 <malloc+0xc>)
 80815a0:	681b      	ldr	r3, [r3, #0]
 80815a2:	681b      	ldr	r3, [r3, #0]
 80815a4:	9301      	str	r3, [sp, #4]
 80815a6:	bd08      	pop	{r3, pc}
 80815a8:	080401a0 	.word	0x080401a0

080815ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80815ac:	b508      	push	{r3, lr}
 80815ae:	4b02      	ldr	r3, [pc, #8]	; (80815b8 <free+0xc>)
 80815b0:	681b      	ldr	r3, [r3, #0]
 80815b2:	685b      	ldr	r3, [r3, #4]
 80815b4:	9301      	str	r3, [sp, #4]
 80815b6:	bd08      	pop	{r3, pc}
 80815b8:	080401a0 	.word	0x080401a0

080815bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80815bc:	b508      	push	{r3, lr}
 80815be:	4b02      	ldr	r3, [pc, #8]	; (80815c8 <realloc+0xc>)
 80815c0:	681b      	ldr	r3, [r3, #0]
 80815c2:	689b      	ldr	r3, [r3, #8]
 80815c4:	9301      	str	r3, [sp, #4]
 80815c6:	bd08      	pop	{r3, pc}
 80815c8:	080401a0 	.word	0x080401a0

080815cc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80815cc:	b508      	push	{r3, lr}
 80815ce:	4b02      	ldr	r3, [pc, #8]	; (80815d8 <siprintf+0xc>)
 80815d0:	681b      	ldr	r3, [r3, #0]
 80815d2:	691b      	ldr	r3, [r3, #16]
 80815d4:	9301      	str	r3, [sp, #4]
 80815d6:	bd08      	pop	{r3, pc}
 80815d8:	080401a0 	.word	0x080401a0

080815dc <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80815dc:	b508      	push	{r3, lr}
 80815de:	4b02      	ldr	r3, [pc, #8]	; (80815e8 <siscanf+0xc>)
 80815e0:	681b      	ldr	r3, [r3, #0]
 80815e2:	699b      	ldr	r3, [r3, #24]
 80815e4:	9301      	str	r3, [sp, #4]
 80815e6:	bd08      	pop	{r3, pc}
 80815e8:	080401a0 	.word	0x080401a0

080815ec <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80815ec:	b508      	push	{r3, lr}
 80815ee:	4b02      	ldr	r3, [pc, #8]	; (80815f8 <snprintf+0xc>)
 80815f0:	681b      	ldr	r3, [r3, #0]
 80815f2:	69db      	ldr	r3, [r3, #28]
 80815f4:	9301      	str	r3, [sp, #4]
 80815f6:	bd08      	pop	{r3, pc}
 80815f8:	080401a0 	.word	0x080401a0

080815fc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80815fc:	b508      	push	{r3, lr}
 80815fe:	4b02      	ldr	r3, [pc, #8]	; (8081608 <abort+0xc>)
 8081600:	681b      	ldr	r3, [r3, #0]
 8081602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081604:	9301      	str	r3, [sp, #4]
 8081606:	bd08      	pop	{r3, pc}
 8081608:	080401a0 	.word	0x080401a0

0808160c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808160c:	b508      	push	{r3, lr}
 808160e:	4b02      	ldr	r3, [pc, #8]	; (8081618 <_malloc_r+0xc>)
 8081610:	681b      	ldr	r3, [r3, #0]
 8081612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081614:	9301      	str	r3, [sp, #4]
 8081616:	bd08      	pop	{r3, pc}
 8081618:	080401a0 	.word	0x080401a0

0808161c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808161c:	2100      	movs	r1, #0
 808161e:	f7ff bf09 	b.w	8081434 <system_delay_ms>

08081622 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081622:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081624:	6883      	ldr	r3, [r0, #8]
 8081626:	4604      	mov	r4, r0
 8081628:	b90b      	cbnz	r3, 808162e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808162a:	f001 fc0e 	bl	8082e4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808162e:	68c3      	ldr	r3, [r0, #12]
 8081630:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081632:	68a3      	ldr	r3, [r4, #8]
 8081634:	b11b      	cbz	r3, 808163e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081636:	2203      	movs	r2, #3
 8081638:	4621      	mov	r1, r4
 808163a:	4620      	mov	r0, r4
 808163c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808163e:	4620      	mov	r0, r4
}
 8081640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081644:	f7fe bd2b 	b.w	808009e <_ZdlPv>

08081648 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081648:	2200      	movs	r2, #0
 808164a:	4611      	mov	r1, r2
 808164c:	4610      	mov	r0, r2
 808164e:	f7ff bf8d 	b.w	808156c <network_ready>
	...

08081654 <_ZN5spark13CellularClass4RSSIEv>:

#include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081654:	b570      	push	{r4, r5, r6, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8081656:	4b1b      	ldr	r3, [pc, #108]	; (80816c4 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8081658:	2500      	movs	r5, #0
 808165a:	6003      	str	r3, [r0, #0]
 808165c:	2618      	movs	r6, #24
 808165e:	3328      	adds	r3, #40	; 0x28
 8081660:	b088      	sub	sp, #32
 8081662:	6043      	str	r3, [r0, #4]
 8081664:	6085      	str	r5, [r0, #8]
 8081666:	60c5      	str	r5, [r0, #12]
 8081668:	4632      	mov	r2, r6
 808166a:	4629      	mov	r1, r5
 808166c:	4604      	mov	r4, r0
 808166e:	3010      	adds	r0, #16
 8081670:	f002 fd9b 	bl	80841aa <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8081674:	462a      	mov	r2, r5
 8081676:	4629      	mov	r1, r5
 8081678:	4628      	mov	r0, r5
 808167a:	f7ff ff77 	bl	808156c <network_ready>
 808167e:	b908      	cbnz	r0, 8081684 <_ZN5spark13CellularClass4RSSIEv+0x30>
            sig.rssi = 0;
 8081680:	60a0      	str	r0, [r4, #8]
            return sig;
 8081682:	e01b      	b.n	80816bc <_ZN5spark13CellularClass4RSSIEv+0x68>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8081684:	4629      	mov	r1, r5
 8081686:	4632      	mov	r2, r6
 8081688:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 808168a:	9500      	str	r5, [sp, #0]
 808168c:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 808168e:	f002 fd8c 	bl	80841aa <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081692:	a902      	add	r1, sp, #8
 8081694:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8081696:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 808169a:	f7ff fd23 	bl	80810e4 <cellular_signal>
 808169e:	b110      	cbz	r0, 80816a6 <_ZN5spark13CellularClass4RSSIEv+0x52>
            sig.rssi = 1;
 80816a0:	2301      	movs	r3, #1
 80816a2:	60a3      	str	r3, [r4, #8]
            return sig;
 80816a4:	e00a      	b.n	80816bc <_ZN5spark13CellularClass4RSSIEv+0x68>
        }
        sig.rssi = sig_hal.rssi;
 80816a6:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80816a8:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 80816aa:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80816ac:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80816ae:	b90b      	cbnz	r3, 80816b4 <_ZN5spark13CellularClass4RSSIEv+0x60>
            sig.rssi = 2;
 80816b0:	2302      	movs	r3, #2
 80816b2:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 80816b4:	a902      	add	r1, sp, #8
 80816b6:	4620      	mov	r0, r4
 80816b8:	f000 f89c 	bl	80817f4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 80816bc:	4620      	mov	r0, r4
 80816be:	b008      	add	sp, #32
 80816c0:	bd70      	pop	{r4, r5, r6, pc}
 80816c2:	bf00      	nop
 80816c4:	08084e08 	.word	0x08084e08

080816c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 80816c8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80816ca:	4c0b      	ldr	r4, [pc, #44]	; (80816f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 80816cc:	2528      	movs	r5, #40	; 0x28
 80816ce:	462a      	mov	r2, r5
 80816d0:	2100      	movs	r1, #0
 80816d2:	4620      	mov	r0, r4
 80816d4:	f002 fd69 	bl	80841aa <memset>
        cid = -1;
 80816d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80816dc:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 80816de:	8025      	strh	r5, [r4, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 80816e0:	4c06      	ldr	r4, [pc, #24]	; (80816fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 80816e2:	4b07      	ldr	r3, [pc, #28]	; (8081700 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 80816e4:	4620      	mov	r0, r4
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 80816e6:	252c      	movs	r5, #44	; 0x2c
 80816e8:	f840 3b04 	str.w	r3, [r0], #4
 80816ec:	462a      	mov	r2, r5
 80816ee:	2100      	movs	r1, #0
 80816f0:	f002 fd5b 	bl	80841aa <memset>
        size = sizeof(*this);
 80816f4:	80a5      	strh	r5, [r4, #4]
 80816f6:	bd38      	pop	{r3, r4, r5, pc}
 80816f8:	200005f4 	.word	0x200005f4
 80816fc:	200005c4 	.word	0x200005c4
 8081700:	08084dfc 	.word	0x08084dfc

08081704 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081704:	4770      	bx	lr

08081706 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8081706:	7d00      	ldrb	r0, [r0, #20]
 8081708:	4770      	bx	lr
	...

0808170c <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 808170c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 808170e:	7d03      	ldrb	r3, [r0, #20]
 8081710:	b11b      	cbz	r3, 808171a <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8081712:	6980      	ldr	r0, [r0, #24]
 8081714:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081718:	d101      	bne.n	808171e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 808171a:	2000      	movs	r0, #0
 808171c:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 808171e:	f002 f9b3 	bl	8083a88 <__aeabi_i2f>
 8081722:	4902      	ldr	r1, [pc, #8]	; (808172c <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081724:	f002 fab8 	bl	8083c98 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081728:	bd08      	pop	{r3, pc}
 808172a:	bf00      	nop
 808172c:	42c80000 	.word	0x42c80000

08081730 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8081730:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081732:	7d03      	ldrb	r3, [r0, #20]
 8081734:	b11b      	cbz	r3, 808173e <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8081736:	6a00      	ldr	r0, [r0, #32]
 8081738:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 808173c:	d101      	bne.n	8081742 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 808173e:	2000      	movs	r0, #0
 8081740:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8081742:	f002 f9a1 	bl	8083a88 <__aeabi_i2f>
 8081746:	4902      	ldr	r1, [pc, #8]	; (8081750 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081748:	f002 faa6 	bl	8083c98 <__aeabi_fdiv>
    }

    return 0.0f;
}
 808174c:	bd08      	pop	{r3, pc}
 808174e:	bf00      	nop
 8081750:	42c80000 	.word	0x42c80000

08081754 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8081754:	b570      	push	{r4, r5, r6, lr}
 8081756:	460d      	mov	r5, r1
 8081758:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 808175a:	220a      	movs	r2, #10
 808175c:	6881      	ldr	r1, [r0, #8]
 808175e:	4628      	mov	r0, r5
 8081760:	f000 fea4 	bl	80824ac <_ZN5Print5printEii>
    n += p.print(',');
 8081764:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081766:	4604      	mov	r4, r0
    n += p.print(',');
 8081768:	4628      	mov	r0, r5
 808176a:	f000 fe4e 	bl	808240a <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 808176e:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8081770:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8081772:	68f1      	ldr	r1, [r6, #12]
 8081774:	4628      	mov	r0, r5
 8081776:	f000 fe99 	bl	80824ac <_ZN5Print5printEii>
    return n;
}
 808177a:	4420      	add	r0, r4
 808177c:	bd70      	pop	{r4, r5, r6, pc}

0808177e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 808177e:	f1a0 0004 	sub.w	r0, r0, #4
 8081782:	f7ff bfe7 	b.w	8081754 <_ZNK14CellularSignal7printToER5Print>

08081786 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081786:	b510      	push	{r4, lr}
 8081788:	4604      	mov	r4, r0
 808178a:	f7fe fc88 	bl	808009e <_ZdlPv>
 808178e:	4620      	mov	r0, r4
 8081790:	bd10      	pop	{r4, pc}
	...

08081794 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8081794:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8081796:	7d03      	ldrb	r3, [r0, #20]
 8081798:	b15b      	cbz	r3, 80817b2 <_ZNK14CellularSignal10getQualityEv+0x1e>
 808179a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808179c:	2800      	cmp	r0, #0
 808179e:	db08      	blt.n	80817b2 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 80817a0:	f002 f972 	bl	8083a88 <__aeabi_i2f>
 80817a4:	4904      	ldr	r1, [pc, #16]	; (80817b8 <_ZNK14CellularSignal10getQualityEv+0x24>)
 80817a6:	f002 fa77 	bl	8083c98 <__aeabi_fdiv>
 80817aa:	4904      	ldr	r1, [pc, #16]	; (80817bc <_ZNK14CellularSignal10getQualityEv+0x28>)
 80817ac:	f002 f9c0 	bl	8083b30 <__aeabi_fmul>
 80817b0:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 80817b2:	4803      	ldr	r0, [pc, #12]	; (80817c0 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 80817b4:	bd08      	pop	{r3, pc}
 80817b6:	bf00      	nop
 80817b8:	477fff00 	.word	0x477fff00
 80817bc:	42c80000 	.word	0x42c80000
 80817c0:	bf800000 	.word	0xbf800000

080817c4 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 80817c4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 80817c6:	7d03      	ldrb	r3, [r0, #20]
 80817c8:	b15b      	cbz	r3, 80817e2 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 80817ca:	69c0      	ldr	r0, [r0, #28]
 80817cc:	2800      	cmp	r0, #0
 80817ce:	db08      	blt.n	80817e2 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 80817d0:	f002 f95a 	bl	8083a88 <__aeabi_i2f>
 80817d4:	4904      	ldr	r1, [pc, #16]	; (80817e8 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 80817d6:	f002 fa5f 	bl	8083c98 <__aeabi_fdiv>
 80817da:	4904      	ldr	r1, [pc, #16]	; (80817ec <_ZNK14CellularSignal11getStrengthEv+0x28>)
 80817dc:	f002 f9a8 	bl	8083b30 <__aeabi_fmul>
 80817e0:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 80817e2:	4803      	ldr	r0, [pc, #12]	; (80817f0 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 80817e4:	bd08      	pop	{r3, pc}
 80817e6:	bf00      	nop
 80817e8:	477fff00 	.word	0x477fff00
 80817ec:	42c80000 	.word	0x42c80000
 80817f0:	bf800000 	.word	0xbf800000

080817f4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 80817f4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 80817f6:	460d      	mov	r5, r1
 80817f8:	f100 0410 	add.w	r4, r0, #16
 80817fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80817fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081800:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081804:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8081808:	2001      	movs	r0, #1
 808180a:	bd30      	pop	{r4, r5, pc}

0808180c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808180c:	4770      	bx	lr

0808180e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808180e:	2000      	movs	r0, #0
 8081810:	4770      	bx	lr

08081812 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081812:	b510      	push	{r4, lr}
 8081814:	4604      	mov	r4, r0
 8081816:	f7fe fc42 	bl	808009e <_ZdlPv>
 808181a:	4620      	mov	r0, r4
 808181c:	bd10      	pop	{r4, pc}

0808181e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808181e:	b508      	push	{r3, lr}
      { delete this; }
 8081820:	b108      	cbz	r0, 8081826 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081822:	f7ff fff6 	bl	8081812 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081826:	bd08      	pop	{r3, pc}

08081828 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081828:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 808182a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808182c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808182e:	b113      	cbz	r3, 8081836 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081830:	2203      	movs	r2, #3
 8081832:	4601      	mov	r1, r0
 8081834:	4798      	blx	r3
    }
 8081836:	4620      	mov	r0, r4
 8081838:	bd10      	pop	{r4, pc}

0808183a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808183a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808183c:	68c4      	ldr	r4, [r0, #12]
 808183e:	b1d4      	cbz	r4, 8081876 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081840:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081842:	2b02      	cmp	r3, #2
 8081844:	d102      	bne.n	808184c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081846:	68e0      	ldr	r0, [r4, #12]
 8081848:	f7ff feb0 	bl	80815ac <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808184c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808184e:	b12d      	cbz	r5, 808185c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081850:	4628      	mov	r0, r5
 8081852:	f7ff ffe9 	bl	8081828 <_ZNSt14_Function_baseD1Ev>
 8081856:	4628      	mov	r0, r5
 8081858:	f7fe fc21 	bl	808009e <_ZdlPv>
 808185c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808185e:	b12d      	cbz	r5, 808186c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8081860:	4628      	mov	r0, r5
 8081862:	f7ff ffe1 	bl	8081828 <_ZNSt14_Function_baseD1Ev>
 8081866:	4628      	mov	r0, r5
 8081868:	f7fe fc19 	bl	808009e <_ZdlPv>
 808186c:	4620      	mov	r0, r4
 808186e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081872:	f7fe bc14 	b.w	808009e <_ZdlPv>
 8081876:	bd38      	pop	{r3, r4, r5, pc}

08081878 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081878:	b510      	push	{r4, lr}
 808187a:	b088      	sub	sp, #32
 808187c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808187e:	4668      	mov	r0, sp
 8081880:	f000 fe90 	bl	80825a4 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8081884:	4669      	mov	r1, sp
 8081886:	a804      	add	r0, sp, #16
 8081888:	f000 feae 	bl	80825e8 <_ZN6StringC1ERKS_>
 808188c:	a804      	add	r0, sp, #16
 808188e:	47a0      	blx	r4
 8081890:	4604      	mov	r4, r0
 8081892:	a804      	add	r0, sp, #16
 8081894:	f000 fe3f 	bl	8082516 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081898:	4668      	mov	r0, sp
 808189a:	f000 fe3c 	bl	8082516 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 808189e:	4620      	mov	r0, r4
 80818a0:	b008      	add	sp, #32
 80818a2:	bd10      	pop	{r4, pc}

080818a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80818a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80818a6:	4607      	mov	r7, r0
 80818a8:	460e      	mov	r6, r1
 80818aa:	4615      	mov	r5, r2
 80818ac:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80818ae:	2410      	movs	r4, #16
 80818b0:	4622      	mov	r2, r4
 80818b2:	2100      	movs	r1, #0
 80818b4:	4668      	mov	r0, sp
 80818b6:	f002 fc78 	bl	80841aa <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80818ba:	2200      	movs	r2, #0
 80818bc:	4669      	mov	r1, sp
 80818be:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80818c0:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80818c4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80818c6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80818c8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80818ca:	f7ff fdff 	bl	80814cc <spark_function>
}
 80818ce:	b005      	add	sp, #20
 80818d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080818d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80818d2:	b513      	push	{r0, r1, r4, lr}
 80818d4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80818d6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80818da:	2300      	movs	r3, #0
 80818dc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80818de:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80818e0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80818e2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80818e4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80818e6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80818e8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80818ea:	f7fe fd43 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80818ee:	4620      	mov	r0, r4
 80818f0:	b002      	add	sp, #8
 80818f2:	bd10      	pop	{r4, pc}

080818f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80818f4:	680b      	ldr	r3, [r1, #0]
 80818f6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80818f8:	b113      	cbz	r3, 8081900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80818fa:	685a      	ldr	r2, [r3, #4]
 80818fc:	3201      	adds	r2, #1
 80818fe:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081900:	4770      	bx	lr

08081902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081904:	460c      	mov	r4, r1
 8081906:	4606      	mov	r6, r0
 8081908:	460f      	mov	r7, r1
 808190a:	f854 3b04 	ldr.w	r3, [r4], #4
 808190e:	ad02      	add	r5, sp, #8
 8081910:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081914:	4621      	mov	r1, r4
 8081916:	a801      	add	r0, sp, #4
 8081918:	f7ff ffec 	bl	80818f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808191c:	4629      	mov	r1, r5
 808191e:	4630      	mov	r0, r6
 8081920:	f7ff ffd7 	bl	80818d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081924:	a801      	add	r0, sp, #4
 8081926:	f7fe fd25 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808192a:	4620      	mov	r0, r4
 808192c:	f7fe fd22 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8081930:	4638      	mov	r0, r7
 8081932:	f7fe fbb4 	bl	808009e <_ZdlPv>
        return p;
    }
 8081936:	4630      	mov	r0, r6
 8081938:	b003      	add	sp, #12
 808193a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808193c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808193c:	b513      	push	{r0, r1, r4, lr}
 808193e:	460b      	mov	r3, r1
 8081940:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081942:	c803      	ldmia	r0, {r0, r1}
 8081944:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081948:	e893 0003 	ldmia.w	r3, {r0, r1}
 808194c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081950:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081954:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081958:	b002      	add	sp, #8
 808195a:	bd10      	pop	{r4, pc}

0808195c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808195c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808195e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081960:	b90a      	cbnz	r2, 8081966 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081962:	f001 fa72 	bl	8082e4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081966:	68c3      	ldr	r3, [r0, #12]
    }
 8081968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808196c:	4718      	bx	r3

0808196e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808196e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081970:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081972:	f100 0110 	add.w	r1, r0, #16
 8081976:	f7ff fff1 	bl	808195c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808197a:	bd08      	pop	{r3, pc}

0808197c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808197c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808197e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081980:	b90a      	cbnz	r2, 8081986 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081982:	f001 fa62 	bl	8082e4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081986:	68c3      	ldr	r3, [r0, #12]
    }
 8081988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808198c:	4718      	bx	r3

0808198e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808198e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081990:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081992:	f100 0110 	add.w	r1, r0, #16
 8081996:	f7ff fff1 	bl	808197c <_ZNKSt8functionIFvRKbEEclES1_>
 808199a:	bd08      	pop	{r3, pc}

0808199c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808199c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808199e:	2300      	movs	r3, #0
 80819a0:	6083      	str	r3, [r0, #8]
 80819a2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80819a4:	4604      	mov	r4, r0
 80819a6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80819a8:	b12b      	cbz	r3, 80819b6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80819aa:	2202      	movs	r2, #2
 80819ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80819ae:	68eb      	ldr	r3, [r5, #12]
 80819b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80819b2:	68ab      	ldr	r3, [r5, #8]
 80819b4:	60a3      	str	r3, [r4, #8]
	}
    }
 80819b6:	4620      	mov	r0, r4
 80819b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080819bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80819bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80819c0:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80819c4:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80819c6:	f04f 0002 	mov.w	r0, #2
 80819ca:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80819cc:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80819d0:	808b      	strh	r3, [r1, #4]
 80819d2:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80819d4:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80819d6:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80819da:	600b      	str	r3, [r1, #0]
 80819dc:	e8d4 1f4f 	ldrexb	r1, [r4]
 80819e0:	4299      	cmp	r1, r3
 80819e2:	d103      	bne.n	80819ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80819e4:	e8c4 0f45 	strexb	r5, r0, [r4]
 80819e8:	2d00      	cmp	r5, #0
 80819ea:	d1f7      	bne.n	80819dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80819ec:	d002      	beq.n	80819f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80819ee:	f88d 1000 	strb.w	r1, [sp]
 80819f2:	e06b      	b.n	8081acc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80819f4:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80819f8:	bf1c      	itt	ne
 80819fa:	60e7      	strne	r7, [r4, #12]
 80819fc:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80819fe:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8081a02:	bf18      	it	ne
 8081a04:	461f      	movne	r7, r3
 8081a06:	2301      	movs	r3, #1
 8081a08:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081a0a:	f3bf 8f5f 	dmb	sy
 8081a0e:	f104 0308 	add.w	r3, r4, #8
 8081a12:	2000      	movs	r0, #0
 8081a14:	e853 6f00 	ldrex	r6, [r3]
 8081a18:	e843 0200 	strex	r2, r0, [r3]
 8081a1c:	2a00      	cmp	r2, #0
 8081a1e:	d1f9      	bne.n	8081a14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8081a20:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081a24:	2e00      	cmp	r6, #0
 8081a26:	d051      	beq.n	8081acc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081a28:	f7ff fd1c 	bl	8081464 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081a2c:	b120      	cbz	r0, 8081a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081a2e:	4629      	mov	r1, r5
 8081a30:	4630      	mov	r0, r6
 8081a32:	f7ff ff93 	bl	808195c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081a36:	e043      	b.n	8081ac0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081a38:	4631      	mov	r1, r6
 8081a3a:	4668      	mov	r0, sp
 8081a3c:	f7ff ffae 	bl	808199c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081a40:	68e0      	ldr	r0, [r4, #12]
 8081a42:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081a46:	b108      	cbz	r0, 8081a4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8081a48:	f002 fbf2 	bl	8084230 <strdup>
 8081a4c:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081a4e:	2010      	movs	r0, #16
 8081a50:	f8ad 5014 	strh.w	r5, [sp, #20]
 8081a54:	f7fe fb21 	bl	808009a <_Znwj>
 8081a58:	4605      	mov	r5, r0
 8081a5a:	b330      	cbz	r0, 8081aaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081a5c:	f04f 0800 	mov.w	r8, #0
 8081a60:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081a64:	2018      	movs	r0, #24
 8081a66:	f7fe fb18 	bl	808009a <_Znwj>
 8081a6a:	4604      	mov	r4, r0
 8081a6c:	b1c0      	cbz	r0, 8081aa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081a6e:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081a72:	4601      	mov	r1, r0
 8081a74:	4668      	mov	r0, sp
 8081a76:	f7ff ff61 	bl	808193c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a7a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8081a7c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081a7e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a80:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081a82:	9202      	str	r2, [sp, #8]
 8081a84:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081a86:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081a88:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8081a8c:	9203      	str	r2, [sp, #12]
 8081a8e:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8081a90:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8081a94:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081a98:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8081a9a:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081a9e:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081aa0:	4b0d      	ldr	r3, [pc, #52]	; (8081ad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081aa2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081aa4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081aa6:	4b0d      	ldr	r3, [pc, #52]	; (8081adc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8081aa8:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081aaa:	9804      	ldr	r0, [sp, #16]
 8081aac:	f7ff fd7e 	bl	80815ac <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081ab0:	4668      	mov	r0, sp
 8081ab2:	f7ff feb9 	bl	8081828 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081ab6:	2200      	movs	r2, #0
 8081ab8:	4629      	mov	r1, r5
 8081aba:	4809      	ldr	r0, [pc, #36]	; (8081ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8081abc:	f7ff fcda 	bl	8081474 <application_thread_invoke>
 8081ac0:	4630      	mov	r0, r6
 8081ac2:	f7ff feb1 	bl	8081828 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081ac6:	4630      	mov	r0, r6
 8081ac8:	f7fe fae9 	bl	808009e <_ZdlPv>
 8081acc:	4638      	mov	r0, r7
 8081ace:	f7ff fd6d 	bl	80815ac <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8081ad2:	b006      	add	sp, #24
 8081ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081ad8:	0808196f 	.word	0x0808196f
 8081adc:	08081bcd 	.word	0x08081bcd
 8081ae0:	08081623 	.word	0x08081623

08081ae4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081ae8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081aea:	ad07      	add	r5, sp, #28
 8081aec:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081af0:	4606      	mov	r6, r0
 8081af2:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081af4:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081af6:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081af8:	460f      	mov	r7, r1
 8081afa:	4690      	mov	r8, r2
 8081afc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081b00:	f8c5 b004 	str.w	fp, [r5, #4]
 8081b04:	f8c5 b008 	str.w	fp, [r5, #8]
 8081b08:	9307      	str	r3, [sp, #28]
 8081b0a:	f7fe fac6 	bl	808009a <_Znwj>
 8081b0e:	4604      	mov	r4, r0
 8081b10:	b138      	cbz	r0, 8081b22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081b12:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081b16:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081b1a:	f8c0 b004 	str.w	fp, [r0, #4]
 8081b1e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081b22:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081b24:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081b26:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081b28:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081b2a:	f7fe fab6 	bl	808009a <_Znwj>
 8081b2e:	b128      	cbz	r0, 8081b3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081b30:	2301      	movs	r3, #1
 8081b32:	6043      	str	r3, [r0, #4]
 8081b34:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081b36:	4b23      	ldr	r3, [pc, #140]	; (8081bc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8081b38:	60c4      	str	r4, [r0, #12]
 8081b3a:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8081b3c:	4b22      	ldr	r3, [pc, #136]	; (8081bc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081b3e:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081b40:	2008      	movs	r0, #8
 8081b42:	9308      	str	r3, [sp, #32]
 8081b44:	f7fe faa9 	bl	808009a <_Znwj>
 8081b48:	4604      	mov	r4, r0
 8081b4a:	b128      	cbz	r0, 8081b58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081b4c:	9b03      	ldr	r3, [sp, #12]
 8081b4e:	a904      	add	r1, sp, #16
 8081b50:	f840 3b04 	str.w	r3, [r0], #4
 8081b54:	f7ff fece 	bl	80818f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081b58:	9500      	str	r5, [sp, #0]
 8081b5a:	fa5f f38a 	uxtb.w	r3, sl
 8081b5e:	464a      	mov	r2, r9
 8081b60:	4641      	mov	r1, r8
 8081b62:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8081b64:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081b66:	f7ff fce1 	bl	808152c <spark_send_event>
 8081b6a:	b9b8      	cbnz	r0, 8081b9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081b6c:	9b03      	ldr	r3, [sp, #12]
 8081b6e:	785b      	ldrb	r3, [r3, #1]
 8081b70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081b74:	b993      	cbnz	r3, 8081b9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081b76:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8081b7a:	a905      	add	r1, sp, #20
 8081b7c:	a803      	add	r0, sp, #12
 8081b7e:	9205      	str	r2, [sp, #20]
 8081b80:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081b84:	f7ff ff1a 	bl	80819bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081b88:	9805      	ldr	r0, [sp, #20]
 8081b8a:	f7ff fd0f 	bl	80815ac <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081b8e:	a805      	add	r0, sp, #20
 8081b90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081b92:	f7ff feb6 	bl	8081902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081b96:	a806      	add	r0, sp, #24
 8081b98:	f7fe fbec 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081b9c:	9b03      	ldr	r3, [sp, #12]
 8081b9e:	a904      	add	r1, sp, #16
 8081ba0:	a806      	add	r0, sp, #24
 8081ba2:	9305      	str	r3, [sp, #20]
 8081ba4:	f7ff fea6 	bl	80818f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8081ba8:	a905      	add	r1, sp, #20
 8081baa:	4630      	mov	r0, r6
 8081bac:	f7ff fe91 	bl	80818d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081bb0:	a806      	add	r0, sp, #24
 8081bb2:	f7fe fbdf 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081bb6:	a804      	add	r0, sp, #16
 8081bb8:	f7fe fbdc 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081bbc:	4630      	mov	r0, r6
 8081bbe:	b00b      	add	sp, #44	; 0x2c
 8081bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081bc4:	08084e3c 	.word	0x08084e3c
 8081bc8:	08081d35 	.word	0x08081d35

08081bcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081bcc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081bd0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081bd2:	d006      	beq.n	8081be2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081bd4:	2a03      	cmp	r2, #3
 8081bd6:	d017      	beq.n	8081c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081bd8:	2a01      	cmp	r2, #1
 8081bda:	d120      	bne.n	8081c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081bdc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081bde:	6003      	str	r3, [r0, #0]
	      break;
 8081be0:	e01d      	b.n	8081c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081be2:	2018      	movs	r0, #24
 8081be4:	680e      	ldr	r6, [r1, #0]
 8081be6:	f7fe fa58 	bl	808009a <_Znwj>
 8081bea:	4605      	mov	r5, r0
 8081bec:	b150      	cbz	r0, 8081c04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081bee:	4631      	mov	r1, r6
 8081bf0:	f7ff fed4 	bl	808199c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081bf4:	6930      	ldr	r0, [r6, #16]
 8081bf6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081bfa:	b108      	cbz	r0, 8081c00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8081bfc:	f002 fb18 	bl	8084230 <strdup>
 8081c00:	6128      	str	r0, [r5, #16]
 8081c02:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081c04:	6025      	str	r5, [r4, #0]
 8081c06:	e00a      	b.n	8081c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081c08:	6804      	ldr	r4, [r0, #0]
 8081c0a:	b144      	cbz	r4, 8081c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081c0c:	6920      	ldr	r0, [r4, #16]
 8081c0e:	f7ff fccd 	bl	80815ac <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081c12:	4620      	mov	r0, r4
 8081c14:	f7ff fe08 	bl	8081828 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081c18:	4620      	mov	r0, r4
 8081c1a:	f7fe fa40 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081c1e:	2000      	movs	r0, #0
 8081c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081c22 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081c22:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081c24:	2300      	movs	r3, #0
 8081c26:	6083      	str	r3, [r0, #8]
 8081c28:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081c2a:	4604      	mov	r4, r0
 8081c2c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081c2e:	b12b      	cbz	r3, 8081c3c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081c30:	2202      	movs	r2, #2
 8081c32:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081c34:	68eb      	ldr	r3, [r5, #12]
 8081c36:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081c38:	68ab      	ldr	r3, [r5, #8]
 8081c3a:	60a3      	str	r3, [r4, #8]
	}
    }
 8081c3c:	4620      	mov	r0, r4
 8081c3e:	bd38      	pop	{r3, r4, r5, pc}

08081c40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081c40:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081c42:	b570      	push	{r4, r5, r6, lr}
 8081c44:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081c46:	d006      	beq.n	8081c56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8081c48:	2a03      	cmp	r2, #3
 8081c4a:	d011      	beq.n	8081c70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8081c4c:	2a01      	cmp	r2, #1
 8081c4e:	d117      	bne.n	8081c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081c50:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081c52:	6003      	str	r3, [r0, #0]
	      break;
 8081c54:	e014      	b.n	8081c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081c56:	2014      	movs	r0, #20
 8081c58:	680e      	ldr	r6, [r1, #0]
 8081c5a:	f7fe fa1e 	bl	808009a <_Znwj>
 8081c5e:	4605      	mov	r5, r0
 8081c60:	b120      	cbz	r0, 8081c6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081c62:	4631      	mov	r1, r6
 8081c64:	f7ff ffdd 	bl	8081c22 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8081c68:	7c33      	ldrb	r3, [r6, #16]
 8081c6a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081c6c:	6025      	str	r5, [r4, #0]
 8081c6e:	e007      	b.n	8081c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081c70:	6804      	ldr	r4, [r0, #0]
 8081c72:	b12c      	cbz	r4, 8081c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081c74:	4620      	mov	r0, r4
 8081c76:	f7ff fdd7 	bl	8081828 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081c7a:	4620      	mov	r0, r4
 8081c7c:	f7fe fa0f 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081c80:	2000      	movs	r0, #0
 8081c82:	bd70      	pop	{r4, r5, r6, pc}

08081c84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8081c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081c86:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081c88:	f3bf 8f5f 	dmb	sy
 8081c8c:	b087      	sub	sp, #28
 8081c8e:	2300      	movs	r3, #0
 8081c90:	e850 6f00 	ldrex	r6, [r0]
 8081c94:	e840 3200 	strex	r2, r3, [r0]
 8081c98:	2a00      	cmp	r2, #0
 8081c9a:	d1f9      	bne.n	8081c90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8081c9c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081ca0:	2e00      	cmp	r6, #0
 8081ca2:	d03e      	beq.n	8081d22 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081ca4:	4618      	mov	r0, r3
 8081ca6:	f7ff fbdd 	bl	8081464 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081caa:	4607      	mov	r7, r0
 8081cac:	b120      	cbz	r0, 8081cb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081cae:	4621      	mov	r1, r4
 8081cb0:	4630      	mov	r0, r6
 8081cb2:	f7ff fe63 	bl	808197c <_ZNKSt8functionIFvRKbEEclES1_>
 8081cb6:	e02e      	b.n	8081d16 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081cb8:	4631      	mov	r1, r6
 8081cba:	a801      	add	r0, sp, #4
 8081cbc:	f7ff ffb1 	bl	8081c22 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081cc0:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081cc2:	2010      	movs	r0, #16
 8081cc4:	f88d 3014 	strb.w	r3, [sp, #20]
 8081cc8:	f7fe f9e7 	bl	808009a <_Znwj>
 8081ccc:	4605      	mov	r5, r0
 8081cce:	b1d0      	cbz	r0, 8081d06 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081cd0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081cd2:	2014      	movs	r0, #20
 8081cd4:	f7fe f9e1 	bl	808009a <_Znwj>
 8081cd8:	4604      	mov	r4, r0
 8081cda:	b178      	cbz	r0, 8081cfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081cdc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081cde:	4601      	mov	r1, r0
 8081ce0:	a801      	add	r0, sp, #4
 8081ce2:	f7ff fe2b 	bl	808193c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081ce6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081ce8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081cea:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081cec:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081cee:	9203      	str	r2, [sp, #12]
 8081cf0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081cf2:	60e3      	str	r3, [r4, #12]
 8081cf4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081cf8:	9204      	str	r2, [sp, #16]
 8081cfa:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081cfc:	4b0a      	ldr	r3, [pc, #40]	; (8081d28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081cfe:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081d00:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081d02:	4b0a      	ldr	r3, [pc, #40]	; (8081d2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8081d04:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081d06:	a801      	add	r0, sp, #4
 8081d08:	f7ff fd8e 	bl	8081828 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081d0c:	2200      	movs	r2, #0
 8081d0e:	4629      	mov	r1, r5
 8081d10:	4807      	ldr	r0, [pc, #28]	; (8081d30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8081d12:	f7ff fbaf 	bl	8081474 <application_thread_invoke>
 8081d16:	4630      	mov	r0, r6
 8081d18:	f7ff fd86 	bl	8081828 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081d1c:	4630      	mov	r0, r6
 8081d1e:	f7fe f9be 	bl	808009e <_ZdlPv>
        }
    }
 8081d22:	b007      	add	sp, #28
 8081d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081d26:	bf00      	nop
 8081d28:	0808198f 	.word	0x0808198f
 8081d2c:	08081c41 	.word	0x08081c41
 8081d30:	08081623 	.word	0x08081623

08081d34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8081d34:	b530      	push	{r4, r5, lr}
 8081d36:	4604      	mov	r4, r0
 8081d38:	b085      	sub	sp, #20
 8081d3a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8081d3c:	4668      	mov	r0, sp
 8081d3e:	4611      	mov	r1, r2
 8081d40:	f7ff fddf 	bl	8081902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8081d44:	b17c      	cbz	r4, 8081d66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8081d46:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081d48:	4628      	mov	r0, r5
 8081d4a:	b10d      	cbz	r5, 8081d50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8081d4c:	f002 fa70 	bl	8084230 <strdup>
 8081d50:	9002      	str	r0, [sp, #8]
 8081d52:	a902      	add	r1, sp, #8
 8081d54:	4668      	mov	r0, sp
 8081d56:	f8ad 400c 	strh.w	r4, [sp, #12]
 8081d5a:	f7ff fe2f 	bl	80819bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081d5e:	9802      	ldr	r0, [sp, #8]
 8081d60:	f7ff fc24 	bl	80815ac <free>
 8081d64:	e01d      	b.n	8081da2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081d66:	f04f 0201 	mov.w	r2, #1
 8081d6a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081d6c:	f88d 4008 	strb.w	r4, [sp, #8]
 8081d70:	e8d0 3f4f 	ldrexb	r3, [r0]
 8081d74:	42a3      	cmp	r3, r4
 8081d76:	d103      	bne.n	8081d80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8081d78:	e8c0 2f41 	strexb	r1, r2, [r0]
 8081d7c:	2900      	cmp	r1, #0
 8081d7e:	d1f7      	bne.n	8081d70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8081d80:	d002      	beq.n	8081d88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8081d82:	f88d 3008 	strb.w	r3, [sp, #8]
 8081d86:	e00c      	b.n	8081da2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8081d88:	f110 010c 	adds.w	r1, r0, #12
 8081d8c:	f04f 0301 	mov.w	r3, #1
 8081d90:	bf18      	it	ne
 8081d92:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081d94:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8081d98:	3004      	adds	r0, #4
 8081d9a:	f800 3c03 	strb.w	r3, [r0, #-3]
 8081d9e:	f7ff ff71 	bl	8081c84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8081da2:	a801      	add	r0, sp, #4
 8081da4:	f7fe fae6 	bl	8080374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8081da8:	b005      	add	sp, #20
 8081daa:	bd30      	pop	{r4, r5, pc}

08081dac <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8081dac:	6800      	ldr	r0, [r0, #0]
 8081dae:	f000 b8ce 	b.w	8081f4e <_ZN7TwoWire4lockEv>

08081db2 <_ZN9FuelGaugeC1ER7TwoWireb>:
    FuelGauge(Wire, _lock)
#endif /* (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION) */
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8081db2:	b510      	push	{r4, lr}
 8081db4:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8081db6:	6001      	str	r1, [r0, #0]
 8081db8:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8081dba:	b10a      	cbz	r2, 8081dc0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8081dbc:	f7ff fff6 	bl	8081dac <_ZN9FuelGauge4lockEv>
    }
}
 8081dc0:	4620      	mov	r0, r4
 8081dc2:	bd10      	pop	{r4, pc}

08081dc4 <_ZN9FuelGaugeC1Eb>:

#include "spark_wiring_fuel.h"
#include <mutex>
#include "spark_wiring_power.h"

FuelGauge::FuelGauge(bool _lock) :
 8081dc4:	b538      	push	{r3, r4, r5, lr}
 8081dc6:	4604      	mov	r4, r0
 8081dc8:	460d      	mov	r5, r1
#if (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION)
    FuelGauge(Wire3, _lock)
 8081dca:	f000 ffd3 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 8081dce:	462a      	mov	r2, r5
 8081dd0:	4601      	mov	r1, r0
 8081dd2:	4620      	mov	r0, r4
 8081dd4:	f7ff ffed 	bl	8081db2 <_ZN9FuelGaugeC1ER7TwoWireb>
#else
    FuelGauge(Wire, _lock)
#endif /* (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION) */
{
}
 8081dd8:	4620      	mov	r0, r4
 8081dda:	bd38      	pop	{r3, r4, r5, pc}

08081ddc <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8081ddc:	6800      	ldr	r0, [r0, #0]
 8081dde:	f000 b8bf 	b.w	8081f60 <_ZN7TwoWire6unlockEv>

08081de2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8081de2:	b510      	push	{r4, lr}
{
    if (lock_) {
 8081de4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8081de6:	4604      	mov	r4, r0
{
    if (lock_) {
 8081de8:	b10b      	cbz	r3, 8081dee <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8081dea:	f7ff fff7 	bl	8081ddc <_ZN9FuelGauge6unlockEv>
    }
}
 8081dee:	4620      	mov	r0, r4
 8081df0:	bd10      	pop	{r4, pc}

08081df2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8081df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081df4:	4604      	mov	r4, r0
 8081df6:	460f      	mov	r7, r1
 8081df8:	4616      	mov	r6, r2
 8081dfa:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 8081dfc:	f7ff ffd6 	bl	8081dac <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8081e00:	6820      	ldr	r0, [r4, #0]
 8081e02:	2136      	movs	r1, #54	; 0x36
 8081e04:	f000 f898 	bl	8081f38 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8081e08:	6820      	ldr	r0, [r4, #0]
 8081e0a:	4639      	mov	r1, r7
 8081e0c:	6803      	ldr	r3, [r0, #0]
 8081e0e:	689b      	ldr	r3, [r3, #8]
 8081e10:	4798      	blx	r3
    i2c_.endTransmission(true);
 8081e12:	2101      	movs	r1, #1
 8081e14:	6820      	ldr	r0, [r4, #0]
 8081e16:	f000 f892 	bl	8081f3e <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8081e1a:	2202      	movs	r2, #2
 8081e1c:	2136      	movs	r1, #54	; 0x36
 8081e1e:	2301      	movs	r3, #1
 8081e20:	6820      	ldr	r0, [r4, #0]
 8081e22:	f000 f880 	bl	8081f26 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 8081e26:	6820      	ldr	r0, [r4, #0]
 8081e28:	6803      	ldr	r3, [r0, #0]
 8081e2a:	695b      	ldr	r3, [r3, #20]
 8081e2c:	4798      	blx	r3
 8081e2e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8081e30:	6820      	ldr	r0, [r4, #0]
 8081e32:	6803      	ldr	r3, [r0, #0]
 8081e34:	695b      	ldr	r3, [r3, #20]
 8081e36:	4798      	blx	r3
 8081e38:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8081e3a:	4620      	mov	r0, r4
}
 8081e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8081e40:	f7ff bfcc 	b.w	8081ddc <_ZN9FuelGauge6unlockEv>

08081e44 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8081e44:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8081e46:	2200      	movs	r2, #0
	byte LSB = 0;
 8081e48:	ab02      	add	r3, sp, #8
 8081e4a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8081e4e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8081e52:	2104      	movs	r1, #4
 8081e54:	f10d 0206 	add.w	r2, sp, #6
 8081e58:	f7ff ffcb 	bl	8081df2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8081e5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8081e60:	f001 fa90 	bl	8083384 <__aeabi_i2d>
 8081e64:	2200      	movs	r2, #0
 8081e66:	4b08      	ldr	r3, [pc, #32]	; (8081e88 <_ZN9FuelGauge6getSoCEv+0x44>)
 8081e68:	f001 faf2 	bl	8083450 <__aeabi_dmul>
 8081e6c:	f001 fd02 	bl	8083874 <__aeabi_d2f>
 8081e70:	4604      	mov	r4, r0
 8081e72:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8081e76:	f001 fe07 	bl	8083a88 <__aeabi_i2f>
 8081e7a:	4601      	mov	r1, r0
 8081e7c:	4620      	mov	r0, r4
 8081e7e:	f001 fd4f 	bl	8083920 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8081e82:	b002      	add	sp, #8
 8081e84:	bd10      	pop	{r4, pc}
 8081e86:	bf00      	nop
 8081e88:	3f700000 	.word	0x3f700000

08081e8c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8081e8c:	4770      	bx	lr

08081e8e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8081e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081e90:	4606      	mov	r6, r0
 8081e92:	4615      	mov	r5, r2
 8081e94:	460c      	mov	r4, r1
 8081e96:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081e98:	42bc      	cmp	r4, r7
 8081e9a:	d006      	beq.n	8081eaa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8081e9c:	6833      	ldr	r3, [r6, #0]
 8081e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081ea2:	689b      	ldr	r3, [r3, #8]
 8081ea4:	4630      	mov	r0, r6
 8081ea6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081ea8:	e7f6      	b.n	8081e98 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8081eaa:	4628      	mov	r0, r5
 8081eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081eae <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8081eae:	2200      	movs	r2, #0
 8081eb0:	7c00      	ldrb	r0, [r0, #16]
 8081eb2:	f7ff b9e7 	b.w	8081284 <HAL_I2C_Write_Data>

08081eb6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8081eb6:	2100      	movs	r1, #0
 8081eb8:	7c00      	ldrb	r0, [r0, #16]
 8081eba:	f7ff b9eb 	b.w	8081294 <HAL_I2C_Available_Data>

08081ebe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8081ebe:	2100      	movs	r1, #0
 8081ec0:	7c00      	ldrb	r0, [r0, #16]
 8081ec2:	f7ff b9ef 	b.w	80812a4 <HAL_I2C_Read_Data>

08081ec6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8081ec6:	2100      	movs	r1, #0
 8081ec8:	7c00      	ldrb	r0, [r0, #16]
 8081eca:	f7ff b9f3 	b.w	80812b4 <HAL_I2C_Peek_Data>

08081ece <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8081ece:	2100      	movs	r1, #0
 8081ed0:	7c00      	ldrb	r0, [r0, #16]
 8081ed2:	f7ff b9f7 	b.w	80812c4 <HAL_I2C_Flush_Data>

08081ed6 <_ZN7TwoWireD0Ev>:
 8081ed6:	b510      	push	{r4, lr}
 8081ed8:	4604      	mov	r4, r0
 8081eda:	f7fe f8e0 	bl	808009e <_ZdlPv>
 8081ede:	4620      	mov	r0, r4
 8081ee0:	bd10      	pop	{r4, pc}
	...

08081ee4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081ee4:	b510      	push	{r4, lr}
 8081ee6:	4604      	mov	r4, r0
 8081ee8:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081eee:	60a3      	str	r3, [r4, #8]
 8081ef0:	4b04      	ldr	r3, [pc, #16]	; (8081f04 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081ef2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8081ef4:	7420      	strb	r0, [r4, #16]
 8081ef6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081ef8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8081efa:	f7ff f9f3 	bl	80812e4 <HAL_I2C_Init>

}
 8081efe:	4620      	mov	r0, r4
 8081f00:	bd10      	pop	{r4, pc}
 8081f02:	bf00      	nop
 8081f04:	08084e58 	.word	0x08084e58

08081f08 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8081f08:	2300      	movs	r3, #0
 8081f0a:	461a      	mov	r2, r3
 8081f0c:	4619      	mov	r1, r3
 8081f0e:	7c00      	ldrb	r0, [r0, #16]
 8081f10:	f7ff b998 	b.w	8081244 <HAL_I2C_Begin>

08081f14 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8081f14:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8081f16:	2400      	movs	r4, #0
 8081f18:	7c00      	ldrb	r0, [r0, #16]
 8081f1a:	9400      	str	r4, [sp, #0]
 8081f1c:	f7ff f99a 	bl	8081254 <HAL_I2C_Request_Data>
  return result;
}
 8081f20:	b2c0      	uxtb	r0, r0
 8081f22:	b002      	add	sp, #8
 8081f24:	bd10      	pop	{r4, pc}

08081f26 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 8081f26:	b2db      	uxtb	r3, r3
 8081f28:	b2d2      	uxtb	r2, r2
 8081f2a:	b2c9      	uxtb	r1, r1
 8081f2c:	f7ff bff2 	b.w	8081f14 <_ZN7TwoWire11requestFromEhhh>

08081f30 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8081f30:	2200      	movs	r2, #0
 8081f32:	7c00      	ldrb	r0, [r0, #16]
 8081f34:	f7ff b996 	b.w	8081264 <HAL_I2C_Begin_Transmission>

08081f38 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 8081f38:	b2c9      	uxtb	r1, r1
 8081f3a:	f7ff bff9 	b.w	8081f30 <_ZN7TwoWire17beginTransmissionEh>

08081f3e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8081f3e:	2200      	movs	r2, #0
 8081f40:	7c00      	ldrb	r0, [r0, #16]
 8081f42:	f7ff b997 	b.w	8081274 <HAL_I2C_End_Transmission>

08081f46 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8081f46:	2100      	movs	r1, #0
 8081f48:	7c00      	ldrb	r0, [r0, #16]
 8081f4a:	f7ff b9c3 	b.w	80812d4 <HAL_I2C_Is_Enabled>

08081f4e <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8081f4e:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8081f50:	2100      	movs	r1, #0
 8081f52:	7c00      	ldrb	r0, [r0, #16]
 8081f54:	f7ff f9ce 	bl	80812f4 <HAL_I2C_Acquire>
}
 8081f58:	fab0 f080 	clz	r0, r0
 8081f5c:	0940      	lsrs	r0, r0, #5
 8081f5e:	bd08      	pop	{r3, pc}

08081f60 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8081f60:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8081f62:	2100      	movs	r1, #0
 8081f64:	7c00      	ldrb	r0, [r0, #16]
 8081f66:	f7ff f9cd 	bl	8081304 <HAL_I2C_Release>
}
 8081f6a:	fab0 f080 	clz	r0, r0
 8081f6e:	0940      	lsrs	r0, r0, #5
 8081f70:	bd08      	pop	{r3, pc}

08081f72 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8081f72:	4700      	bx	r0

08081f74 <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8081f74:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8081f76:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8081f7a:	4605      	mov	r5, r0
 8081f7c:	460f      	mov	r7, r1
 8081f7e:	4690      	mov	r8, r2
 8081f80:	461e      	mov	r6, r3
 8081f82:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8081f86:	d019      	beq.n	8081fbc <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
 8081f88:	f7ff f954 	bl	8081234 <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8081f8c:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8081f8e:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8081f92:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8081f94:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8081f98:	bfa2      	ittt	ge
 8081f9a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    return &extra;
 8081f9e:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8081fa0:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8081fa4:	4628      	mov	r0, r5
 8081fa6:	9400      	str	r4, [sp, #0]
 8081fa8:	4643      	mov	r3, r8
 8081faa:	463a      	mov	r2, r7
 8081fac:	4905      	ldr	r1, [pc, #20]	; (8081fc4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8081fae:	bfa8      	it	ge
 8081fb0:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8081fb4:	f7ff f936 	bl	8081224 <HAL_Interrupts_Attach>
    return true;
 8081fb8:	2001      	movs	r0, #1
 8081fba:	e000      	b.n	8081fbe <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8081fbc:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
 8081fbe:	b004      	add	sp, #16
 8081fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081fc4:	08081f73 	.word	0x08081f73

08081fc8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081fc8:	4770      	bx	lr

08081fca <_ZN9IPAddressD0Ev>:
 8081fca:	b510      	push	{r4, lr}
 8081fcc:	4604      	mov	r4, r0
 8081fce:	f7fe f866 	bl	808009e <_ZdlPv>
 8081fd2:	4620      	mov	r0, r4
 8081fd4:	bd10      	pop	{r4, pc}

08081fd6 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081fd8:	460f      	mov	r7, r1
 8081fda:	f100 0608 	add.w	r6, r0, #8
 8081fde:	1d05      	adds	r5, r0, #4
 8081fe0:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081fe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8081fe6:	220a      	movs	r2, #10
 8081fe8:	4638      	mov	r0, r7
 8081fea:	f000 fa3b 	bl	8082464 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081fee:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081ff0:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081ff2:	d007      	beq.n	8082004 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8081ff4:	2c00      	cmp	r4, #0
 8081ff6:	d0f4      	beq.n	8081fe2 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8081ff8:	212e      	movs	r1, #46	; 0x2e
 8081ffa:	4638      	mov	r0, r7
 8081ffc:	f000 fa05 	bl	808240a <_ZN5Print5printEc>
 8082000:	4404      	add	r4, r0
 8082002:	e7ee      	b.n	8081fe2 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082004:	4620      	mov	r0, r4
 8082006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082008 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8082008:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808200a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808200e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8082012:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8082016:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808201a:	6041      	str	r1, [r0, #4]
 808201c:	bd10      	pop	{r4, pc}
	...

08082020 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082022:	4d04      	ldr	r5, [pc, #16]	; (8082034 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082024:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082026:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808202a:	9500      	str	r5, [sp, #0]
 808202c:	f7ff ffec 	bl	8082008 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082030:	b003      	add	sp, #12
 8082032:	bd30      	pop	{r4, r5, pc}
 8082034:	08084e80 	.word	0x08084e80

08082038 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082038:	4a01      	ldr	r2, [pc, #4]	; (8082040 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808203a:	4b02      	ldr	r3, [pc, #8]	; (8082044 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808203c:	601a      	str	r2, [r3, #0]
 808203e:	4770      	bx	lr
 8082040:	08084f41 	.word	0x08084f41
 8082044:	2000061c 	.word	0x2000061c

08082048 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 8082048:	b508      	push	{r3, lr}
#if Wiring_Wire3
    Wire3.begin();
 808204a:	f000 fe93 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 808204e:	f7ff ff5b 	bl	8081f08 <_ZN7TwoWire5beginEv>
#endif
    return 1;
}
 8082052:	2001      	movs	r0, #1
 8082054:	bd08      	pop	{r3, pc}

08082056 <_ZN4PMIC4lockEv>:
    Wire3.write(DATA);
    Wire3.endTransmission(true);
#endif
}

bool PMIC::lock() {
 8082056:	b508      	push	{r3, lr}
#if Wiring_Wire3
    return Wire3.lock();
 8082058:	f000 fe8c 	bl	8082d74 <_Z20__fetch_global_Wire3v>
#endif
    return false;
}
 808205c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
}

bool PMIC::lock() {
#if Wiring_Wire3
    return Wire3.lock();
 8082060:	f7ff bf75 	b.w	8081f4e <_ZN7TwoWire4lockEv>

08082064 <_ZN4PMICC1Eb>:


#include "spark_wiring_power.h"
#include <mutex>

PMIC::PMIC(bool _lock) :
 8082064:	b510      	push	{r4, lr}
 8082066:	4604      	mov	r4, r0
    lock_(_lock)
 8082068:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 808206a:	b109      	cbz	r1, 8082070 <_ZN4PMICC1Eb+0xc>
        lock();
 808206c:	f7ff fff3 	bl	8082056 <_ZN4PMIC4lockEv>
    }
}
 8082070:	4620      	mov	r0, r4
 8082072:	bd10      	pop	{r4, pc}

08082074 <_ZN4PMIC6unlockEv>:
    return Wire3.lock();
#endif
    return false;
}

bool PMIC::unlock() {
 8082074:	b508      	push	{r3, lr}
#if Wiring_Wire3
    return Wire3.unlock();
 8082076:	f000 fe7d 	bl	8082d74 <_Z20__fetch_global_Wire3v>
#endif
    return false;
}
 808207a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return false;
}

bool PMIC::unlock() {
#if Wiring_Wire3
    return Wire3.unlock();
 808207e:	f7ff bf6f 	b.w	8081f60 <_ZN7TwoWire6unlockEv>

08082082 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082082:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082084:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082086:	4604      	mov	r4, r0
{
    if (lock_) {
 8082088:	b10b      	cbz	r3, 808208e <_ZN4PMICD1Ev+0xc>
        unlock();
 808208a:	f7ff fff3 	bl	8082074 <_ZN4PMIC6unlockEv>
    }
}
 808208e:	4620      	mov	r0, r4
 8082090:	bd10      	pop	{r4, pc}

08082092 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8082092:	b510      	push	{r4, lr}
 8082094:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8082096:	6800      	ldr	r0, [r0, #0]
 8082098:	f7ff ffec 	bl	8082074 <_ZN4PMIC6unlockEv>
 808209c:	4620      	mov	r0, r4
 808209e:	bd10      	pop	{r4, pc}

080820a0 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80820a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80820a2:	ac02      	add	r4, sp, #8
 80820a4:	460d      	mov	r5, r1
 80820a6:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80820aa:	f7ff ffd4 	bl	8082056 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
#if Wiring_Wire3
    Wire3.beginTransmission(PMIC_ADDRESS);
 80820ae:	f000 fe61 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 80820b2:	216b      	movs	r1, #107	; 0x6b
 80820b4:	f7ff ff40 	bl	8081f38 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(startAddress);
 80820b8:	f000 fe5c 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 80820bc:	6803      	ldr	r3, [r0, #0]
 80820be:	4629      	mov	r1, r5
 80820c0:	689b      	ldr	r3, [r3, #8]
 80820c2:	4798      	blx	r3
    Wire3.endTransmission(true);
 80820c4:	f000 fe56 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 80820c8:	2101      	movs	r1, #1
 80820ca:	f7ff ff38 	bl	8081f3e <_ZN7TwoWire15endTransmissionEh>

    Wire3.requestFrom(PMIC_ADDRESS, 1, true);
 80820ce:	f000 fe51 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 80820d2:	2301      	movs	r3, #1
 80820d4:	461a      	mov	r2, r3
 80820d6:	216b      	movs	r1, #107	; 0x6b
 80820d8:	f7ff ff25 	bl	8081f26 <_ZN7TwoWire11requestFromEiii>
    DATA = Wire3.read();
 80820dc:	f000 fe4a 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 80820e0:	6803      	ldr	r3, [r0, #0]
 80820e2:	695b      	ldr	r3, [r3, #20]
 80820e4:	4798      	blx	r3
 80820e6:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 80820e8:	4620      	mov	r0, r4
 80820ea:	f7ff ffd2 	bl	8082092 <_ZNSt10lock_guardI4PMICED1Ev>

    Wire3.requestFrom(PMIC_ADDRESS, 1, true);
    DATA = Wire3.read();
#endif
    return DATA;
}
 80820ee:	b2e8      	uxtb	r0, r5
 80820f0:	b003      	add	sp, #12
 80820f2:	bd30      	pop	{r4, r5, pc}

080820f4 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 80820f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80820f6:	ac02      	add	r4, sp, #8
 80820f8:	4615      	mov	r5, r2
 80820fa:	460e      	mov	r6, r1
 80820fc:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082100:	f7ff ffa9 	bl	8082056 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
#if Wiring_Wire3
    Wire3.beginTransmission(PMIC_ADDRESS);
 8082104:	f000 fe36 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 8082108:	216b      	movs	r1, #107	; 0x6b
 808210a:	f7ff ff15 	bl	8081f38 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(address);
 808210e:	f000 fe31 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 8082112:	6803      	ldr	r3, [r0, #0]
 8082114:	4631      	mov	r1, r6
 8082116:	689b      	ldr	r3, [r3, #8]
 8082118:	4798      	blx	r3
    Wire3.write(DATA);
 808211a:	f000 fe2b 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 808211e:	6803      	ldr	r3, [r0, #0]
 8082120:	4629      	mov	r1, r5
 8082122:	689b      	ldr	r3, [r3, #8]
 8082124:	4798      	blx	r3
    Wire3.endTransmission(true);
 8082126:	f000 fe25 	bl	8082d74 <_Z20__fetch_global_Wire3v>
 808212a:	2101      	movs	r1, #1
 808212c:	f7ff ff07 	bl	8081f3e <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8082130:	4620      	mov	r0, r4
 8082132:	f7ff ffae 	bl	8082092 <_ZNSt10lock_guardI4PMICED1Ev>
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(address);
    Wire3.write(DATA);
    Wire3.endTransmission(true);
#endif
}
 8082136:	b002      	add	sp, #8
 8082138:	bd70      	pop	{r4, r5, r6, pc}

0808213a <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 808213a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808213c:	4604      	mov	r4, r0
 808213e:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082140:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082142:	f7ff ff88 	bl	8082056 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8082146:	2100      	movs	r1, #0
 8082148:	4620      	mov	r0, r4
 808214a:	f7ff ffa9 	bl	80820a0 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 808214e:	f241 1358 	movw	r3, #4440	; 0x1158
 8082152:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 8082154:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 8082158:	d05b      	beq.n	8082212 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 808215a:	d820      	bhi.n	808219e <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 808215c:	f241 0318 	movw	r3, #4120	; 0x1018
 8082160:	429d      	cmp	r5, r3
 8082162:	d04d      	beq.n	8082200 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 8082164:	d80c      	bhi.n	8082180 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 8082166:	f640 7378 	movw	r3, #3960	; 0xf78
 808216a:	429d      	cmp	r5, r3
 808216c:	d042      	beq.n	80821f4 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 808216e:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8082172:	429d      	cmp	r5, r3
 8082174:	d041      	beq.n	80821fa <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8082176:	f640 7328 	movw	r3, #3880	; 0xf28
 808217a:	429d      	cmp	r5, r3
 808217c:	d160      	bne.n	8082240 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 808217e:	e059      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 8082180:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8082184:	429d      	cmp	r5, r3
 8082186:	d03e      	beq.n	8082206 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 8082188:	f241 1308 	movw	r3, #4360	; 0x1108
 808218c:	429d      	cmp	r5, r3
 808218e:	d03d      	beq.n	808220c <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 8082190:	f241 0368 	movw	r3, #4200	; 0x1068
 8082194:	429d      	cmp	r5, r3
 8082196:	d153      	bne.n	8082240 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 8082198:	f042 0220 	orr.w	r2, r2, #32
 808219c:	e04a      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 808219e:	f241 2398 	movw	r3, #4760	; 0x1298
 80821a2:	429d      	cmp	r5, r3
 80821a4:	d03e      	beq.n	8082224 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 80821a6:	d80e      	bhi.n	80821c6 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 80821a8:	f241 13f8 	movw	r3, #4600	; 0x11f8
 80821ac:	429d      	cmp	r5, r3
 80821ae:	d033      	beq.n	8082218 <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 80821b0:	f241 2348 	movw	r3, #4680	; 0x1248
 80821b4:	429d      	cmp	r5, r3
 80821b6:	d032      	beq.n	808221e <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 80821b8:	f241 13a8 	movw	r3, #4520	; 0x11a8
 80821bc:	429d      	cmp	r5, r3
 80821be:	d13f      	bne.n	8082240 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 80821c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80821c4:	e036      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 80821c6:	f241 3338 	movw	r3, #4920	; 0x1338
 80821ca:	429d      	cmp	r5, r3
 80821cc:	d02d      	beq.n	808222a <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 80821ce:	d806      	bhi.n	80821de <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 80821d0:	f241 23e8 	movw	r3, #4840	; 0x12e8
 80821d4:	429d      	cmp	r5, r3
 80821d6:	d133      	bne.n	8082240 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 80821d8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80821dc:	e02a      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 80821de:	f241 3388 	movw	r3, #5000	; 0x1388
 80821e2:	429d      	cmp	r5, r3
 80821e4:	d024      	beq.n	8082230 <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 80821e6:	f241 33d8 	movw	r3, #5080	; 0x13d8
 80821ea:	429d      	cmp	r5, r3
 80821ec:	d128      	bne.n	8082240 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 80821ee:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 80821f2:	e01f      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 80821f4:	f042 0208 	orr.w	r2, r2, #8
 80821f8:	e01c      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 80821fa:	f042 0210 	orr.w	r2, r2, #16
 80821fe:	e019      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 8082200:	f042 0218 	orr.w	r2, r2, #24
 8082204:	e016      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 8082206:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 808220a:	e013      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 808220c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8082210:	e010      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 8082212:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8082216:	e00d      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 8082218:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 808221c:	e00a      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 808221e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8082222:	e007      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 8082224:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8082228:	e004      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 808222a:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 808222e:	e001      	b.n	8082234 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 8082230:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8082234:	4620      	mov	r0, r4
 8082236:	2100      	movs	r1, #0
 8082238:	f7ff ff5c 	bl	80820f4 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808223c:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 808223e:	e000      	b.n	8082242 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8082240:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082242:	a801      	add	r0, sp, #4
 8082244:	f7ff ff25 	bl	8082092 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082248:	4620      	mov	r0, r4
 808224a:	b003      	add	sp, #12
 808224c:	bd30      	pop	{r4, r5, pc}

0808224e <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808224e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082250:	4604      	mov	r4, r0
 8082252:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082254:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082256:	f7ff fefe 	bl	8082056 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 808225a:	2100      	movs	r1, #0
 808225c:	4620      	mov	r0, r4
 808225e:	f7ff ff1f 	bl	80820a0 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 8082262:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 8082266:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 808226a:	d023      	beq.n	80822b4 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808226c:	d807      	bhi.n	808227e <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 808226e:	2d96      	cmp	r5, #150	; 0x96
 8082270:	d01a      	beq.n	80822a8 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8082272:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8082276:	d01a      	beq.n	80822ae <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 8082278:	2d64      	cmp	r5, #100	; 0x64
 808227a:	d129      	bne.n	80822d0 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808227c:	e022      	b.n	80822c4 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 808227e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8082282:	429d      	cmp	r5, r3
 8082284:	d019      	beq.n	80822ba <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 8082286:	d805      	bhi.n	8082294 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 8082288:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 808228c:	d120      	bne.n	80822d0 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 808228e:	f042 0204 	orr.w	r2, r2, #4
 8082292:	e017      	b.n	80822c4 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8082294:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8082298:	d012      	beq.n	80822c0 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 808229a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 808229e:	429d      	cmp	r5, r3
 80822a0:	d116      	bne.n	80822d0 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 80822a2:	f042 0207 	orr.w	r2, r2, #7
 80822a6:	e00d      	b.n	80822c4 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 80822a8:	f042 0201 	orr.w	r2, r2, #1
 80822ac:	e00a      	b.n	80822c4 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 80822ae:	f042 0202 	orr.w	r2, r2, #2
 80822b2:	e007      	b.n	80822c4 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 80822b4:	f042 0203 	orr.w	r2, r2, #3
 80822b8:	e004      	b.n	80822c4 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 80822ba:	f042 0205 	orr.w	r2, r2, #5
 80822be:	e001      	b.n	80822c4 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 80822c0:	f042 0206 	orr.w	r2, r2, #6
 80822c4:	4620      	mov	r0, r4
 80822c6:	2100      	movs	r1, #0
 80822c8:	f7ff ff14 	bl	80820f4 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80822cc:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 80822ce:	e000      	b.n	80822d2 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 80822d0:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 80822d2:	a801      	add	r0, sp, #4
 80822d4:	f7ff fedd 	bl	8082092 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 80822d8:	4620      	mov	r0, r4
 80822da:	b003      	add	sp, #12
 80822dc:	bd30      	pop	{r4, r5, pc}

080822de <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 80822de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80822e0:	460c      	mov	r4, r1
 80822e2:	4617      	mov	r7, r2
 80822e4:	4605      	mov	r5, r0
 80822e6:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80822e8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80822ea:	f7ff feb4 	bl	8082056 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 80822ee:	2c00      	cmp	r4, #0
 80822f0:	bf0c      	ite	eq
 80822f2:	2400      	moveq	r4, #0
 80822f4:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 80822f6:	b117      	cbz	r7, 80822fe <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 80822f8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80822fc:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 80822fe:	b10e      	cbz	r6, 8082304 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8082300:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8082304:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8082308:	b10b      	cbz	r3, 808230e <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 808230a:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808230e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8082312:	b10b      	cbz	r3, 8082318 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8082314:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8082318:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 808231c:	b10b      	cbz	r3, 8082322 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 808231e:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8082322:	2102      	movs	r1, #2
 8082324:	4628      	mov	r0, r5
 8082326:	f7ff febb 	bl	80820a0 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 808232a:	f000 0201 	and.w	r2, r0, #1
 808232e:	4322      	orrs	r2, r4
 8082330:	2102      	movs	r1, #2
 8082332:	4628      	mov	r0, r5
 8082334:	f7ff fede 	bl	80820f4 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8082338:	a801      	add	r0, sp, #4
 808233a:	f7ff feaa 	bl	8082092 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 808233e:	2001      	movs	r0, #1
 8082340:	b003      	add	sp, #12
 8082342:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082344 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8082344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082346:	4604      	mov	r4, r0
 8082348:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808234a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808234c:	f7ff fe83 	bl	8082056 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8082350:	2104      	movs	r1, #4
 8082352:	4620      	mov	r0, r4
 8082354:	f7ff fea4 	bl	80820a0 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8082358:	f241 0310 	movw	r3, #4112	; 0x1010
 808235c:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 808235e:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8082362:	d006      	beq.n	8082372 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8082364:	f241 0370 	movw	r3, #4208	; 0x1070
 8082368:	429d      	cmp	r5, r3
 808236a:	d10a      	bne.n	8082382 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808236c:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8082370:	e001      	b.n	8082376 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8082372:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8082376:	4620      	mov	r0, r4
 8082378:	2104      	movs	r1, #4
 808237a:	f7ff febb 	bl	80820f4 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808237e:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8082380:	e000      	b.n	8082384 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8082382:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082384:	a801      	add	r0, sp, #4
 8082386:	f7ff fe84 	bl	8082092 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808238a:	4620      	mov	r0, r4
 808238c:	b003      	add	sp, #12
 808238e:	bd30      	pop	{r4, r5, pc}

08082390 <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
 8082390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082392:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082394:	ac02      	add	r4, sp, #8
 8082396:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808239a:	f7ff fe5c 	bl	8082056 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
 808239e:	2105      	movs	r1, #5
 80823a0:	4628      	mov	r0, r5
 80823a2:	f7ff fe7d 	bl	80820a0 <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
 80823a6:	2105      	movs	r1, #5
 80823a8:	f000 02ce 	and.w	r2, r0, #206	; 0xce
 80823ac:	4628      	mov	r0, r5
 80823ae:	f7ff fea1 	bl	80820f4 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
 80823b2:	4620      	mov	r0, r4
 80823b4:	f7ff fe6d 	bl	8082092 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
 80823b8:	2001      	movs	r0, #1
 80823ba:	b003      	add	sp, #12
 80823bc:	bd30      	pop	{r4, r5, pc}

080823be <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80823be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80823c0:	4606      	mov	r6, r0
 80823c2:	460d      	mov	r5, r1
 80823c4:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80823c6:	2400      	movs	r4, #0
  while (size--) {
 80823c8:	42bd      	cmp	r5, r7
 80823ca:	d00c      	beq.n	80823e6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80823cc:	6833      	ldr	r3, [r6, #0]
 80823ce:	f815 1b01 	ldrb.w	r1, [r5], #1
 80823d2:	689b      	ldr	r3, [r3, #8]
 80823d4:	4630      	mov	r0, r6
 80823d6:	4798      	blx	r3
     if (chunk>=0)
 80823d8:	2800      	cmp	r0, #0
 80823da:	db01      	blt.n	80823e0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80823dc:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80823de:	e7f3      	b.n	80823c8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80823e0:	2c00      	cmp	r4, #0
 80823e2:	bf08      	it	eq
 80823e4:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80823e6:	4620      	mov	r0, r4
 80823e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080823ea <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80823ea:	b570      	push	{r4, r5, r6, lr}
 80823ec:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80823ee:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80823f0:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80823f2:	b149      	cbz	r1, 8082408 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80823f4:	f001 ff37 	bl	8084266 <strlen>
 80823f8:	682b      	ldr	r3, [r5, #0]
 80823fa:	4602      	mov	r2, r0
 80823fc:	4621      	mov	r1, r4
 80823fe:	4628      	mov	r0, r5
    }
 8082400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082404:	68db      	ldr	r3, [r3, #12]
 8082406:	4718      	bx	r3
    }
 8082408:	bd70      	pop	{r4, r5, r6, pc}

0808240a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808240a:	6803      	ldr	r3, [r0, #0]
 808240c:	689b      	ldr	r3, [r3, #8]
 808240e:	4718      	bx	r3

08082410 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082410:	2a01      	cmp	r2, #1
 8082412:	bf98      	it	ls
 8082414:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082416:	b530      	push	{r4, r5, lr}
 8082418:	460b      	mov	r3, r1
 808241a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808241c:	2100      	movs	r1, #0
 808241e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8082422:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082426:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808242a:	fb05 3312 	mls	r3, r5, r2, r3
 808242e:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082430:	2b09      	cmp	r3, #9
 8082432:	bf94      	ite	ls
 8082434:	3330      	addls	r3, #48	; 0x30
 8082436:	3337      	addhi	r3, #55	; 0x37
 8082438:	b2db      	uxtb	r3, r3
 808243a:	4621      	mov	r1, r4
 808243c:	f804 3901 	strb.w	r3, [r4], #-1
 8082440:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8082442:	2d00      	cmp	r5, #0
 8082444:	d1ef      	bne.n	8082426 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082446:	f7ff ffd0 	bl	80823ea <_ZN5Print5writeEPKc>
}
 808244a:	b00b      	add	sp, #44	; 0x2c
 808244c:	bd30      	pop	{r4, r5, pc}

0808244e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 808244e:	b410      	push	{r4}
  if (base == 0) return write(n);
 8082450:	b922      	cbnz	r2, 808245c <_ZN5Print5printEmi+0xe>
 8082452:	6803      	ldr	r3, [r0, #0]
 8082454:	b2c9      	uxtb	r1, r1
 8082456:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8082458:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808245a:	4718      	bx	r3
  else return printNumber(n, base);
 808245c:	b2d2      	uxtb	r2, r2
}
 808245e:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8082460:	f7ff bfd6 	b.w	8082410 <_ZN5Print11printNumberEmh>

08082464 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8082464:	f7ff bff3 	b.w	808244e <_ZN5Print5printEmi>

08082468 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8082468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808246c:	4607      	mov	r7, r0
 808246e:	460e      	mov	r6, r1
  if (base == 0) {
 8082470:	4615      	mov	r5, r2
 8082472:	b92a      	cbnz	r2, 8082480 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8082474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8082478:	6803      	ldr	r3, [r0, #0]
 808247a:	b2c9      	uxtb	r1, r1
 808247c:	689b      	ldr	r3, [r3, #8]
 808247e:	4718      	bx	r3
  } else if (base == 10) {
 8082480:	2a0a      	cmp	r2, #10
 8082482:	d102      	bne.n	808248a <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8082484:	2900      	cmp	r1, #0
 8082486:	da01      	bge.n	808248c <_ZN5Print5printEli+0x24>
 8082488:	e004      	b.n	8082494 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808248a:	b2d2      	uxtb	r2, r2
  }
}
 808248c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8082490:	f7ff bfbe 	b.w	8082410 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8082494:	212d      	movs	r1, #45	; 0x2d
 8082496:	f7ff ffb8 	bl	808240a <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 808249a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808249c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 808249e:	4271      	negs	r1, r6
 80824a0:	4638      	mov	r0, r7
 80824a2:	f7ff ffb5 	bl	8082410 <_ZN5Print11printNumberEmh>
 80824a6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80824a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080824ac <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80824ac:	f7ff bfdc 	b.w	8082468 <_ZN5Print5printEli>

080824b0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80824b0:	b510      	push	{r4, lr}
 80824b2:	4604      	mov	r4, r0
 80824b4:	f7ff f9b8 	bl	8081828 <_ZNSt14_Function_baseD1Ev>
 80824b8:	4620      	mov	r0, r4
 80824ba:	bd10      	pop	{r4, pc}

080824bc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80824bc:	4803      	ldr	r0, [pc, #12]	; (80824cc <_GLOBAL__sub_I_RGB+0x10>)
 80824be:	2300      	movs	r3, #0
 80824c0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80824c2:	4a03      	ldr	r2, [pc, #12]	; (80824d0 <_GLOBAL__sub_I_RGB+0x14>)
 80824c4:	4903      	ldr	r1, [pc, #12]	; (80824d4 <_GLOBAL__sub_I_RGB+0x18>)
 80824c6:	f000 bcbb 	b.w	8082e40 <__aeabi_atexit>
 80824ca:	bf00      	nop
 80824cc:	20000620 	.word	0x20000620
 80824d0:	200004f0 	.word	0x200004f0
 80824d4:	080824b1 	.word	0x080824b1

080824d8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80824d8:	4770      	bx	lr

080824da <_ZN8SPIClassD0Ev>:
 80824da:	b510      	push	{r4, lr}
 80824dc:	4604      	mov	r4, r0
 80824de:	f7fd fdde 	bl	808009e <_ZdlPv>
 80824e2:	4620      	mov	r0, r4
 80824e4:	bd10      	pop	{r4, pc}
	...

080824e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80824e8:	b570      	push	{r4, r5, r6, lr}
 80824ea:	4604      	mov	r4, r0
 80824ec:	460e      	mov	r6, r1
 80824ee:	4b07      	ldr	r3, [pc, #28]	; (808250c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80824f0:	2500      	movs	r5, #0
 80824f2:	6003      	str	r3, [r0, #0]
 80824f4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80824f8:	f7fe fe04 	bl	8081104 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80824fc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80824fe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8082500:	f7fe ff08 	bl	8081314 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8082504:	60a5      	str	r5, [r4, #8]
}
 8082506:	4620      	mov	r0, r4
 8082508:	bd70      	pop	{r4, r5, r6, pc}
 808250a:	bf00      	nop
 808250c:	08084f74 	.word	0x08084f74

08082510 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8082510:	7900      	ldrb	r0, [r0, #4]
 8082512:	f7fe bf07 	b.w	8081324 <HAL_SPI_Is_Enabled>

08082516 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082516:	b510      	push	{r4, lr}
 8082518:	4604      	mov	r4, r0
{
	free(buffer);
 808251a:	6800      	ldr	r0, [r0, #0]
 808251c:	f7ff f846 	bl	80815ac <free>
}
 8082520:	4620      	mov	r0, r4
 8082522:	bd10      	pop	{r4, pc}

08082524 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082524:	b510      	push	{r4, lr}
 8082526:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082528:	6800      	ldr	r0, [r0, #0]
 808252a:	b108      	cbz	r0, 8082530 <_ZN6String10invalidateEv+0xc>
 808252c:	f7ff f83e 	bl	80815ac <free>
	buffer = NULL;
 8082530:	2300      	movs	r3, #0
 8082532:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8082534:	60a3      	str	r3, [r4, #8]
 8082536:	6063      	str	r3, [r4, #4]
 8082538:	bd10      	pop	{r4, pc}

0808253a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808253a:	b538      	push	{r3, r4, r5, lr}
 808253c:	4604      	mov	r4, r0
 808253e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082540:	6800      	ldr	r0, [r0, #0]
 8082542:	3101      	adds	r1, #1
 8082544:	f7ff f83a 	bl	80815bc <realloc>
	if (newbuffer) {
 8082548:	b110      	cbz	r0, 8082550 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808254a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808254e:	2001      	movs	r0, #1
	}
	return 0;
}
 8082550:	bd38      	pop	{r3, r4, r5, pc}

08082552 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082552:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082554:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082556:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082558:	b113      	cbz	r3, 8082560 <_ZN6String7reserveEj+0xe>
 808255a:	6843      	ldr	r3, [r0, #4]
 808255c:	428b      	cmp	r3, r1
 808255e:	d207      	bcs.n	8082570 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8082560:	4620      	mov	r0, r4
 8082562:	f7ff ffea 	bl	808253a <_ZN6String12changeBufferEj>
 8082566:	b120      	cbz	r0, 8082572 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082568:	68a3      	ldr	r3, [r4, #8]
 808256a:	b90b      	cbnz	r3, 8082570 <_ZN6String7reserveEj+0x1e>
 808256c:	6822      	ldr	r2, [r4, #0]
 808256e:	7013      	strb	r3, [r2, #0]
 8082570:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082572:	bd10      	pop	{r4, pc}

08082574 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082574:	b570      	push	{r4, r5, r6, lr}
 8082576:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082578:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808257a:	4604      	mov	r4, r0
 808257c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808257e:	f7ff ffe8 	bl	8082552 <_ZN6String7reserveEj>
 8082582:	b918      	cbnz	r0, 808258c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082584:	4620      	mov	r0, r4
 8082586:	f7ff ffcd 	bl	8082524 <_ZN6String10invalidateEv>
		return *this;
 808258a:	e009      	b.n	80825a0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808258c:	462a      	mov	r2, r5
 808258e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8082590:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082592:	6820      	ldr	r0, [r4, #0]
 8082594:	f001 fdfe 	bl	8084194 <memcpy>
	buffer[len] = 0;
 8082598:	6822      	ldr	r2, [r4, #0]
 808259a:	68a3      	ldr	r3, [r4, #8]
 808259c:	2100      	movs	r1, #0
 808259e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80825a0:	4620      	mov	r0, r4
 80825a2:	bd70      	pop	{r4, r5, r6, pc}

080825a4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80825a4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80825a6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80825a8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80825aa:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80825ac:	6043      	str	r3, [r0, #4]
	len = 0;
 80825ae:	6083      	str	r3, [r0, #8]
	flags = 0;
 80825b0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80825b2:	460d      	mov	r5, r1
 80825b4:	b139      	cbz	r1, 80825c6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80825b6:	4608      	mov	r0, r1
 80825b8:	f001 fe55 	bl	8084266 <strlen>
 80825bc:	4629      	mov	r1, r5
 80825be:	4602      	mov	r2, r0
 80825c0:	4620      	mov	r0, r4
 80825c2:	f7ff ffd7 	bl	8082574 <_ZN6String4copyEPKcj>
}
 80825c6:	4620      	mov	r0, r4
 80825c8:	bd38      	pop	{r3, r4, r5, pc}

080825ca <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80825ca:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80825cc:	b510      	push	{r4, lr}
 80825ce:	460b      	mov	r3, r1
 80825d0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80825d2:	d007      	beq.n	80825e4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80825d4:	6809      	ldr	r1, [r1, #0]
 80825d6:	b119      	cbz	r1, 80825e0 <_ZN6StringaSERKS_+0x16>
 80825d8:	689a      	ldr	r2, [r3, #8]
 80825da:	f7ff ffcb 	bl	8082574 <_ZN6String4copyEPKcj>
 80825de:	e001      	b.n	80825e4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80825e0:	f7ff ffa0 	bl	8082524 <_ZN6String10invalidateEv>

	return *this;
}
 80825e4:	4620      	mov	r0, r4
 80825e6:	bd10      	pop	{r4, pc}

080825e8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80825e8:	b510      	push	{r4, lr}
 80825ea:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80825ec:	2300      	movs	r3, #0
 80825ee:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80825f0:	6043      	str	r3, [r0, #4]
	len = 0;
 80825f2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80825f4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80825f6:	f7ff ffe8 	bl	80825ca <_ZN6StringaSERKS_>
}
 80825fa:	4620      	mov	r0, r4
 80825fc:	bd10      	pop	{r4, pc}

080825fe <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80825fe:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082600:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082602:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082604:	b912      	cbnz	r2, 808260c <_ZNK6String6equalsEPKc+0xe>
 8082606:	b919      	cbnz	r1, 8082610 <_ZNK6String6equalsEPKc+0x12>
 8082608:	2001      	movs	r0, #1
 808260a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808260c:	b911      	cbnz	r1, 8082614 <_ZNK6String6equalsEPKc+0x16>
 808260e:	6803      	ldr	r3, [r0, #0]
 8082610:	7818      	ldrb	r0, [r3, #0]
 8082612:	e002      	b.n	808261a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8082614:	6800      	ldr	r0, [r0, #0]
 8082616:	f001 fdf9 	bl	808420c <strcmp>
 808261a:	fab0 f080 	clz	r0, r0
 808261e:	0940      	lsrs	r0, r0, #5
}
 8082620:	bd08      	pop	{r3, pc}

08082622 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082622:	b570      	push	{r4, r5, r6, lr}
 8082624:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082626:	b19a      	cbz	r2, 8082650 <_ZNK6String8getBytesEPhjj+0x2e>
 8082628:	b191      	cbz	r1, 8082650 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 808262a:	6885      	ldr	r5, [r0, #8]
 808262c:	429d      	cmp	r5, r3
 808262e:	d802      	bhi.n	8082636 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082630:	2300      	movs	r3, #0
 8082632:	700b      	strb	r3, [r1, #0]
		return;
 8082634:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8082636:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8082638:	1aed      	subs	r5, r5, r3
 808263a:	42ac      	cmp	r4, r5
 808263c:	bf28      	it	cs
 808263e:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8082640:	6801      	ldr	r1, [r0, #0]
 8082642:	4622      	mov	r2, r4
 8082644:	4419      	add	r1, r3
 8082646:	4630      	mov	r0, r6
 8082648:	f001 fe2a 	bl	80842a0 <strncpy>
	buf[n] = 0;
 808264c:	2300      	movs	r3, #0
 808264e:	5533      	strb	r3, [r6, r4]
 8082650:	bd70      	pop	{r4, r5, r6, pc}

08082652 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8082652:	4601      	mov	r1, r0
 8082654:	2200      	movs	r2, #0
 8082656:	208c      	movs	r0, #140	; 0x8c
 8082658:	f7fe bd64 	b.w	8081124 <HAL_Core_System_Reset_Ex>

0808265c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 808265c:	2000      	movs	r0, #0
 808265e:	f7ff bff8 	b.w	8082652 <_ZN11SystemClass5resetEm>
	...

08082664 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082664:	b510      	push	{r4, lr}
 8082666:	4604      	mov	r4, r0
 8082668:	4608      	mov	r0, r1
 808266a:	4611      	mov	r1, r2
 808266c:	461a      	mov	r2, r3
    system_sleep(sleepMode, seconds, flags.value(), NULL);
 808266e:	2300      	movs	r3, #0
 8082670:	f7fe fee8 	bl	8081444 <system_sleep>
    System.sleepResult_ = SleepResult();
 8082674:	4b07      	ldr	r3, [pc, #28]	; (8082694 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x30>)
 8082676:	2200      	movs	r2, #0
 8082678:	701a      	strb	r2, [r3, #0]
 808267a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808267e:	805a      	strh	r2, [r3, #2]
 8082680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082684:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8082686:	681a      	ldr	r2, [r3, #0]
 8082688:	889b      	ldrh	r3, [r3, #4]
 808268a:	6022      	str	r2, [r4, #0]
 808268c:	80a3      	strh	r3, [r4, #4]
}
 808268e:	4620      	mov	r0, r4
 8082690:	bd10      	pop	{r4, pc}
 8082692:	bf00      	nop
 8082694:	20000630 	.word	0x20000630

08082698 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082698:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 808269c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808269e:	4c0d      	ldr	r4, [pc, #52]	; (80826d4 <_GLOBAL__sub_I_System+0x3c>)
 80826a0:	2500      	movs	r5, #0
 80826a2:	8063      	strh	r3, [r4, #2]
 80826a4:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80826a8:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80826aa:	80a3      	strh	r3, [r4, #4]
 80826ac:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80826ae:	f7fe feb9 	bl	8081424 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80826b2:	a802      	add	r0, sp, #8
 80826b4:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80826b8:	462a      	mov	r2, r5
 80826ba:	4629      	mov	r1, r5
 80826bc:	f7fe fd3a 	bl	8081134 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80826c0:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80826c2:	2b1e      	cmp	r3, #30
 80826c4:	d104      	bne.n	80826d0 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80826c6:	2303      	movs	r3, #3
 80826c8:	7023      	strb	r3, [r4, #0]
 80826ca:	2311      	movs	r3, #17
 80826cc:	8065      	strh	r5, [r4, #2]
 80826ce:	80a3      	strh	r3, [r4, #4]
 80826d0:	b003      	add	sp, #12
 80826d2:	bd30      	pop	{r4, r5, pc}
 80826d4:	20000630 	.word	0x20000630

080826d8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80826d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80826da:	4b14      	ldr	r3, [pc, #80]	; (808272c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80826dc:	4f14      	ldr	r7, [pc, #80]	; (8082730 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80826de:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80826e0:	4b14      	ldr	r3, [pc, #80]	; (8082734 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80826e2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80826e4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80826e6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80826e8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80826ea:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80826ec:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80826ee:	d01b      	beq.n	8082728 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80826f0:	a80a      	add	r0, sp, #40	; 0x28
 80826f2:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80826f6:	f001 fc55 	bl	8083fa4 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80826fa:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80826fc:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80826fe:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082700:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8082704:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8082706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808270a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808270c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808270e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082712:	4c09      	ldr	r4, [pc, #36]	; (8082738 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082714:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082718:	ad01      	add	r5, sp, #4
 808271a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808271c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808271e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082722:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082724:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8082728:	b00b      	add	sp, #44	; 0x2c
 808272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808272c:	20000668 	.word	0x20000668
 8082730:	20000664 	.word	0x20000664
 8082734:	20000660 	.word	0x20000660
 8082738:	20000638 	.word	0x20000638

0808273c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 808273c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808273e:	2000      	movs	r0, #0
 8082740:	f7fe ff04 	bl	808154c <spark_sync_time_pending>
 8082744:	b128      	cbz	r0, 8082752 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082746:	f7fe fee1 	bl	808150c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808274a:	f080 0001 	eor.w	r0, r0, #1
 808274e:	b2c0      	uxtb	r0, r0
 8082750:	bd08      	pop	{r3, pc}
 8082752:	2001      	movs	r0, #1
    }
 8082754:	bd08      	pop	{r3, pc}
	...

08082758 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082758:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808275a:	4909      	ldr	r1, [pc, #36]	; (8082780 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808275c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808275e:	f001 fb85 	bl	8083e6c <__aeabi_fcmplt>
 8082762:	b960      	cbnz	r0, 808277e <_ZN9TimeClass4zoneEf+0x26>
 8082764:	4907      	ldr	r1, [pc, #28]	; (8082784 <_ZN9TimeClass4zoneEf+0x2c>)
 8082766:	4620      	mov	r0, r4
 8082768:	f001 fb9e 	bl	8083ea8 <__aeabi_fcmpgt>
 808276c:	b938      	cbnz	r0, 808277e <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808276e:	4906      	ldr	r1, [pc, #24]	; (8082788 <_ZN9TimeClass4zoneEf+0x30>)
 8082770:	4620      	mov	r0, r4
 8082772:	f001 f9dd 	bl	8083b30 <__aeabi_fmul>
 8082776:	f001 fba1 	bl	8083ebc <__aeabi_f2iz>
 808277a:	4b04      	ldr	r3, [pc, #16]	; (808278c <_ZN9TimeClass4zoneEf+0x34>)
 808277c:	6018      	str	r0, [r3, #0]
 808277e:	bd10      	pop	{r4, pc}
 8082780:	c1400000 	.word	0xc1400000
 8082784:	41600000 	.word	0x41600000
 8082788:	45610000 	.word	0x45610000
 808278c:	20000668 	.word	0x20000668

08082790 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082790:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8082792:	4b0e      	ldr	r3, [pc, #56]	; (80827cc <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082794:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8082796:	681b      	ldr	r3, [r3, #0]
 8082798:	a802      	add	r0, sp, #8
 808279a:	4419      	add	r1, r3
 808279c:	4b0c      	ldr	r3, [pc, #48]	; (80827d0 <_ZN9TimeClass7timeStrEl+0x40>)
 808279e:	681b      	ldr	r3, [r3, #0]
 80827a0:	4419      	add	r1, r3
 80827a2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80827a6:	f001 fbfd 	bl	8083fa4 <localtime>
        char* ascstr = asctime(calendar_time);
 80827aa:	f001 fbad 	bl	8083f08 <asctime>
 80827ae:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80827b0:	f001 fd59 	bl	8084266 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80827b4:	2300      	movs	r3, #0
 80827b6:	4428      	add	r0, r5
 80827b8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80827bc:	4629      	mov	r1, r5
 80827be:	4620      	mov	r0, r4
 80827c0:	f7ff fef0 	bl	80825a4 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80827c4:	4620      	mov	r0, r4
 80827c6:	b003      	add	sp, #12
 80827c8:	bd30      	pop	{r4, r5, pc}
 80827ca:	bf00      	nop
 80827cc:	20000668 	.word	0x20000668
 80827d0:	20000660 	.word	0x20000660

080827d4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80827d4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80827d6:	2000      	movs	r0, #0
 80827d8:	f7fe fcec 	bl	80811b4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80827dc:	4604      	mov	r4, r0
 80827de:	b968      	cbnz	r0, 80827fc <_ZN9TimeClass7isValidEv+0x28>
        }
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80827e0:	f7fe fe18 	bl	8081414 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80827e4:	2801      	cmp	r0, #1
 80827e6:	d10b      	bne.n	8082800 <_ZN9TimeClass7isValidEv+0x2c>
 80827e8:	4620      	mov	r0, r4
 80827ea:	f7fe fe4b 	bl	8081484 <system_thread_get_state>
 80827ee:	b938      	cbnz	r0, 8082800 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80827f0:	f7ff ffa4 	bl	808273c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80827f4:	b930      	cbnz	r0, 8082804 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80827f6:	f7fe fe71 	bl	80814dc <spark_process>
 80827fa:	e7f9      	b.n	80827f0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80827fc:	2001      	movs	r0, #1
 80827fe:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8082800:	2000      	movs	r0, #0
 8082802:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8082804:	f7ff ff9a 	bl	808273c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8082808:	2000      	movs	r0, #0
 808280a:	f7fe fcd3 	bl	80811b4 <HAL_RTC_Time_Is_Valid>
 808280e:	3000      	adds	r0, #0
 8082810:	bf18      	it	ne
 8082812:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8082814:	bd10      	pop	{r4, pc}

08082816 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8082816:	b508      	push	{r3, lr}
    (void)isValid();
 8082818:	f7ff ffdc 	bl	80827d4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808281c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082820:	f7fe bca0 	b.w	8081164 <HAL_RTC_Get_UnixTime>

08082824 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8082824:	b508      	push	{r3, lr}
	return hour(now());
 8082826:	f7ff fff6 	bl	8082816 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808282a:	f7ff ff55 	bl	80826d8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808282e:	4b01      	ldr	r3, [pc, #4]	; (8082834 <_ZN9TimeClass4hourEv+0x10>)
 8082830:	6898      	ldr	r0, [r3, #8]
 8082832:	bd08      	pop	{r3, pc}
 8082834:	20000638 	.word	0x20000638

08082838 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8082838:	b508      	push	{r3, lr}
	return minute(now());
 808283a:	f7ff ffec 	bl	8082816 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808283e:	f7ff ff4b 	bl	80826d8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8082842:	4b01      	ldr	r3, [pc, #4]	; (8082848 <_ZN9TimeClass6minuteEv+0x10>)
 8082844:	6858      	ldr	r0, [r3, #4]
 8082846:	bd08      	pop	{r3, pc}
 8082848:	20000638 	.word	0x20000638

0808284c <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 808284c:	b508      	push	{r3, lr}
	return day(now());
 808284e:	f7ff ffe2 	bl	8082816 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082852:	f7ff ff41 	bl	80826d8 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8082856:	4b01      	ldr	r3, [pc, #4]	; (808285c <_ZN9TimeClass3dayEv+0x10>)
 8082858:	68d8      	ldr	r0, [r3, #12]
 808285a:	bd08      	pop	{r3, pc}
 808285c:	20000638 	.word	0x20000638

08082860 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082860:	4b02      	ldr	r3, [pc, #8]	; (808286c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082862:	681a      	ldr	r2, [r3, #0]
 8082864:	4b02      	ldr	r3, [pc, #8]	; (8082870 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082866:	601a      	str	r2, [r3, #0]
 8082868:	4770      	bx	lr
 808286a:	bf00      	nop
 808286c:	20000438 	.word	0x20000438
 8082870:	2000065c 	.word	0x2000065c

08082874 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082874:	4770      	bx	lr

08082876 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082876:	7441      	strb	r1, [r0, #17]
 8082878:	4770      	bx	lr

0808287a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 808287a:	7c00      	ldrb	r0, [r0, #16]
 808287c:	f7fe bd92 	b.w	80813a4 <HAL_USART_Available_Data_For_Write>

08082880 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8082880:	7c00      	ldrb	r0, [r0, #16]
 8082882:	f7fe bd67 	b.w	8081354 <HAL_USART_Available_Data>

08082886 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8082886:	7c00      	ldrb	r0, [r0, #16]
 8082888:	f7fe bd74 	b.w	8081374 <HAL_USART_Peek_Data>

0808288c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 808288c:	7c00      	ldrb	r0, [r0, #16]
 808288e:	f7fe bd69 	b.w	8081364 <HAL_USART_Read_Data>

08082892 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082892:	7c00      	ldrb	r0, [r0, #16]
 8082894:	f7fe bd76 	b.w	8081384 <HAL_USART_Flush_Data>

08082898 <_ZN11USARTSerialD0Ev>:
 8082898:	b510      	push	{r4, lr}
 808289a:	4604      	mov	r4, r0
 808289c:	f7fd fbff 	bl	808009e <_ZdlPv>
 80828a0:	4620      	mov	r0, r4
 80828a2:	bd10      	pop	{r4, pc}

080828a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80828a4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80828a6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80828a8:	4604      	mov	r4, r0
 80828aa:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80828ac:	b925      	cbnz	r5, 80828b8 <_ZN11USARTSerial5writeEh+0x14>
 80828ae:	7c00      	ldrb	r0, [r0, #16]
 80828b0:	f7fe fd78 	bl	80813a4 <HAL_USART_Available_Data_For_Write>
 80828b4:	2800      	cmp	r0, #0
 80828b6:	dd05      	ble.n	80828c4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80828b8:	4631      	mov	r1, r6
 80828ba:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80828bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80828c0:	f7fe bd40 	b.w	8081344 <HAL_USART_Write_Data>
  }
  return 0;
}
 80828c4:	4628      	mov	r0, r5
 80828c6:	bd70      	pop	{r4, r5, r6, pc}

080828c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80828c8:	b510      	push	{r4, lr}
 80828ca:	4604      	mov	r4, r0
 80828cc:	4608      	mov	r0, r1
 80828ce:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80828d0:	2200      	movs	r2, #0
 80828d2:	6062      	str	r2, [r4, #4]
 80828d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80828d8:	60a2      	str	r2, [r4, #8]
 80828da:	4a05      	ldr	r2, [pc, #20]	; (80828f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80828dc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80828de:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80828e0:	2201      	movs	r2, #1
 80828e2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80828e4:	461a      	mov	r2, r3
 80828e6:	f7fe fd25 	bl	8081334 <HAL_USART_Init>
}
 80828ea:	4620      	mov	r0, r4
 80828ec:	bd10      	pop	{r4, pc}
 80828ee:	bf00      	nop
 80828f0:	08084fac 	.word	0x08084fac

080828f4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80828f4:	7c00      	ldrb	r0, [r0, #16]
 80828f6:	f7fe bd4d 	b.w	8081394 <HAL_USART_Is_Enabled>
	...

080828fc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80828fc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80828fe:	4d0c      	ldr	r5, [pc, #48]	; (8082930 <_Z22__fetch_global_Serial1v+0x34>)
 8082900:	6829      	ldr	r1, [r5, #0]
 8082902:	f011 0401 	ands.w	r4, r1, #1
 8082906:	d111      	bne.n	808292c <_Z22__fetch_global_Serial1v+0x30>
 8082908:	4628      	mov	r0, r5
 808290a:	f7fd fbca 	bl	80800a2 <__cxa_guard_acquire>
 808290e:	b168      	cbz	r0, 808292c <_Z22__fetch_global_Serial1v+0x30>
 8082910:	4a08      	ldr	r2, [pc, #32]	; (8082934 <_Z22__fetch_global_Serial1v+0x38>)
 8082912:	4621      	mov	r1, r4
 8082914:	4b08      	ldr	r3, [pc, #32]	; (8082938 <_Z22__fetch_global_Serial1v+0x3c>)
 8082916:	4809      	ldr	r0, [pc, #36]	; (808293c <_Z22__fetch_global_Serial1v+0x40>)
 8082918:	f7ff ffd6 	bl	80828c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808291c:	4628      	mov	r0, r5
 808291e:	f7fd fbc5 	bl	80800ac <__cxa_guard_release>
 8082922:	4a07      	ldr	r2, [pc, #28]	; (8082940 <_Z22__fetch_global_Serial1v+0x44>)
 8082924:	4907      	ldr	r1, [pc, #28]	; (8082944 <_Z22__fetch_global_Serial1v+0x48>)
 8082926:	4805      	ldr	r0, [pc, #20]	; (808293c <_Z22__fetch_global_Serial1v+0x40>)
 8082928:	f000 fa8a 	bl	8082e40 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808292c:	4803      	ldr	r0, [pc, #12]	; (808293c <_Z22__fetch_global_Serial1v+0x40>)
 808292e:	bd38      	pop	{r3, r4, r5, pc}
 8082930:	20000704 	.word	0x20000704
 8082934:	20000708 	.word	0x20000708
 8082938:	20000680 	.word	0x20000680
 808293c:	2000066c 	.word	0x2000066c
 8082940:	200004f0 	.word	0x200004f0
 8082944:	08082875 	.word	0x08082875

08082948 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082948:	7441      	strb	r1, [r0, #17]
 808294a:	4770      	bx	lr

0808294c <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 808294c:	4770      	bx	lr

0808294e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 808294e:	2100      	movs	r1, #0
 8082950:	7c00      	ldrb	r0, [r0, #16]
 8082952:	f7fe bd47 	b.w	80813e4 <HAL_USB_USART_Receive_Data>

08082956 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8082956:	2101      	movs	r1, #1
 8082958:	7c00      	ldrb	r0, [r0, #16]
 808295a:	f7fe bd43 	b.w	80813e4 <HAL_USB_USART_Receive_Data>

0808295e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 808295e:	7c00      	ldrb	r0, [r0, #16]
 8082960:	f7fe bd38 	b.w	80813d4 <HAL_USB_USART_Available_Data_For_Write>

08082964 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8082964:	7c00      	ldrb	r0, [r0, #16]
 8082966:	f7fe bd2d 	b.w	80813c4 <HAL_USB_USART_Available_Data>

0808296a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 808296a:	b538      	push	{r3, r4, r5, lr}
 808296c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808296e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8082970:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082972:	f7fe fd2f 	bl	80813d4 <HAL_USB_USART_Available_Data_For_Write>
 8082976:	2800      	cmp	r0, #0
 8082978:	dc01      	bgt.n	808297e <_ZN9USBSerial5writeEh+0x14>
 808297a:	7c60      	ldrb	r0, [r4, #17]
 808297c:	b120      	cbz	r0, 8082988 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 808297e:	4629      	mov	r1, r5
 8082980:	7c20      	ldrb	r0, [r4, #16]
 8082982:	f7fe fd37 	bl	80813f4 <HAL_USB_USART_Send_Data>
    return 1;
 8082986:	2001      	movs	r0, #1
  }
  return 0;
}
 8082988:	bd38      	pop	{r3, r4, r5, pc}

0808298a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808298a:	7c00      	ldrb	r0, [r0, #16]
 808298c:	f7fe bd3a 	b.w	8081404 <HAL_USB_USART_Flush_Data>

08082990 <_ZN9USBSerialD0Ev>:
 8082990:	b510      	push	{r4, lr}
 8082992:	4604      	mov	r4, r0
 8082994:	f7fd fb83 	bl	808009e <_ZdlPv>
 8082998:	4620      	mov	r0, r4
 808299a:	bd10      	pop	{r4, pc}

0808299c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808299c:	b510      	push	{r4, lr}
 808299e:	4604      	mov	r4, r0
 80829a0:	2300      	movs	r3, #0
 80829a2:	6063      	str	r3, [r4, #4]
 80829a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80829a8:	60a3      	str	r3, [r4, #8]
 80829aa:	4b05      	ldr	r3, [pc, #20]	; (80829c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80829ac:	4608      	mov	r0, r1
 80829ae:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80829b0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80829b2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80829b4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80829b6:	4611      	mov	r1, r2
 80829b8:	f7fe fcfc 	bl	80813b4 <HAL_USB_USART_Init>
}
 80829bc:	4620      	mov	r0, r4
 80829be:	bd10      	pop	{r4, pc}
 80829c0:	08084fdc 	.word	0x08084fdc

080829c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80829c4:	b510      	push	{r4, lr}
 80829c6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80829c8:	2214      	movs	r2, #20
 80829ca:	2100      	movs	r1, #0
 80829cc:	f001 fbed 	bl	80841aa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80829d0:	4b05      	ldr	r3, [pc, #20]	; (80829e8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80829d2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80829d4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80829d6:	4b05      	ldr	r3, [pc, #20]	; (80829ec <_Z19acquireSerialBufferv+0x28>)
 80829d8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80829da:	f240 1301 	movw	r3, #257	; 0x101
 80829de:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80829e0:	2381      	movs	r3, #129	; 0x81
 80829e2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80829e4:	bd10      	pop	{r4, pc}
 80829e6:	bf00      	nop
 80829e8:	20000811 	.word	0x20000811
 80829ec:	20000790 	.word	0x20000790

080829f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80829f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80829f2:	4d0e      	ldr	r5, [pc, #56]	; (8082a2c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80829f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80829f6:	a801      	add	r0, sp, #4
 80829f8:	f7ff ffe4 	bl	80829c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80829fc:	6829      	ldr	r1, [r5, #0]
 80829fe:	f011 0401 	ands.w	r4, r1, #1
 8082a02:	d110      	bne.n	8082a26 <_Z16_fetch_usbserialv+0x36>
 8082a04:	4628      	mov	r0, r5
 8082a06:	f7fd fb4c 	bl	80800a2 <__cxa_guard_acquire>
 8082a0a:	b160      	cbz	r0, 8082a26 <_Z16_fetch_usbserialv+0x36>
 8082a0c:	aa01      	add	r2, sp, #4
 8082a0e:	4621      	mov	r1, r4
 8082a10:	4807      	ldr	r0, [pc, #28]	; (8082a30 <_Z16_fetch_usbserialv+0x40>)
 8082a12:	f7ff ffc3 	bl	808299c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082a16:	4628      	mov	r0, r5
 8082a18:	f7fd fb48 	bl	80800ac <__cxa_guard_release>
 8082a1c:	4a05      	ldr	r2, [pc, #20]	; (8082a34 <_Z16_fetch_usbserialv+0x44>)
 8082a1e:	4906      	ldr	r1, [pc, #24]	; (8082a38 <_Z16_fetch_usbserialv+0x48>)
 8082a20:	4803      	ldr	r0, [pc, #12]	; (8082a30 <_Z16_fetch_usbserialv+0x40>)
 8082a22:	f000 fa0d 	bl	8082e40 <__aeabi_atexit>
	return _usbserial;
}
 8082a26:	4802      	ldr	r0, [pc, #8]	; (8082a30 <_Z16_fetch_usbserialv+0x40>)
 8082a28:	b007      	add	sp, #28
 8082a2a:	bd30      	pop	{r4, r5, pc}
 8082a2c:	2000078c 	.word	0x2000078c
 8082a30:	20000914 	.word	0x20000914
 8082a34:	200004f0 	.word	0x200004f0
 8082a38:	0808294d 	.word	0x0808294d

08082a3c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082a3c:	b510      	push	{r4, lr}
 8082a3e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082a40:	2214      	movs	r2, #20
 8082a42:	2100      	movs	r1, #0
 8082a44:	f001 fbb1 	bl	80841aa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082a48:	4b05      	ldr	r3, [pc, #20]	; (8082a60 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082a4a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082a4c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082a4e:	4b05      	ldr	r3, [pc, #20]	; (8082a64 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082a50:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082a52:	f240 1301 	movw	r3, #257	; 0x101
 8082a56:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082a58:	2381      	movs	r3, #129	; 0x81
 8082a5a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082a5c:	bd10      	pop	{r4, pc}
 8082a5e:	bf00      	nop
 8082a60:	200009c4 	.word	0x200009c4
 8082a64:	2000092c 	.word	0x2000092c

08082a68 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082a68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082a6a:	4c0e      	ldr	r4, [pc, #56]	; (8082aa4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082a6c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082a6e:	a801      	add	r0, sp, #4
 8082a70:	f7ff ffe4 	bl	8082a3c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082a74:	6823      	ldr	r3, [r4, #0]
 8082a76:	07db      	lsls	r3, r3, #31
 8082a78:	d410      	bmi.n	8082a9c <_Z17_fetch_usbserial1v+0x34>
 8082a7a:	4620      	mov	r0, r4
 8082a7c:	f7fd fb11 	bl	80800a2 <__cxa_guard_acquire>
 8082a80:	b160      	cbz	r0, 8082a9c <_Z17_fetch_usbserial1v+0x34>
 8082a82:	aa01      	add	r2, sp, #4
 8082a84:	2101      	movs	r1, #1
 8082a86:	4808      	ldr	r0, [pc, #32]	; (8082aa8 <_Z17_fetch_usbserial1v+0x40>)
 8082a88:	f7ff ff88 	bl	808299c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082a8c:	4620      	mov	r0, r4
 8082a8e:	f7fd fb0d 	bl	80800ac <__cxa_guard_release>
 8082a92:	4a06      	ldr	r2, [pc, #24]	; (8082aac <_Z17_fetch_usbserial1v+0x44>)
 8082a94:	4906      	ldr	r1, [pc, #24]	; (8082ab0 <_Z17_fetch_usbserial1v+0x48>)
 8082a96:	4804      	ldr	r0, [pc, #16]	; (8082aa8 <_Z17_fetch_usbserial1v+0x40>)
 8082a98:	f000 f9d2 	bl	8082e40 <__aeabi_atexit>
  return _usbserial1;
}
 8082a9c:	4802      	ldr	r0, [pc, #8]	; (8082aa8 <_Z17_fetch_usbserial1v+0x40>)
 8082a9e:	b006      	add	sp, #24
 8082aa0:	bd10      	pop	{r4, pc}
 8082aa2:	bf00      	nop
 8082aa4:	20000928 	.word	0x20000928
 8082aa8:	200009b0 	.word	0x200009b0
 8082aac:	200004f0 	.word	0x200004f0
 8082ab0:	0808294d 	.word	0x0808294d

08082ab4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8082ab4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082ab6:	4b18      	ldr	r3, [pc, #96]	; (8082b18 <serialEventRun+0x64>)
 8082ab8:	b133      	cbz	r3, 8082ac8 <serialEventRun+0x14>
 8082aba:	f7ff ff99 	bl	80829f0 <_Z16_fetch_usbserialv>
 8082abe:	6803      	ldr	r3, [r0, #0]
 8082ac0:	691b      	ldr	r3, [r3, #16]
 8082ac2:	4798      	blx	r3
 8082ac4:	2800      	cmp	r0, #0
 8082ac6:	dc1e      	bgt.n	8082b06 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8082ac8:	4b14      	ldr	r3, [pc, #80]	; (8082b1c <serialEventRun+0x68>)
 8082aca:	b133      	cbz	r3, 8082ada <serialEventRun+0x26>
 8082acc:	f7ff ff16 	bl	80828fc <_Z22__fetch_global_Serial1v>
 8082ad0:	6803      	ldr	r3, [r0, #0]
 8082ad2:	691b      	ldr	r3, [r3, #16]
 8082ad4:	4798      	blx	r3
 8082ad6:	2800      	cmp	r0, #0
 8082ad8:	dc18      	bgt.n	8082b0c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8082ada:	4b11      	ldr	r3, [pc, #68]	; (8082b20 <serialEventRun+0x6c>)
 8082adc:	b10b      	cbz	r3, 8082ae2 <serialEventRun+0x2e>
 8082ade:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8082ae2:	4b10      	ldr	r3, [pc, #64]	; (8082b24 <serialEventRun+0x70>)
 8082ae4:	b10b      	cbz	r3, 8082aea <serialEventRun+0x36>
 8082ae6:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8082aea:	4b0f      	ldr	r3, [pc, #60]	; (8082b28 <serialEventRun+0x74>)
 8082aec:	b10b      	cbz	r3, 8082af2 <serialEventRun+0x3e>
 8082aee:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082af2:	4b0e      	ldr	r3, [pc, #56]	; (8082b2c <serialEventRun+0x78>)
 8082af4:	b17b      	cbz	r3, 8082b16 <serialEventRun+0x62>
 8082af6:	f7ff ffb7 	bl	8082a68 <_Z17_fetch_usbserial1v>
 8082afa:	6803      	ldr	r3, [r0, #0]
 8082afc:	691b      	ldr	r3, [r3, #16]
 8082afe:	4798      	blx	r3
 8082b00:	2800      	cmp	r0, #0
 8082b02:	dc06      	bgt.n	8082b12 <serialEventRun+0x5e>
 8082b04:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8082b06:	f3af 8000 	nop.w
 8082b0a:	e7dd      	b.n	8082ac8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8082b0c:	f3af 8000 	nop.w
 8082b10:	e7e3      	b.n	8082ada <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8082b12:	f3af 8000 	nop.w
 8082b16:	bd08      	pop	{r3, pc}
	...

08082b30 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8082b30:	b508      	push	{r3, lr}
	serialEventRun();
 8082b32:	f7ff ffbf 	bl	8082ab4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082b36:	f7fe fb0d 	bl	8081154 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082b3a:	4b01      	ldr	r3, [pc, #4]	; (8082b40 <_post_loop+0x10>)
 8082b3c:	6018      	str	r0, [r3, #0]
 8082b3e:	bd08      	pop	{r3, pc}
 8082b40:	20000ad0 	.word	0x20000ad0

08082b44 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082b44:	4802      	ldr	r0, [pc, #8]	; (8082b50 <_Z33system_initialize_user_backup_ramv+0xc>)
 8082b46:	4a03      	ldr	r2, [pc, #12]	; (8082b54 <_Z33system_initialize_user_backup_ramv+0x10>)
 8082b48:	4903      	ldr	r1, [pc, #12]	; (8082b58 <_Z33system_initialize_user_backup_ramv+0x14>)
 8082b4a:	1a12      	subs	r2, r2, r0
 8082b4c:	f001 bb22 	b.w	8084194 <memcpy>
 8082b50:	40024000 	.word	0x40024000
 8082b54:	40024004 	.word	0x40024004
 8082b58:	080852a0 	.word	0x080852a0

08082b5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082b5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082b5e:	2300      	movs	r3, #0
 8082b60:	9300      	str	r3, [sp, #0]
 8082b62:	461a      	mov	r2, r3
 8082b64:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082b68:	f7fe fc9e 	bl	80814a8 <system_ctrl_set_result>
}
 8082b6c:	b003      	add	sp, #12
 8082b6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082b74 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8082b74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082b76:	8843      	ldrh	r3, [r0, #2]
 8082b78:	2b0a      	cmp	r3, #10
 8082b7a:	d008      	beq.n	8082b8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082b7c:	2b50      	cmp	r3, #80	; 0x50
 8082b7e:	d109      	bne.n	8082b94 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8082b80:	4b09      	ldr	r3, [pc, #36]	; (8082ba8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082b82:	681b      	ldr	r3, [r3, #0]
 8082b84:	b13b      	cbz	r3, 8082b96 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8082b86:	b003      	add	sp, #12
 8082b88:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8082b8c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8082b8e:	f7ff ffe5 	bl	8082b5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8082b92:	e006      	b.n	8082ba2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082b94:	2300      	movs	r3, #0
 8082b96:	9300      	str	r3, [sp, #0]
 8082b98:	461a      	mov	r2, r3
 8082b9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082b9e:	f7fe fc83 	bl	80814a8 <system_ctrl_set_result>
        break;
    }
}
 8082ba2:	b003      	add	sp, #12
 8082ba4:	f85d fb04 	ldr.w	pc, [sp], #4
 8082ba8:	20000ac8 	.word	0x20000ac8

08082bac <module_user_init_hook>:

void module_user_init_hook()
{
 8082bac:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8082bae:	4c10      	ldr	r4, [pc, #64]	; (8082bf0 <module_user_init_hook+0x44>)
 8082bb0:	4d10      	ldr	r5, [pc, #64]	; (8082bf4 <module_user_init_hook+0x48>)
 8082bb2:	6823      	ldr	r3, [r4, #0]
 8082bb4:	42ab      	cmp	r3, r5
 8082bb6:	4b10      	ldr	r3, [pc, #64]	; (8082bf8 <module_user_init_hook+0x4c>)
 8082bb8:	bf0c      	ite	eq
 8082bba:	2201      	moveq	r2, #1
 8082bbc:	2200      	movne	r2, #0
 8082bbe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082bc0:	d002      	beq.n	8082bc8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8082bc2:	f7ff ffbf 	bl	8082b44 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8082bc6:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 8082bc8:	f7fe fabc 	bl	8081144 <HAL_RNG_GetRandomNumber>
 8082bcc:	f001 faf6 	bl	80841bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082bd0:	4b0a      	ldr	r3, [pc, #40]	; (8082bfc <module_user_init_hook+0x50>)
 8082bd2:	b11b      	cbz	r3, 8082bdc <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 8082bd4:	f7fe fab6 	bl	8081144 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 8082bd8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082bdc:	2100      	movs	r1, #0
 8082bde:	4807      	ldr	r0, [pc, #28]	; (8082bfc <module_user_init_hook+0x50>)
 8082be0:	f7fe fcbc 	bl	808155c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082be8:	2100      	movs	r1, #0
 8082bea:	4805      	ldr	r0, [pc, #20]	; (8082c00 <module_user_init_hook+0x54>)
 8082bec:	f7fe bc52 	b.w	8081494 <system_ctrl_set_app_request_handler>
 8082bf0:	40024000 	.word	0x40024000
 8082bf4:	9a271c1e 	.word	0x9a271c1e
 8082bf8:	20000acc 	.word	0x20000acc
 8082bfc:	00000000 	.word	0x00000000
 8082c00:	08082b75 	.word	0x08082b75

08082c04 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8082c04:	b510      	push	{r4, lr}
 8082c06:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8082c08:	480f      	ldr	r0, [pc, #60]	; (8082c48 <pinAvailable+0x44>)
 8082c0a:	f7ff fc81 	bl	8082510 <_ZN8SPIClass9isEnabledEv>
 8082c0e:	b128      	cbz	r0, 8082c1c <pinAvailable+0x18>
 8082c10:	f1a4 030d 	sub.w	r3, r4, #13
 8082c14:	2b02      	cmp	r3, #2
 8082c16:	d801      	bhi.n	8082c1c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8082c18:	2000      	movs	r0, #0
 8082c1a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082c1c:	f000 f88a 	bl	8082d34 <_Z19__fetch_global_Wirev>
 8082c20:	f7ff f991 	bl	8081f46 <_ZN7TwoWire9isEnabledEv>
 8082c24:	b108      	cbz	r0, 8082c2a <pinAvailable+0x26>
 8082c26:	2c01      	cmp	r4, #1
 8082c28:	d9f6      	bls.n	8082c18 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8082c2a:	f7ff fe67 	bl	80828fc <_Z22__fetch_global_Serial1v>
 8082c2e:	f7ff fe61 	bl	80828f4 <_ZN11USARTSerial9isEnabledEv>
 8082c32:	b118      	cbz	r0, 8082c3c <pinAvailable+0x38>
 8082c34:	f1a4 0312 	sub.w	r3, r4, #18
 8082c38:	2b01      	cmp	r3, #1
 8082c3a:	d9ed      	bls.n	8082c18 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082c3c:	2c2e      	cmp	r4, #46	; 0x2e
 8082c3e:	bf8c      	ite	hi
 8082c40:	2000      	movhi	r0, #0
 8082c42:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082c44:	bd10      	pop	{r4, pc}
 8082c46:	bf00      	nop
 8082c48:	20000b14 	.word	0x20000b14

08082c4c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082c4c:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8082c4e:	b538      	push	{r3, r4, r5, lr}
 8082c50:	4604      	mov	r4, r0
 8082c52:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082c54:	d80a      	bhi.n	8082c6c <pinMode+0x20>
 8082c56:	29ff      	cmp	r1, #255	; 0xff
 8082c58:	d008      	beq.n	8082c6c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082c5a:	f7ff ffd3 	bl	8082c04 <pinAvailable>
 8082c5e:	b128      	cbz	r0, 8082c6c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082c60:	4629      	mov	r1, r5
 8082c62:	4620      	mov	r0, r4
}
 8082c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082c68:	f7fe babc 	b.w	80811e4 <HAL_Pin_Mode>
 8082c6c:	bd38      	pop	{r3, r4, r5, pc}

08082c6e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082c6e:	b538      	push	{r3, r4, r5, lr}
 8082c70:	4604      	mov	r4, r0
 8082c72:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082c74:	f7fe fabe 	bl	80811f4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082c78:	28ff      	cmp	r0, #255	; 0xff
 8082c7a:	d010      	beq.n	8082c9e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082c7c:	2806      	cmp	r0, #6
 8082c7e:	d804      	bhi.n	8082c8a <digitalWrite+0x1c>
 8082c80:	234d      	movs	r3, #77	; 0x4d
 8082c82:	fa23 f000 	lsr.w	r0, r3, r0
 8082c86:	07c3      	lsls	r3, r0, #31
 8082c88:	d409      	bmi.n	8082c9e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082c8a:	4620      	mov	r0, r4
 8082c8c:	f7ff ffba 	bl	8082c04 <pinAvailable>
 8082c90:	b128      	cbz	r0, 8082c9e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082c92:	4629      	mov	r1, r5
 8082c94:	4620      	mov	r0, r4
}
 8082c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082c9a:	f7fe bab3 	b.w	8081204 <HAL_GPIO_Write>
 8082c9e:	bd38      	pop	{r3, r4, r5, pc}

08082ca0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8082ca0:	b510      	push	{r4, lr}
 8082ca2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082ca4:	f7fe faa6 	bl	80811f4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8082ca8:	3804      	subs	r0, #4
 8082caa:	b2c0      	uxtb	r0, r0
 8082cac:	2801      	cmp	r0, #1
 8082cae:	d908      	bls.n	8082cc2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8082cb0:	4620      	mov	r0, r4
 8082cb2:	f7ff ffa7 	bl	8082c04 <pinAvailable>
 8082cb6:	b120      	cbz	r0, 8082cc2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082cb8:	4620      	mov	r0, r4
}
 8082cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082cbe:	f7fe baa9 	b.w	8081214 <HAL_GPIO_Read>
}
 8082cc2:	2000      	movs	r0, #0
 8082cc4:	bd10      	pop	{r4, pc}

08082cc6 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 8082cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082cca:	4690      	mov	r8, r2
 8082ccc:	461e      	mov	r6, r3
 8082cce:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 8082cd0:	460d      	mov	r5, r1
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 8082cd2:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
 8082cd4:	f1b8 0f00 	cmp.w	r8, #0
 8082cd8:	d104      	bne.n	8082ce4 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 8082cda:	f1c4 0107 	rsb	r1, r4, #7
 8082cde:	fa46 f101 	asr.w	r1, r6, r1
 8082ce2:	e001      	b.n	8082ce8 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 8082ce4:	fa46 f104 	asr.w	r1, r6, r4
 8082ce8:	f001 0101 	and.w	r1, r1, #1
 8082cec:	4638      	mov	r0, r7
 8082cee:	f7ff ffbe 	bl	8082c6e <digitalWrite>

    digitalWrite(clockPin, HIGH);
 8082cf2:	2101      	movs	r1, #1
 8082cf4:	4628      	mov	r0, r5
 8082cf6:	f7ff ffba 	bl	8082c6e <digitalWrite>
    digitalWrite(clockPin, LOW);
 8082cfa:	2100      	movs	r1, #0
 8082cfc:	4628      	mov	r0, r5
 8082cfe:	f7ff ffb6 	bl	8082c6e <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 8082d02:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8082d06:	d2e5      	bcs.n	8082cd4 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 8082d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082d0c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 8082d0c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 8082d0e:	4c07      	ldr	r4, [pc, #28]	; (8082d2c <_Z21__fetch_global_EEPROMv+0x20>)
 8082d10:	6823      	ldr	r3, [r4, #0]
 8082d12:	07db      	lsls	r3, r3, #31
 8082d14:	d408      	bmi.n	8082d28 <_Z21__fetch_global_EEPROMv+0x1c>
 8082d16:	4620      	mov	r0, r4
 8082d18:	f7fd f9c3 	bl	80800a2 <__cxa_guard_acquire>
 8082d1c:	b120      	cbz	r0, 8082d28 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 8082d1e:	f7fe fa29 	bl	8081174 <HAL_EEPROM_Init>
 8082d22:	4620      	mov	r0, r4
 8082d24:	f7fd f9c2 	bl	80800ac <__cxa_guard_release>
	return eeprom;
}
 8082d28:	4801      	ldr	r0, [pc, #4]	; (8082d30 <_Z21__fetch_global_EEPROMv+0x24>)
 8082d2a:	bd10      	pop	{r4, pc}
 8082d2c:	20000ad4 	.word	0x20000ad4
 8082d30:	20000ad8 	.word	0x20000ad8

08082d34 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8082d34:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8082d36:	4d0b      	ldr	r5, [pc, #44]	; (8082d64 <_Z19__fetch_global_Wirev+0x30>)
 8082d38:	6829      	ldr	r1, [r5, #0]
 8082d3a:	f011 0401 	ands.w	r4, r1, #1
 8082d3e:	d10f      	bne.n	8082d60 <_Z19__fetch_global_Wirev+0x2c>
 8082d40:	4628      	mov	r0, r5
 8082d42:	f7fd f9ae 	bl	80800a2 <__cxa_guard_acquire>
 8082d46:	b158      	cbz	r0, 8082d60 <_Z19__fetch_global_Wirev+0x2c>
 8082d48:	4621      	mov	r1, r4
 8082d4a:	4807      	ldr	r0, [pc, #28]	; (8082d68 <_Z19__fetch_global_Wirev+0x34>)
 8082d4c:	f7ff f8ca 	bl	8081ee4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8082d50:	4628      	mov	r0, r5
 8082d52:	f7fd f9ab 	bl	80800ac <__cxa_guard_release>
 8082d56:	4a05      	ldr	r2, [pc, #20]	; (8082d6c <_Z19__fetch_global_Wirev+0x38>)
 8082d58:	4905      	ldr	r1, [pc, #20]	; (8082d70 <_Z19__fetch_global_Wirev+0x3c>)
 8082d5a:	4803      	ldr	r0, [pc, #12]	; (8082d68 <_Z19__fetch_global_Wirev+0x34>)
 8082d5c:	f000 f870 	bl	8082e40 <__aeabi_atexit>
	return wire;
}
 8082d60:	4801      	ldr	r0, [pc, #4]	; (8082d68 <_Z19__fetch_global_Wirev+0x34>)
 8082d62:	bd38      	pop	{r3, r4, r5, pc}
 8082d64:	20000adc 	.word	0x20000adc
 8082d68:	20000af4 	.word	0x20000af4
 8082d6c:	200004f0 	.word	0x200004f0
 8082d70:	08081e8d 	.word	0x08081e8d

08082d74 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8082d74:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8082d76:	4c0b      	ldr	r4, [pc, #44]	; (8082da4 <_Z20__fetch_global_Wire3v+0x30>)
 8082d78:	6823      	ldr	r3, [r4, #0]
 8082d7a:	07db      	lsls	r3, r3, #31
 8082d7c:	d40f      	bmi.n	8082d9e <_Z20__fetch_global_Wire3v+0x2a>
 8082d7e:	4620      	mov	r0, r4
 8082d80:	f7fd f98f 	bl	80800a2 <__cxa_guard_acquire>
 8082d84:	b158      	cbz	r0, 8082d9e <_Z20__fetch_global_Wire3v+0x2a>
 8082d86:	2102      	movs	r1, #2
 8082d88:	4807      	ldr	r0, [pc, #28]	; (8082da8 <_Z20__fetch_global_Wire3v+0x34>)
 8082d8a:	f7ff f8ab 	bl	8081ee4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8082d8e:	4620      	mov	r0, r4
 8082d90:	f7fd f98c 	bl	80800ac <__cxa_guard_release>
 8082d94:	4a05      	ldr	r2, [pc, #20]	; (8082dac <_Z20__fetch_global_Wire3v+0x38>)
 8082d96:	4906      	ldr	r1, [pc, #24]	; (8082db0 <_Z20__fetch_global_Wire3v+0x3c>)
 8082d98:	4803      	ldr	r0, [pc, #12]	; (8082da8 <_Z20__fetch_global_Wire3v+0x34>)
 8082d9a:	f000 f851 	bl	8082e40 <__aeabi_atexit>
	return wire;
}
 8082d9e:	4802      	ldr	r0, [pc, #8]	; (8082da8 <_Z20__fetch_global_Wire3v+0x34>)
 8082da0:	bd10      	pop	{r4, pc}
 8082da2:	bf00      	nop
 8082da4:	20000b08 	.word	0x20000b08
 8082da8:	20000ae0 	.word	0x20000ae0
 8082dac:	200004f0 	.word	0x200004f0
 8082db0:	08081e8d 	.word	0x08081e8d

08082db4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 8082db4:	b513      	push	{r0, r1, r4, lr}
 8082db6:	4c08      	ldr	r4, [pc, #32]	; (8082dd8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082db8:	2300      	movs	r3, #0
 8082dba:	461a      	mov	r2, r3
 8082dbc:	4619      	mov	r1, r3
 8082dbe:	9300      	str	r3, [sp, #0]
 8082dc0:	4620      	mov	r0, r4
 8082dc2:	f7ff f92d 	bl	8082020 <_ZN9IPAddressC1Ehhhh>
 8082dc6:	4620      	mov	r0, r4
 8082dc8:	4a04      	ldr	r2, [pc, #16]	; (8082ddc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082dca:	4905      	ldr	r1, [pc, #20]	; (8082de0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082dcc:	b002      	add	sp, #8
 8082dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082dd2:	f000 b835 	b.w	8082e40 <__aeabi_atexit>
 8082dd6:	bf00      	nop
 8082dd8:	20000b0c 	.word	0x20000b0c
 8082ddc:	200004f0 	.word	0x200004f0
 8082de0:	08081fc9 	.word	0x08081fc9

08082de4 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082de4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082de6:	4e11      	ldr	r6, [pc, #68]	; (8082e2c <_GLOBAL__sub_I_SPI+0x48>)
 8082de8:	4d11      	ldr	r5, [pc, #68]	; (8082e30 <_GLOBAL__sub_I_SPI+0x4c>)
 8082dea:	4c12      	ldr	r4, [pc, #72]	; (8082e34 <_GLOBAL__sub_I_SPI+0x50>)
 8082dec:	2100      	movs	r1, #0
 8082dee:	4630      	mov	r0, r6
 8082df0:	f7ff fb7a 	bl	80824e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082df4:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082df6:	4e10      	ldr	r6, [pc, #64]	; (8082e38 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082df8:	462a      	mov	r2, r5
 8082dfa:	4621      	mov	r1, r4
 8082dfc:	f000 f820 	bl	8082e40 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082e00:	2101      	movs	r1, #1
 8082e02:	4630      	mov	r0, r6
 8082e04:	f7ff fb70 	bl	80824e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082e08:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082e0a:	4e0c      	ldr	r6, [pc, #48]	; (8082e3c <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082e0c:	462a      	mov	r2, r5
 8082e0e:	4621      	mov	r1, r4
 8082e10:	f000 f816 	bl	8082e40 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082e14:	2102      	movs	r1, #2
 8082e16:	4630      	mov	r0, r6
 8082e18:	f7ff fb66 	bl	80824e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082e1c:	462a      	mov	r2, r5
 8082e1e:	4621      	mov	r1, r4
 8082e20:	4630      	mov	r0, r6
 8082e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8082e26:	f000 b80b 	b.w	8082e40 <__aeabi_atexit>
 8082e2a:	bf00      	nop
 8082e2c:	20000b14 	.word	0x20000b14
 8082e30:	200004f0 	.word	0x200004f0
 8082e34:	080824d9 	.word	0x080824d9
 8082e38:	20000b24 	.word	0x20000b24
 8082e3c:	20000b34 	.word	0x20000b34

08082e40 <__aeabi_atexit>:
 8082e40:	460b      	mov	r3, r1
 8082e42:	4601      	mov	r1, r0
 8082e44:	4618      	mov	r0, r3
 8082e46:	f001 b89f 	b.w	8083f88 <__cxa_atexit>

08082e4a <_ZSt25__throw_bad_function_callv>:
 8082e4a:	b508      	push	{r3, lr}
 8082e4c:	f7fe fbd6 	bl	80815fc <abort>

08082e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8082e50:	4b24      	ldr	r3, [pc, #144]	; (8082ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8082e52:	681a      	ldr	r2, [r3, #0]
 8082e54:	07d0      	lsls	r0, r2, #31
 8082e56:	bf5c      	itt	pl
 8082e58:	2201      	movpl	r2, #1
 8082e5a:	601a      	strpl	r2, [r3, #0]
 8082e5c:	4b22      	ldr	r3, [pc, #136]	; (8082ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8082e5e:	681a      	ldr	r2, [r3, #0]
 8082e60:	07d1      	lsls	r1, r2, #31
 8082e62:	bf5c      	itt	pl
 8082e64:	2201      	movpl	r2, #1
 8082e66:	601a      	strpl	r2, [r3, #0]
 8082e68:	4b20      	ldr	r3, [pc, #128]	; (8082eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8082e6a:	681a      	ldr	r2, [r3, #0]
 8082e6c:	07d2      	lsls	r2, r2, #31
 8082e6e:	bf5c      	itt	pl
 8082e70:	2201      	movpl	r2, #1
 8082e72:	601a      	strpl	r2, [r3, #0]
 8082e74:	4b1e      	ldr	r3, [pc, #120]	; (8082ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8082e76:	681a      	ldr	r2, [r3, #0]
 8082e78:	07d0      	lsls	r0, r2, #31
 8082e7a:	bf5c      	itt	pl
 8082e7c:	2201      	movpl	r2, #1
 8082e7e:	601a      	strpl	r2, [r3, #0]
 8082e80:	4b1c      	ldr	r3, [pc, #112]	; (8082ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8082e82:	681a      	ldr	r2, [r3, #0]
 8082e84:	07d1      	lsls	r1, r2, #31
 8082e86:	bf5c      	itt	pl
 8082e88:	2201      	movpl	r2, #1
 8082e8a:	601a      	strpl	r2, [r3, #0]
 8082e8c:	4b1a      	ldr	r3, [pc, #104]	; (8082ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8082e8e:	681a      	ldr	r2, [r3, #0]
 8082e90:	07d2      	lsls	r2, r2, #31
 8082e92:	bf5c      	itt	pl
 8082e94:	2201      	movpl	r2, #1
 8082e96:	601a      	strpl	r2, [r3, #0]
 8082e98:	4b18      	ldr	r3, [pc, #96]	; (8082efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8082e9a:	681a      	ldr	r2, [r3, #0]
 8082e9c:	07d0      	lsls	r0, r2, #31
 8082e9e:	bf5c      	itt	pl
 8082ea0:	2201      	movpl	r2, #1
 8082ea2:	601a      	strpl	r2, [r3, #0]
 8082ea4:	4b16      	ldr	r3, [pc, #88]	; (8082f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8082ea6:	681a      	ldr	r2, [r3, #0]
 8082ea8:	07d1      	lsls	r1, r2, #31
 8082eaa:	bf5c      	itt	pl
 8082eac:	2201      	movpl	r2, #1
 8082eae:	601a      	strpl	r2, [r3, #0]
 8082eb0:	4b14      	ldr	r3, [pc, #80]	; (8082f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8082eb2:	681a      	ldr	r2, [r3, #0]
 8082eb4:	07d2      	lsls	r2, r2, #31
 8082eb6:	bf5c      	itt	pl
 8082eb8:	2201      	movpl	r2, #1
 8082eba:	601a      	strpl	r2, [r3, #0]
 8082ebc:	4b12      	ldr	r3, [pc, #72]	; (8082f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8082ebe:	681a      	ldr	r2, [r3, #0]
 8082ec0:	07d0      	lsls	r0, r2, #31
 8082ec2:	bf5c      	itt	pl
 8082ec4:	2201      	movpl	r2, #1
 8082ec6:	601a      	strpl	r2, [r3, #0]
 8082ec8:	4b10      	ldr	r3, [pc, #64]	; (8082f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8082eca:	681a      	ldr	r2, [r3, #0]
 8082ecc:	07d1      	lsls	r1, r2, #31
 8082ece:	bf5c      	itt	pl
 8082ed0:	2201      	movpl	r2, #1
 8082ed2:	601a      	strpl	r2, [r3, #0]
 8082ed4:	4b0e      	ldr	r3, [pc, #56]	; (8082f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8082ed6:	681a      	ldr	r2, [r3, #0]
 8082ed8:	07d2      	lsls	r2, r2, #31
 8082eda:	bf5c      	itt	pl
 8082edc:	2201      	movpl	r2, #1
 8082ede:	601a      	strpl	r2, [r3, #0]
 8082ee0:	4770      	bx	lr
 8082ee2:	bf00      	nop
 8082ee4:	20000b70 	.word	0x20000b70
 8082ee8:	20000b6c 	.word	0x20000b6c
 8082eec:	20000b68 	.word	0x20000b68
 8082ef0:	20000b64 	.word	0x20000b64
 8082ef4:	20000b60 	.word	0x20000b60
 8082ef8:	20000b5c 	.word	0x20000b5c
 8082efc:	20000b58 	.word	0x20000b58
 8082f00:	20000b54 	.word	0x20000b54
 8082f04:	20000b50 	.word	0x20000b50
 8082f08:	20000b4c 	.word	0x20000b4c
 8082f0c:	20000b48 	.word	0x20000b48
 8082f10:	20000b44 	.word	0x20000b44

08082f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082f14:	4b18      	ldr	r3, [pc, #96]	; (8082f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8082f16:	681a      	ldr	r2, [r3, #0]
 8082f18:	07d1      	lsls	r1, r2, #31
 8082f1a:	bf5c      	itt	pl
 8082f1c:	2201      	movpl	r2, #1
 8082f1e:	601a      	strpl	r2, [r3, #0]
 8082f20:	4b16      	ldr	r3, [pc, #88]	; (8082f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082f22:	681a      	ldr	r2, [r3, #0]
 8082f24:	07d2      	lsls	r2, r2, #31
 8082f26:	bf5c      	itt	pl
 8082f28:	2201      	movpl	r2, #1
 8082f2a:	601a      	strpl	r2, [r3, #0]
 8082f2c:	4b14      	ldr	r3, [pc, #80]	; (8082f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082f2e:	681a      	ldr	r2, [r3, #0]
 8082f30:	07d0      	lsls	r0, r2, #31
 8082f32:	bf5c      	itt	pl
 8082f34:	2201      	movpl	r2, #1
 8082f36:	601a      	strpl	r2, [r3, #0]
 8082f38:	4b12      	ldr	r3, [pc, #72]	; (8082f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082f3a:	681a      	ldr	r2, [r3, #0]
 8082f3c:	07d1      	lsls	r1, r2, #31
 8082f3e:	bf5c      	itt	pl
 8082f40:	2201      	movpl	r2, #1
 8082f42:	601a      	strpl	r2, [r3, #0]
 8082f44:	4b10      	ldr	r3, [pc, #64]	; (8082f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082f46:	681a      	ldr	r2, [r3, #0]
 8082f48:	07d2      	lsls	r2, r2, #31
 8082f4a:	bf5c      	itt	pl
 8082f4c:	2201      	movpl	r2, #1
 8082f4e:	601a      	strpl	r2, [r3, #0]
 8082f50:	4b0e      	ldr	r3, [pc, #56]	; (8082f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082f52:	681a      	ldr	r2, [r3, #0]
 8082f54:	07d0      	lsls	r0, r2, #31
 8082f56:	bf5c      	itt	pl
 8082f58:	2201      	movpl	r2, #1
 8082f5a:	601a      	strpl	r2, [r3, #0]
 8082f5c:	4b0c      	ldr	r3, [pc, #48]	; (8082f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082f5e:	681a      	ldr	r2, [r3, #0]
 8082f60:	07d1      	lsls	r1, r2, #31
 8082f62:	bf5c      	itt	pl
 8082f64:	2201      	movpl	r2, #1
 8082f66:	601a      	strpl	r2, [r3, #0]
 8082f68:	4b0a      	ldr	r3, [pc, #40]	; (8082f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082f6a:	681a      	ldr	r2, [r3, #0]
 8082f6c:	07d2      	lsls	r2, r2, #31
 8082f6e:	bf5c      	itt	pl
 8082f70:	2201      	movpl	r2, #1
 8082f72:	601a      	strpl	r2, [r3, #0]
 8082f74:	4770      	bx	lr
 8082f76:	bf00      	nop
 8082f78:	20000b90 	.word	0x20000b90
 8082f7c:	20000b8c 	.word	0x20000b8c
 8082f80:	20000b88 	.word	0x20000b88
 8082f84:	20000b84 	.word	0x20000b84
 8082f88:	20000b80 	.word	0x20000b80
 8082f8c:	20000b7c 	.word	0x20000b7c
 8082f90:	20000b78 	.word	0x20000b78
 8082f94:	20000b74 	.word	0x20000b74

08082f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082f98:	4b18      	ldr	r3, [pc, #96]	; (8082ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8082f9a:	681a      	ldr	r2, [r3, #0]
 8082f9c:	07d1      	lsls	r1, r2, #31
 8082f9e:	bf5c      	itt	pl
 8082fa0:	2201      	movpl	r2, #1
 8082fa2:	601a      	strpl	r2, [r3, #0]
 8082fa4:	4b16      	ldr	r3, [pc, #88]	; (8083000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082fa6:	681a      	ldr	r2, [r3, #0]
 8082fa8:	07d2      	lsls	r2, r2, #31
 8082faa:	bf5c      	itt	pl
 8082fac:	2201      	movpl	r2, #1
 8082fae:	601a      	strpl	r2, [r3, #0]
 8082fb0:	4b14      	ldr	r3, [pc, #80]	; (8083004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082fb2:	681a      	ldr	r2, [r3, #0]
 8082fb4:	07d0      	lsls	r0, r2, #31
 8082fb6:	bf5c      	itt	pl
 8082fb8:	2201      	movpl	r2, #1
 8082fba:	601a      	strpl	r2, [r3, #0]
 8082fbc:	4b12      	ldr	r3, [pc, #72]	; (8083008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082fbe:	681a      	ldr	r2, [r3, #0]
 8082fc0:	07d1      	lsls	r1, r2, #31
 8082fc2:	bf5c      	itt	pl
 8082fc4:	2201      	movpl	r2, #1
 8082fc6:	601a      	strpl	r2, [r3, #0]
 8082fc8:	4b10      	ldr	r3, [pc, #64]	; (808300c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082fca:	681a      	ldr	r2, [r3, #0]
 8082fcc:	07d2      	lsls	r2, r2, #31
 8082fce:	bf5c      	itt	pl
 8082fd0:	2201      	movpl	r2, #1
 8082fd2:	601a      	strpl	r2, [r3, #0]
 8082fd4:	4b0e      	ldr	r3, [pc, #56]	; (8083010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082fd6:	681a      	ldr	r2, [r3, #0]
 8082fd8:	07d0      	lsls	r0, r2, #31
 8082fda:	bf5c      	itt	pl
 8082fdc:	2201      	movpl	r2, #1
 8082fde:	601a      	strpl	r2, [r3, #0]
 8082fe0:	4b0c      	ldr	r3, [pc, #48]	; (8083014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082fe2:	681a      	ldr	r2, [r3, #0]
 8082fe4:	07d1      	lsls	r1, r2, #31
 8082fe6:	bf5c      	itt	pl
 8082fe8:	2201      	movpl	r2, #1
 8082fea:	601a      	strpl	r2, [r3, #0]
 8082fec:	4b0a      	ldr	r3, [pc, #40]	; (8083018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082fee:	681a      	ldr	r2, [r3, #0]
 8082ff0:	07d2      	lsls	r2, r2, #31
 8082ff2:	bf5c      	itt	pl
 8082ff4:	2201      	movpl	r2, #1
 8082ff6:	601a      	strpl	r2, [r3, #0]
 8082ff8:	4770      	bx	lr
 8082ffa:	bf00      	nop
 8082ffc:	20000bb0 	.word	0x20000bb0
 8083000:	20000bac 	.word	0x20000bac
 8083004:	20000ba8 	.word	0x20000ba8
 8083008:	20000ba4 	.word	0x20000ba4
 808300c:	20000ba0 	.word	0x20000ba0
 8083010:	20000b9c 	.word	0x20000b9c
 8083014:	20000b98 	.word	0x20000b98
 8083018:	20000b94 	.word	0x20000b94

0808301c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 808301c:	4b24      	ldr	r3, [pc, #144]	; (80830b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808301e:	681a      	ldr	r2, [r3, #0]
 8083020:	07d0      	lsls	r0, r2, #31
 8083022:	bf5c      	itt	pl
 8083024:	2201      	movpl	r2, #1
 8083026:	601a      	strpl	r2, [r3, #0]
 8083028:	4b22      	ldr	r3, [pc, #136]	; (80830b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808302a:	681a      	ldr	r2, [r3, #0]
 808302c:	07d1      	lsls	r1, r2, #31
 808302e:	bf5c      	itt	pl
 8083030:	2201      	movpl	r2, #1
 8083032:	601a      	strpl	r2, [r3, #0]
 8083034:	4b20      	ldr	r3, [pc, #128]	; (80830b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8083036:	681a      	ldr	r2, [r3, #0]
 8083038:	07d2      	lsls	r2, r2, #31
 808303a:	bf5c      	itt	pl
 808303c:	2201      	movpl	r2, #1
 808303e:	601a      	strpl	r2, [r3, #0]
 8083040:	4b1e      	ldr	r3, [pc, #120]	; (80830bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8083042:	681a      	ldr	r2, [r3, #0]
 8083044:	07d0      	lsls	r0, r2, #31
 8083046:	bf5c      	itt	pl
 8083048:	2201      	movpl	r2, #1
 808304a:	601a      	strpl	r2, [r3, #0]
 808304c:	4b1c      	ldr	r3, [pc, #112]	; (80830c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808304e:	681a      	ldr	r2, [r3, #0]
 8083050:	07d1      	lsls	r1, r2, #31
 8083052:	bf5c      	itt	pl
 8083054:	2201      	movpl	r2, #1
 8083056:	601a      	strpl	r2, [r3, #0]
 8083058:	4b1a      	ldr	r3, [pc, #104]	; (80830c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808305a:	681a      	ldr	r2, [r3, #0]
 808305c:	07d2      	lsls	r2, r2, #31
 808305e:	bf5c      	itt	pl
 8083060:	2201      	movpl	r2, #1
 8083062:	601a      	strpl	r2, [r3, #0]
 8083064:	4b18      	ldr	r3, [pc, #96]	; (80830c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8083066:	681a      	ldr	r2, [r3, #0]
 8083068:	07d0      	lsls	r0, r2, #31
 808306a:	bf5c      	itt	pl
 808306c:	2201      	movpl	r2, #1
 808306e:	601a      	strpl	r2, [r3, #0]
 8083070:	4b16      	ldr	r3, [pc, #88]	; (80830cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8083072:	681a      	ldr	r2, [r3, #0]
 8083074:	07d1      	lsls	r1, r2, #31
 8083076:	bf5c      	itt	pl
 8083078:	2201      	movpl	r2, #1
 808307a:	601a      	strpl	r2, [r3, #0]
 808307c:	4b14      	ldr	r3, [pc, #80]	; (80830d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808307e:	681a      	ldr	r2, [r3, #0]
 8083080:	07d2      	lsls	r2, r2, #31
 8083082:	bf5c      	itt	pl
 8083084:	2201      	movpl	r2, #1
 8083086:	601a      	strpl	r2, [r3, #0]
 8083088:	4b12      	ldr	r3, [pc, #72]	; (80830d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808308a:	681a      	ldr	r2, [r3, #0]
 808308c:	07d0      	lsls	r0, r2, #31
 808308e:	bf5c      	itt	pl
 8083090:	2201      	movpl	r2, #1
 8083092:	601a      	strpl	r2, [r3, #0]
 8083094:	4b10      	ldr	r3, [pc, #64]	; (80830d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8083096:	681a      	ldr	r2, [r3, #0]
 8083098:	07d1      	lsls	r1, r2, #31
 808309a:	bf5c      	itt	pl
 808309c:	2201      	movpl	r2, #1
 808309e:	601a      	strpl	r2, [r3, #0]
 80830a0:	4b0e      	ldr	r3, [pc, #56]	; (80830dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80830a2:	681a      	ldr	r2, [r3, #0]
 80830a4:	07d2      	lsls	r2, r2, #31
 80830a6:	bf5c      	itt	pl
 80830a8:	2201      	movpl	r2, #1
 80830aa:	601a      	strpl	r2, [r3, #0]
 80830ac:	4770      	bx	lr
 80830ae:	bf00      	nop
 80830b0:	20000be0 	.word	0x20000be0
 80830b4:	20000bdc 	.word	0x20000bdc
 80830b8:	20000bd8 	.word	0x20000bd8
 80830bc:	20000bd4 	.word	0x20000bd4
 80830c0:	20000bd0 	.word	0x20000bd0
 80830c4:	20000bcc 	.word	0x20000bcc
 80830c8:	20000bc8 	.word	0x20000bc8
 80830cc:	20000bc4 	.word	0x20000bc4
 80830d0:	20000bc0 	.word	0x20000bc0
 80830d4:	20000bbc 	.word	0x20000bbc
 80830d8:	20000bb8 	.word	0x20000bb8
 80830dc:	20000bb4 	.word	0x20000bb4

080830e0 <__aeabi_drsub>:
 80830e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80830e4:	e002      	b.n	80830ec <__adddf3>
 80830e6:	bf00      	nop

080830e8 <__aeabi_dsub>:
 80830e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080830ec <__adddf3>:
 80830ec:	b530      	push	{r4, r5, lr}
 80830ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80830f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80830f6:	ea94 0f05 	teq	r4, r5
 80830fa:	bf08      	it	eq
 80830fc:	ea90 0f02 	teqeq	r0, r2
 8083100:	bf1f      	itttt	ne
 8083102:	ea54 0c00 	orrsne.w	ip, r4, r0
 8083106:	ea55 0c02 	orrsne.w	ip, r5, r2
 808310a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808310e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083112:	f000 80e2 	beq.w	80832da <__adddf3+0x1ee>
 8083116:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808311a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808311e:	bfb8      	it	lt
 8083120:	426d      	neglt	r5, r5
 8083122:	dd0c      	ble.n	808313e <__adddf3+0x52>
 8083124:	442c      	add	r4, r5
 8083126:	ea80 0202 	eor.w	r2, r0, r2
 808312a:	ea81 0303 	eor.w	r3, r1, r3
 808312e:	ea82 0000 	eor.w	r0, r2, r0
 8083132:	ea83 0101 	eor.w	r1, r3, r1
 8083136:	ea80 0202 	eor.w	r2, r0, r2
 808313a:	ea81 0303 	eor.w	r3, r1, r3
 808313e:	2d36      	cmp	r5, #54	; 0x36
 8083140:	bf88      	it	hi
 8083142:	bd30      	pophi	{r4, r5, pc}
 8083144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808314c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083154:	d002      	beq.n	808315c <__adddf3+0x70>
 8083156:	4240      	negs	r0, r0
 8083158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808315c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083160:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083168:	d002      	beq.n	8083170 <__adddf3+0x84>
 808316a:	4252      	negs	r2, r2
 808316c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083170:	ea94 0f05 	teq	r4, r5
 8083174:	f000 80a7 	beq.w	80832c6 <__adddf3+0x1da>
 8083178:	f1a4 0401 	sub.w	r4, r4, #1
 808317c:	f1d5 0e20 	rsbs	lr, r5, #32
 8083180:	db0d      	blt.n	808319e <__adddf3+0xb2>
 8083182:	fa02 fc0e 	lsl.w	ip, r2, lr
 8083186:	fa22 f205 	lsr.w	r2, r2, r5
 808318a:	1880      	adds	r0, r0, r2
 808318c:	f141 0100 	adc.w	r1, r1, #0
 8083190:	fa03 f20e 	lsl.w	r2, r3, lr
 8083194:	1880      	adds	r0, r0, r2
 8083196:	fa43 f305 	asr.w	r3, r3, r5
 808319a:	4159      	adcs	r1, r3
 808319c:	e00e      	b.n	80831bc <__adddf3+0xd0>
 808319e:	f1a5 0520 	sub.w	r5, r5, #32
 80831a2:	f10e 0e20 	add.w	lr, lr, #32
 80831a6:	2a01      	cmp	r2, #1
 80831a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80831ac:	bf28      	it	cs
 80831ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80831b2:	fa43 f305 	asr.w	r3, r3, r5
 80831b6:	18c0      	adds	r0, r0, r3
 80831b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80831bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80831c0:	d507      	bpl.n	80831d2 <__adddf3+0xe6>
 80831c2:	f04f 0e00 	mov.w	lr, #0
 80831c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80831ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80831ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80831d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80831d6:	d31b      	bcc.n	8083210 <__adddf3+0x124>
 80831d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80831dc:	d30c      	bcc.n	80831f8 <__adddf3+0x10c>
 80831de:	0849      	lsrs	r1, r1, #1
 80831e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80831e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80831e8:	f104 0401 	add.w	r4, r4, #1
 80831ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80831f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80831f4:	f080 809a 	bcs.w	808332c <__adddf3+0x240>
 80831f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80831fc:	bf08      	it	eq
 80831fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083202:	f150 0000 	adcs.w	r0, r0, #0
 8083206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808320a:	ea41 0105 	orr.w	r1, r1, r5
 808320e:	bd30      	pop	{r4, r5, pc}
 8083210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8083214:	4140      	adcs	r0, r0
 8083216:	eb41 0101 	adc.w	r1, r1, r1
 808321a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808321e:	f1a4 0401 	sub.w	r4, r4, #1
 8083222:	d1e9      	bne.n	80831f8 <__adddf3+0x10c>
 8083224:	f091 0f00 	teq	r1, #0
 8083228:	bf04      	itt	eq
 808322a:	4601      	moveq	r1, r0
 808322c:	2000      	moveq	r0, #0
 808322e:	fab1 f381 	clz	r3, r1
 8083232:	bf08      	it	eq
 8083234:	3320      	addeq	r3, #32
 8083236:	f1a3 030b 	sub.w	r3, r3, #11
 808323a:	f1b3 0220 	subs.w	r2, r3, #32
 808323e:	da0c      	bge.n	808325a <__adddf3+0x16e>
 8083240:	320c      	adds	r2, #12
 8083242:	dd08      	ble.n	8083256 <__adddf3+0x16a>
 8083244:	f102 0c14 	add.w	ip, r2, #20
 8083248:	f1c2 020c 	rsb	r2, r2, #12
 808324c:	fa01 f00c 	lsl.w	r0, r1, ip
 8083250:	fa21 f102 	lsr.w	r1, r1, r2
 8083254:	e00c      	b.n	8083270 <__adddf3+0x184>
 8083256:	f102 0214 	add.w	r2, r2, #20
 808325a:	bfd8      	it	le
 808325c:	f1c2 0c20 	rsble	ip, r2, #32
 8083260:	fa01 f102 	lsl.w	r1, r1, r2
 8083264:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083268:	bfdc      	itt	le
 808326a:	ea41 010c 	orrle.w	r1, r1, ip
 808326e:	4090      	lslle	r0, r2
 8083270:	1ae4      	subs	r4, r4, r3
 8083272:	bfa2      	ittt	ge
 8083274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083278:	4329      	orrge	r1, r5
 808327a:	bd30      	popge	{r4, r5, pc}
 808327c:	ea6f 0404 	mvn.w	r4, r4
 8083280:	3c1f      	subs	r4, #31
 8083282:	da1c      	bge.n	80832be <__adddf3+0x1d2>
 8083284:	340c      	adds	r4, #12
 8083286:	dc0e      	bgt.n	80832a6 <__adddf3+0x1ba>
 8083288:	f104 0414 	add.w	r4, r4, #20
 808328c:	f1c4 0220 	rsb	r2, r4, #32
 8083290:	fa20 f004 	lsr.w	r0, r0, r4
 8083294:	fa01 f302 	lsl.w	r3, r1, r2
 8083298:	ea40 0003 	orr.w	r0, r0, r3
 808329c:	fa21 f304 	lsr.w	r3, r1, r4
 80832a0:	ea45 0103 	orr.w	r1, r5, r3
 80832a4:	bd30      	pop	{r4, r5, pc}
 80832a6:	f1c4 040c 	rsb	r4, r4, #12
 80832aa:	f1c4 0220 	rsb	r2, r4, #32
 80832ae:	fa20 f002 	lsr.w	r0, r0, r2
 80832b2:	fa01 f304 	lsl.w	r3, r1, r4
 80832b6:	ea40 0003 	orr.w	r0, r0, r3
 80832ba:	4629      	mov	r1, r5
 80832bc:	bd30      	pop	{r4, r5, pc}
 80832be:	fa21 f004 	lsr.w	r0, r1, r4
 80832c2:	4629      	mov	r1, r5
 80832c4:	bd30      	pop	{r4, r5, pc}
 80832c6:	f094 0f00 	teq	r4, #0
 80832ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80832ce:	bf06      	itte	eq
 80832d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80832d4:	3401      	addeq	r4, #1
 80832d6:	3d01      	subne	r5, #1
 80832d8:	e74e      	b.n	8083178 <__adddf3+0x8c>
 80832da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80832de:	bf18      	it	ne
 80832e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80832e4:	d029      	beq.n	808333a <__adddf3+0x24e>
 80832e6:	ea94 0f05 	teq	r4, r5
 80832ea:	bf08      	it	eq
 80832ec:	ea90 0f02 	teqeq	r0, r2
 80832f0:	d005      	beq.n	80832fe <__adddf3+0x212>
 80832f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80832f6:	bf04      	itt	eq
 80832f8:	4619      	moveq	r1, r3
 80832fa:	4610      	moveq	r0, r2
 80832fc:	bd30      	pop	{r4, r5, pc}
 80832fe:	ea91 0f03 	teq	r1, r3
 8083302:	bf1e      	ittt	ne
 8083304:	2100      	movne	r1, #0
 8083306:	2000      	movne	r0, #0
 8083308:	bd30      	popne	{r4, r5, pc}
 808330a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808330e:	d105      	bne.n	808331c <__adddf3+0x230>
 8083310:	0040      	lsls	r0, r0, #1
 8083312:	4149      	adcs	r1, r1
 8083314:	bf28      	it	cs
 8083316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808331a:	bd30      	pop	{r4, r5, pc}
 808331c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8083320:	bf3c      	itt	cc
 8083322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083326:	bd30      	popcc	{r4, r5, pc}
 8083328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808332c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083334:	f04f 0000 	mov.w	r0, #0
 8083338:	bd30      	pop	{r4, r5, pc}
 808333a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808333e:	bf1a      	itte	ne
 8083340:	4619      	movne	r1, r3
 8083342:	4610      	movne	r0, r2
 8083344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083348:	bf1c      	itt	ne
 808334a:	460b      	movne	r3, r1
 808334c:	4602      	movne	r2, r0
 808334e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083352:	bf06      	itte	eq
 8083354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083358:	ea91 0f03 	teqeq	r1, r3
 808335c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083360:	bd30      	pop	{r4, r5, pc}
 8083362:	bf00      	nop

08083364 <__aeabi_ui2d>:
 8083364:	f090 0f00 	teq	r0, #0
 8083368:	bf04      	itt	eq
 808336a:	2100      	moveq	r1, #0
 808336c:	4770      	bxeq	lr
 808336e:	b530      	push	{r4, r5, lr}
 8083370:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083374:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083378:	f04f 0500 	mov.w	r5, #0
 808337c:	f04f 0100 	mov.w	r1, #0
 8083380:	e750      	b.n	8083224 <__adddf3+0x138>
 8083382:	bf00      	nop

08083384 <__aeabi_i2d>:
 8083384:	f090 0f00 	teq	r0, #0
 8083388:	bf04      	itt	eq
 808338a:	2100      	moveq	r1, #0
 808338c:	4770      	bxeq	lr
 808338e:	b530      	push	{r4, r5, lr}
 8083390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808339c:	bf48      	it	mi
 808339e:	4240      	negmi	r0, r0
 80833a0:	f04f 0100 	mov.w	r1, #0
 80833a4:	e73e      	b.n	8083224 <__adddf3+0x138>
 80833a6:	bf00      	nop

080833a8 <__aeabi_f2d>:
 80833a8:	0042      	lsls	r2, r0, #1
 80833aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80833ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80833b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80833b6:	bf1f      	itttt	ne
 80833b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80833bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80833c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80833c4:	4770      	bxne	lr
 80833c6:	f092 0f00 	teq	r2, #0
 80833ca:	bf14      	ite	ne
 80833cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80833d0:	4770      	bxeq	lr
 80833d2:	b530      	push	{r4, r5, lr}
 80833d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80833d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80833dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80833e0:	e720      	b.n	8083224 <__adddf3+0x138>
 80833e2:	bf00      	nop

080833e4 <__aeabi_ul2d>:
 80833e4:	ea50 0201 	orrs.w	r2, r0, r1
 80833e8:	bf08      	it	eq
 80833ea:	4770      	bxeq	lr
 80833ec:	b530      	push	{r4, r5, lr}
 80833ee:	f04f 0500 	mov.w	r5, #0
 80833f2:	e00a      	b.n	808340a <__aeabi_l2d+0x16>

080833f4 <__aeabi_l2d>:
 80833f4:	ea50 0201 	orrs.w	r2, r0, r1
 80833f8:	bf08      	it	eq
 80833fa:	4770      	bxeq	lr
 80833fc:	b530      	push	{r4, r5, lr}
 80833fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083402:	d502      	bpl.n	808340a <__aeabi_l2d+0x16>
 8083404:	4240      	negs	r0, r0
 8083406:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808340a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808340e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083412:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083416:	f43f aedc 	beq.w	80831d2 <__adddf3+0xe6>
 808341a:	f04f 0203 	mov.w	r2, #3
 808341e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083422:	bf18      	it	ne
 8083424:	3203      	addne	r2, #3
 8083426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808342a:	bf18      	it	ne
 808342c:	3203      	addne	r2, #3
 808342e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083432:	f1c2 0320 	rsb	r3, r2, #32
 8083436:	fa00 fc03 	lsl.w	ip, r0, r3
 808343a:	fa20 f002 	lsr.w	r0, r0, r2
 808343e:	fa01 fe03 	lsl.w	lr, r1, r3
 8083442:	ea40 000e 	orr.w	r0, r0, lr
 8083446:	fa21 f102 	lsr.w	r1, r1, r2
 808344a:	4414      	add	r4, r2
 808344c:	e6c1      	b.n	80831d2 <__adddf3+0xe6>
 808344e:	bf00      	nop

08083450 <__aeabi_dmul>:
 8083450:	b570      	push	{r4, r5, r6, lr}
 8083452:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083456:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808345a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808345e:	bf1d      	ittte	ne
 8083460:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083464:	ea94 0f0c 	teqne	r4, ip
 8083468:	ea95 0f0c 	teqne	r5, ip
 808346c:	f000 f8de 	bleq	808362c <__aeabi_dmul+0x1dc>
 8083470:	442c      	add	r4, r5
 8083472:	ea81 0603 	eor.w	r6, r1, r3
 8083476:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808347a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808347e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083482:	bf18      	it	ne
 8083484:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083488:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808348c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083490:	d038      	beq.n	8083504 <__aeabi_dmul+0xb4>
 8083492:	fba0 ce02 	umull	ip, lr, r0, r2
 8083496:	f04f 0500 	mov.w	r5, #0
 808349a:	fbe1 e502 	umlal	lr, r5, r1, r2
 808349e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80834a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80834a6:	f04f 0600 	mov.w	r6, #0
 80834aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80834ae:	f09c 0f00 	teq	ip, #0
 80834b2:	bf18      	it	ne
 80834b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80834b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80834bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80834c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80834c4:	d204      	bcs.n	80834d0 <__aeabi_dmul+0x80>
 80834c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80834ca:	416d      	adcs	r5, r5
 80834cc:	eb46 0606 	adc.w	r6, r6, r6
 80834d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80834d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80834d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80834dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80834e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80834e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80834e8:	bf88      	it	hi
 80834ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80834ee:	d81e      	bhi.n	808352e <__aeabi_dmul+0xde>
 80834f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80834f4:	bf08      	it	eq
 80834f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80834fa:	f150 0000 	adcs.w	r0, r0, #0
 80834fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083502:	bd70      	pop	{r4, r5, r6, pc}
 8083504:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083508:	ea46 0101 	orr.w	r1, r6, r1
 808350c:	ea40 0002 	orr.w	r0, r0, r2
 8083510:	ea81 0103 	eor.w	r1, r1, r3
 8083514:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083518:	bfc2      	ittt	gt
 808351a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808351e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083522:	bd70      	popgt	{r4, r5, r6, pc}
 8083524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083528:	f04f 0e00 	mov.w	lr, #0
 808352c:	3c01      	subs	r4, #1
 808352e:	f300 80ab 	bgt.w	8083688 <__aeabi_dmul+0x238>
 8083532:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083536:	bfde      	ittt	le
 8083538:	2000      	movle	r0, #0
 808353a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808353e:	bd70      	pople	{r4, r5, r6, pc}
 8083540:	f1c4 0400 	rsb	r4, r4, #0
 8083544:	3c20      	subs	r4, #32
 8083546:	da35      	bge.n	80835b4 <__aeabi_dmul+0x164>
 8083548:	340c      	adds	r4, #12
 808354a:	dc1b      	bgt.n	8083584 <__aeabi_dmul+0x134>
 808354c:	f104 0414 	add.w	r4, r4, #20
 8083550:	f1c4 0520 	rsb	r5, r4, #32
 8083554:	fa00 f305 	lsl.w	r3, r0, r5
 8083558:	fa20 f004 	lsr.w	r0, r0, r4
 808355c:	fa01 f205 	lsl.w	r2, r1, r5
 8083560:	ea40 0002 	orr.w	r0, r0, r2
 8083564:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808356c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083570:	fa21 f604 	lsr.w	r6, r1, r4
 8083574:	eb42 0106 	adc.w	r1, r2, r6
 8083578:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808357c:	bf08      	it	eq
 808357e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083582:	bd70      	pop	{r4, r5, r6, pc}
 8083584:	f1c4 040c 	rsb	r4, r4, #12
 8083588:	f1c4 0520 	rsb	r5, r4, #32
 808358c:	fa00 f304 	lsl.w	r3, r0, r4
 8083590:	fa20 f005 	lsr.w	r0, r0, r5
 8083594:	fa01 f204 	lsl.w	r2, r1, r4
 8083598:	ea40 0002 	orr.w	r0, r0, r2
 808359c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80835a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80835a4:	f141 0100 	adc.w	r1, r1, #0
 80835a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80835ac:	bf08      	it	eq
 80835ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80835b2:	bd70      	pop	{r4, r5, r6, pc}
 80835b4:	f1c4 0520 	rsb	r5, r4, #32
 80835b8:	fa00 f205 	lsl.w	r2, r0, r5
 80835bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80835c0:	fa20 f304 	lsr.w	r3, r0, r4
 80835c4:	fa01 f205 	lsl.w	r2, r1, r5
 80835c8:	ea43 0302 	orr.w	r3, r3, r2
 80835cc:	fa21 f004 	lsr.w	r0, r1, r4
 80835d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80835d4:	fa21 f204 	lsr.w	r2, r1, r4
 80835d8:	ea20 0002 	bic.w	r0, r0, r2
 80835dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80835e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80835e4:	bf08      	it	eq
 80835e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80835ea:	bd70      	pop	{r4, r5, r6, pc}
 80835ec:	f094 0f00 	teq	r4, #0
 80835f0:	d10f      	bne.n	8083612 <__aeabi_dmul+0x1c2>
 80835f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80835f6:	0040      	lsls	r0, r0, #1
 80835f8:	eb41 0101 	adc.w	r1, r1, r1
 80835fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083600:	bf08      	it	eq
 8083602:	3c01      	subeq	r4, #1
 8083604:	d0f7      	beq.n	80835f6 <__aeabi_dmul+0x1a6>
 8083606:	ea41 0106 	orr.w	r1, r1, r6
 808360a:	f095 0f00 	teq	r5, #0
 808360e:	bf18      	it	ne
 8083610:	4770      	bxne	lr
 8083612:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083616:	0052      	lsls	r2, r2, #1
 8083618:	eb43 0303 	adc.w	r3, r3, r3
 808361c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083620:	bf08      	it	eq
 8083622:	3d01      	subeq	r5, #1
 8083624:	d0f7      	beq.n	8083616 <__aeabi_dmul+0x1c6>
 8083626:	ea43 0306 	orr.w	r3, r3, r6
 808362a:	4770      	bx	lr
 808362c:	ea94 0f0c 	teq	r4, ip
 8083630:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083634:	bf18      	it	ne
 8083636:	ea95 0f0c 	teqne	r5, ip
 808363a:	d00c      	beq.n	8083656 <__aeabi_dmul+0x206>
 808363c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083640:	bf18      	it	ne
 8083642:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083646:	d1d1      	bne.n	80835ec <__aeabi_dmul+0x19c>
 8083648:	ea81 0103 	eor.w	r1, r1, r3
 808364c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083650:	f04f 0000 	mov.w	r0, #0
 8083654:	bd70      	pop	{r4, r5, r6, pc}
 8083656:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808365a:	bf06      	itte	eq
 808365c:	4610      	moveq	r0, r2
 808365e:	4619      	moveq	r1, r3
 8083660:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083664:	d019      	beq.n	808369a <__aeabi_dmul+0x24a>
 8083666:	ea94 0f0c 	teq	r4, ip
 808366a:	d102      	bne.n	8083672 <__aeabi_dmul+0x222>
 808366c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083670:	d113      	bne.n	808369a <__aeabi_dmul+0x24a>
 8083672:	ea95 0f0c 	teq	r5, ip
 8083676:	d105      	bne.n	8083684 <__aeabi_dmul+0x234>
 8083678:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808367c:	bf1c      	itt	ne
 808367e:	4610      	movne	r0, r2
 8083680:	4619      	movne	r1, r3
 8083682:	d10a      	bne.n	808369a <__aeabi_dmul+0x24a>
 8083684:	ea81 0103 	eor.w	r1, r1, r3
 8083688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808368c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083694:	f04f 0000 	mov.w	r0, #0
 8083698:	bd70      	pop	{r4, r5, r6, pc}
 808369a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808369e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80836a2:	bd70      	pop	{r4, r5, r6, pc}

080836a4 <__aeabi_ddiv>:
 80836a4:	b570      	push	{r4, r5, r6, lr}
 80836a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80836aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80836ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80836b2:	bf1d      	ittte	ne
 80836b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80836b8:	ea94 0f0c 	teqne	r4, ip
 80836bc:	ea95 0f0c 	teqne	r5, ip
 80836c0:	f000 f8a7 	bleq	8083812 <__aeabi_ddiv+0x16e>
 80836c4:	eba4 0405 	sub.w	r4, r4, r5
 80836c8:	ea81 0e03 	eor.w	lr, r1, r3
 80836cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80836d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80836d4:	f000 8088 	beq.w	80837e8 <__aeabi_ddiv+0x144>
 80836d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80836dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80836e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80836e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80836e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80836ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80836f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80836f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80836f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80836fc:	429d      	cmp	r5, r3
 80836fe:	bf08      	it	eq
 8083700:	4296      	cmpeq	r6, r2
 8083702:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083706:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808370a:	d202      	bcs.n	8083712 <__aeabi_ddiv+0x6e>
 808370c:	085b      	lsrs	r3, r3, #1
 808370e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083712:	1ab6      	subs	r6, r6, r2
 8083714:	eb65 0503 	sbc.w	r5, r5, r3
 8083718:	085b      	lsrs	r3, r3, #1
 808371a:	ea4f 0232 	mov.w	r2, r2, rrx
 808371e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083722:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083726:	ebb6 0e02 	subs.w	lr, r6, r2
 808372a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808372e:	bf22      	ittt	cs
 8083730:	1ab6      	subcs	r6, r6, r2
 8083732:	4675      	movcs	r5, lr
 8083734:	ea40 000c 	orrcs.w	r0, r0, ip
 8083738:	085b      	lsrs	r3, r3, #1
 808373a:	ea4f 0232 	mov.w	r2, r2, rrx
 808373e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083746:	bf22      	ittt	cs
 8083748:	1ab6      	subcs	r6, r6, r2
 808374a:	4675      	movcs	r5, lr
 808374c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083750:	085b      	lsrs	r3, r3, #1
 8083752:	ea4f 0232 	mov.w	r2, r2, rrx
 8083756:	ebb6 0e02 	subs.w	lr, r6, r2
 808375a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808375e:	bf22      	ittt	cs
 8083760:	1ab6      	subcs	r6, r6, r2
 8083762:	4675      	movcs	r5, lr
 8083764:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083768:	085b      	lsrs	r3, r3, #1
 808376a:	ea4f 0232 	mov.w	r2, r2, rrx
 808376e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083776:	bf22      	ittt	cs
 8083778:	1ab6      	subcs	r6, r6, r2
 808377a:	4675      	movcs	r5, lr
 808377c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083780:	ea55 0e06 	orrs.w	lr, r5, r6
 8083784:	d018      	beq.n	80837b8 <__aeabi_ddiv+0x114>
 8083786:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808378a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808378e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083792:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083796:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808379a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808379e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80837a2:	d1c0      	bne.n	8083726 <__aeabi_ddiv+0x82>
 80837a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80837a8:	d10b      	bne.n	80837c2 <__aeabi_ddiv+0x11e>
 80837aa:	ea41 0100 	orr.w	r1, r1, r0
 80837ae:	f04f 0000 	mov.w	r0, #0
 80837b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80837b6:	e7b6      	b.n	8083726 <__aeabi_ddiv+0x82>
 80837b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80837bc:	bf04      	itt	eq
 80837be:	4301      	orreq	r1, r0
 80837c0:	2000      	moveq	r0, #0
 80837c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80837c6:	bf88      	it	hi
 80837c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80837cc:	f63f aeaf 	bhi.w	808352e <__aeabi_dmul+0xde>
 80837d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80837d4:	bf04      	itt	eq
 80837d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80837da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80837de:	f150 0000 	adcs.w	r0, r0, #0
 80837e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80837e6:	bd70      	pop	{r4, r5, r6, pc}
 80837e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80837ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80837f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80837f4:	bfc2      	ittt	gt
 80837f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80837fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80837fe:	bd70      	popgt	{r4, r5, r6, pc}
 8083800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083804:	f04f 0e00 	mov.w	lr, #0
 8083808:	3c01      	subs	r4, #1
 808380a:	e690      	b.n	808352e <__aeabi_dmul+0xde>
 808380c:	ea45 0e06 	orr.w	lr, r5, r6
 8083810:	e68d      	b.n	808352e <__aeabi_dmul+0xde>
 8083812:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083816:	ea94 0f0c 	teq	r4, ip
 808381a:	bf08      	it	eq
 808381c:	ea95 0f0c 	teqeq	r5, ip
 8083820:	f43f af3b 	beq.w	808369a <__aeabi_dmul+0x24a>
 8083824:	ea94 0f0c 	teq	r4, ip
 8083828:	d10a      	bne.n	8083840 <__aeabi_ddiv+0x19c>
 808382a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808382e:	f47f af34 	bne.w	808369a <__aeabi_dmul+0x24a>
 8083832:	ea95 0f0c 	teq	r5, ip
 8083836:	f47f af25 	bne.w	8083684 <__aeabi_dmul+0x234>
 808383a:	4610      	mov	r0, r2
 808383c:	4619      	mov	r1, r3
 808383e:	e72c      	b.n	808369a <__aeabi_dmul+0x24a>
 8083840:	ea95 0f0c 	teq	r5, ip
 8083844:	d106      	bne.n	8083854 <__aeabi_ddiv+0x1b0>
 8083846:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808384a:	f43f aefd 	beq.w	8083648 <__aeabi_dmul+0x1f8>
 808384e:	4610      	mov	r0, r2
 8083850:	4619      	mov	r1, r3
 8083852:	e722      	b.n	808369a <__aeabi_dmul+0x24a>
 8083854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083858:	bf18      	it	ne
 808385a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808385e:	f47f aec5 	bne.w	80835ec <__aeabi_dmul+0x19c>
 8083862:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083866:	f47f af0d 	bne.w	8083684 <__aeabi_dmul+0x234>
 808386a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808386e:	f47f aeeb 	bne.w	8083648 <__aeabi_dmul+0x1f8>
 8083872:	e712      	b.n	808369a <__aeabi_dmul+0x24a>

08083874 <__aeabi_d2f>:
 8083874:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083878:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808387c:	bf24      	itt	cs
 808387e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083882:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083886:	d90d      	bls.n	80838a4 <__aeabi_d2f+0x30>
 8083888:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808388c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083890:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083894:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083898:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808389c:	bf08      	it	eq
 808389e:	f020 0001 	biceq.w	r0, r0, #1
 80838a2:	4770      	bx	lr
 80838a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80838a8:	d121      	bne.n	80838ee <__aeabi_d2f+0x7a>
 80838aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80838ae:	bfbc      	itt	lt
 80838b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80838b4:	4770      	bxlt	lr
 80838b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80838ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80838be:	f1c2 0218 	rsb	r2, r2, #24
 80838c2:	f1c2 0c20 	rsb	ip, r2, #32
 80838c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80838ca:	fa20 f002 	lsr.w	r0, r0, r2
 80838ce:	bf18      	it	ne
 80838d0:	f040 0001 	orrne.w	r0, r0, #1
 80838d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80838d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80838dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80838e0:	ea40 000c 	orr.w	r0, r0, ip
 80838e4:	fa23 f302 	lsr.w	r3, r3, r2
 80838e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80838ec:	e7cc      	b.n	8083888 <__aeabi_d2f+0x14>
 80838ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80838f2:	d107      	bne.n	8083904 <__aeabi_d2f+0x90>
 80838f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80838f8:	bf1e      	ittt	ne
 80838fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80838fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8083902:	4770      	bxne	lr
 8083904:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8083908:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808390c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083910:	4770      	bx	lr
 8083912:	bf00      	nop

08083914 <__aeabi_frsub>:
 8083914:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8083918:	e002      	b.n	8083920 <__addsf3>
 808391a:	bf00      	nop

0808391c <__aeabi_fsub>:
 808391c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08083920 <__addsf3>:
 8083920:	0042      	lsls	r2, r0, #1
 8083922:	bf1f      	itttt	ne
 8083924:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8083928:	ea92 0f03 	teqne	r2, r3
 808392c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8083930:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083934:	d06a      	beq.n	8083a0c <__addsf3+0xec>
 8083936:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808393a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808393e:	bfc1      	itttt	gt
 8083940:	18d2      	addgt	r2, r2, r3
 8083942:	4041      	eorgt	r1, r0
 8083944:	4048      	eorgt	r0, r1
 8083946:	4041      	eorgt	r1, r0
 8083948:	bfb8      	it	lt
 808394a:	425b      	neglt	r3, r3
 808394c:	2b19      	cmp	r3, #25
 808394e:	bf88      	it	hi
 8083950:	4770      	bxhi	lr
 8083952:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083956:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808395a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808395e:	bf18      	it	ne
 8083960:	4240      	negne	r0, r0
 8083962:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083966:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808396a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808396e:	bf18      	it	ne
 8083970:	4249      	negne	r1, r1
 8083972:	ea92 0f03 	teq	r2, r3
 8083976:	d03f      	beq.n	80839f8 <__addsf3+0xd8>
 8083978:	f1a2 0201 	sub.w	r2, r2, #1
 808397c:	fa41 fc03 	asr.w	ip, r1, r3
 8083980:	eb10 000c 	adds.w	r0, r0, ip
 8083984:	f1c3 0320 	rsb	r3, r3, #32
 8083988:	fa01 f103 	lsl.w	r1, r1, r3
 808398c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083990:	d502      	bpl.n	8083998 <__addsf3+0x78>
 8083992:	4249      	negs	r1, r1
 8083994:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083998:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808399c:	d313      	bcc.n	80839c6 <__addsf3+0xa6>
 808399e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80839a2:	d306      	bcc.n	80839b2 <__addsf3+0x92>
 80839a4:	0840      	lsrs	r0, r0, #1
 80839a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80839aa:	f102 0201 	add.w	r2, r2, #1
 80839ae:	2afe      	cmp	r2, #254	; 0xfe
 80839b0:	d251      	bcs.n	8083a56 <__addsf3+0x136>
 80839b2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80839b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80839ba:	bf08      	it	eq
 80839bc:	f020 0001 	biceq.w	r0, r0, #1
 80839c0:	ea40 0003 	orr.w	r0, r0, r3
 80839c4:	4770      	bx	lr
 80839c6:	0049      	lsls	r1, r1, #1
 80839c8:	eb40 0000 	adc.w	r0, r0, r0
 80839cc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80839d0:	f1a2 0201 	sub.w	r2, r2, #1
 80839d4:	d1ed      	bne.n	80839b2 <__addsf3+0x92>
 80839d6:	fab0 fc80 	clz	ip, r0
 80839da:	f1ac 0c08 	sub.w	ip, ip, #8
 80839de:	ebb2 020c 	subs.w	r2, r2, ip
 80839e2:	fa00 f00c 	lsl.w	r0, r0, ip
 80839e6:	bfaa      	itet	ge
 80839e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80839ec:	4252      	neglt	r2, r2
 80839ee:	4318      	orrge	r0, r3
 80839f0:	bfbc      	itt	lt
 80839f2:	40d0      	lsrlt	r0, r2
 80839f4:	4318      	orrlt	r0, r3
 80839f6:	4770      	bx	lr
 80839f8:	f092 0f00 	teq	r2, #0
 80839fc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8083a00:	bf06      	itte	eq
 8083a02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8083a06:	3201      	addeq	r2, #1
 8083a08:	3b01      	subne	r3, #1
 8083a0a:	e7b5      	b.n	8083978 <__addsf3+0x58>
 8083a0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083a10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083a14:	bf18      	it	ne
 8083a16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083a1a:	d021      	beq.n	8083a60 <__addsf3+0x140>
 8083a1c:	ea92 0f03 	teq	r2, r3
 8083a20:	d004      	beq.n	8083a2c <__addsf3+0x10c>
 8083a22:	f092 0f00 	teq	r2, #0
 8083a26:	bf08      	it	eq
 8083a28:	4608      	moveq	r0, r1
 8083a2a:	4770      	bx	lr
 8083a2c:	ea90 0f01 	teq	r0, r1
 8083a30:	bf1c      	itt	ne
 8083a32:	2000      	movne	r0, #0
 8083a34:	4770      	bxne	lr
 8083a36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083a3a:	d104      	bne.n	8083a46 <__addsf3+0x126>
 8083a3c:	0040      	lsls	r0, r0, #1
 8083a3e:	bf28      	it	cs
 8083a40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083a44:	4770      	bx	lr
 8083a46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083a4a:	bf3c      	itt	cc
 8083a4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8083a50:	4770      	bxcc	lr
 8083a52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083a56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083a5e:	4770      	bx	lr
 8083a60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083a64:	bf16      	itet	ne
 8083a66:	4608      	movne	r0, r1
 8083a68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083a6c:	4601      	movne	r1, r0
 8083a6e:	0242      	lsls	r2, r0, #9
 8083a70:	bf06      	itte	eq
 8083a72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083a76:	ea90 0f01 	teqeq	r0, r1
 8083a7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083a7e:	4770      	bx	lr

08083a80 <__aeabi_ui2f>:
 8083a80:	f04f 0300 	mov.w	r3, #0
 8083a84:	e004      	b.n	8083a90 <__aeabi_i2f+0x8>
 8083a86:	bf00      	nop

08083a88 <__aeabi_i2f>:
 8083a88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083a8c:	bf48      	it	mi
 8083a8e:	4240      	negmi	r0, r0
 8083a90:	ea5f 0c00 	movs.w	ip, r0
 8083a94:	bf08      	it	eq
 8083a96:	4770      	bxeq	lr
 8083a98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083a9c:	4601      	mov	r1, r0
 8083a9e:	f04f 0000 	mov.w	r0, #0
 8083aa2:	e01c      	b.n	8083ade <__aeabi_l2f+0x2a>

08083aa4 <__aeabi_ul2f>:
 8083aa4:	ea50 0201 	orrs.w	r2, r0, r1
 8083aa8:	bf08      	it	eq
 8083aaa:	4770      	bxeq	lr
 8083aac:	f04f 0300 	mov.w	r3, #0
 8083ab0:	e00a      	b.n	8083ac8 <__aeabi_l2f+0x14>
 8083ab2:	bf00      	nop

08083ab4 <__aeabi_l2f>:
 8083ab4:	ea50 0201 	orrs.w	r2, r0, r1
 8083ab8:	bf08      	it	eq
 8083aba:	4770      	bxeq	lr
 8083abc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083ac0:	d502      	bpl.n	8083ac8 <__aeabi_l2f+0x14>
 8083ac2:	4240      	negs	r0, r0
 8083ac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083ac8:	ea5f 0c01 	movs.w	ip, r1
 8083acc:	bf02      	ittt	eq
 8083ace:	4684      	moveq	ip, r0
 8083ad0:	4601      	moveq	r1, r0
 8083ad2:	2000      	moveq	r0, #0
 8083ad4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083ad8:	bf08      	it	eq
 8083ada:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083ade:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083ae2:	fabc f28c 	clz	r2, ip
 8083ae6:	3a08      	subs	r2, #8
 8083ae8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083aec:	db10      	blt.n	8083b10 <__aeabi_l2f+0x5c>
 8083aee:	fa01 fc02 	lsl.w	ip, r1, r2
 8083af2:	4463      	add	r3, ip
 8083af4:	fa00 fc02 	lsl.w	ip, r0, r2
 8083af8:	f1c2 0220 	rsb	r2, r2, #32
 8083afc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083b00:	fa20 f202 	lsr.w	r2, r0, r2
 8083b04:	eb43 0002 	adc.w	r0, r3, r2
 8083b08:	bf08      	it	eq
 8083b0a:	f020 0001 	biceq.w	r0, r0, #1
 8083b0e:	4770      	bx	lr
 8083b10:	f102 0220 	add.w	r2, r2, #32
 8083b14:	fa01 fc02 	lsl.w	ip, r1, r2
 8083b18:	f1c2 0220 	rsb	r2, r2, #32
 8083b1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8083b20:	fa21 f202 	lsr.w	r2, r1, r2
 8083b24:	eb43 0002 	adc.w	r0, r3, r2
 8083b28:	bf08      	it	eq
 8083b2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083b2e:	4770      	bx	lr

08083b30 <__aeabi_fmul>:
 8083b30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083b34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083b38:	bf1e      	ittt	ne
 8083b3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083b3e:	ea92 0f0c 	teqne	r2, ip
 8083b42:	ea93 0f0c 	teqne	r3, ip
 8083b46:	d06f      	beq.n	8083c28 <__aeabi_fmul+0xf8>
 8083b48:	441a      	add	r2, r3
 8083b4a:	ea80 0c01 	eor.w	ip, r0, r1
 8083b4e:	0240      	lsls	r0, r0, #9
 8083b50:	bf18      	it	ne
 8083b52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8083b56:	d01e      	beq.n	8083b96 <__aeabi_fmul+0x66>
 8083b58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8083b5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8083b60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8083b64:	fba0 3101 	umull	r3, r1, r0, r1
 8083b68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083b6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8083b70:	bf3e      	ittt	cc
 8083b72:	0049      	lslcc	r1, r1, #1
 8083b74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8083b78:	005b      	lslcc	r3, r3, #1
 8083b7a:	ea40 0001 	orr.w	r0, r0, r1
 8083b7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8083b82:	2afd      	cmp	r2, #253	; 0xfd
 8083b84:	d81d      	bhi.n	8083bc2 <__aeabi_fmul+0x92>
 8083b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8083b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083b8e:	bf08      	it	eq
 8083b90:	f020 0001 	biceq.w	r0, r0, #1
 8083b94:	4770      	bx	lr
 8083b96:	f090 0f00 	teq	r0, #0
 8083b9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083b9e:	bf08      	it	eq
 8083ba0:	0249      	lsleq	r1, r1, #9
 8083ba2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083ba6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8083baa:	3a7f      	subs	r2, #127	; 0x7f
 8083bac:	bfc2      	ittt	gt
 8083bae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083bb2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083bb6:	4770      	bxgt	lr
 8083bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083bbc:	f04f 0300 	mov.w	r3, #0
 8083bc0:	3a01      	subs	r2, #1
 8083bc2:	dc5d      	bgt.n	8083c80 <__aeabi_fmul+0x150>
 8083bc4:	f112 0f19 	cmn.w	r2, #25
 8083bc8:	bfdc      	itt	le
 8083bca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8083bce:	4770      	bxle	lr
 8083bd0:	f1c2 0200 	rsb	r2, r2, #0
 8083bd4:	0041      	lsls	r1, r0, #1
 8083bd6:	fa21 f102 	lsr.w	r1, r1, r2
 8083bda:	f1c2 0220 	rsb	r2, r2, #32
 8083bde:	fa00 fc02 	lsl.w	ip, r0, r2
 8083be2:	ea5f 0031 	movs.w	r0, r1, rrx
 8083be6:	f140 0000 	adc.w	r0, r0, #0
 8083bea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8083bee:	bf08      	it	eq
 8083bf0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083bf4:	4770      	bx	lr
 8083bf6:	f092 0f00 	teq	r2, #0
 8083bfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083bfe:	bf02      	ittt	eq
 8083c00:	0040      	lsleq	r0, r0, #1
 8083c02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083c06:	3a01      	subeq	r2, #1
 8083c08:	d0f9      	beq.n	8083bfe <__aeabi_fmul+0xce>
 8083c0a:	ea40 000c 	orr.w	r0, r0, ip
 8083c0e:	f093 0f00 	teq	r3, #0
 8083c12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083c16:	bf02      	ittt	eq
 8083c18:	0049      	lsleq	r1, r1, #1
 8083c1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083c1e:	3b01      	subeq	r3, #1
 8083c20:	d0f9      	beq.n	8083c16 <__aeabi_fmul+0xe6>
 8083c22:	ea41 010c 	orr.w	r1, r1, ip
 8083c26:	e78f      	b.n	8083b48 <__aeabi_fmul+0x18>
 8083c28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083c2c:	ea92 0f0c 	teq	r2, ip
 8083c30:	bf18      	it	ne
 8083c32:	ea93 0f0c 	teqne	r3, ip
 8083c36:	d00a      	beq.n	8083c4e <__aeabi_fmul+0x11e>
 8083c38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083c3c:	bf18      	it	ne
 8083c3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083c42:	d1d8      	bne.n	8083bf6 <__aeabi_fmul+0xc6>
 8083c44:	ea80 0001 	eor.w	r0, r0, r1
 8083c48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083c4c:	4770      	bx	lr
 8083c4e:	f090 0f00 	teq	r0, #0
 8083c52:	bf17      	itett	ne
 8083c54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8083c58:	4608      	moveq	r0, r1
 8083c5a:	f091 0f00 	teqne	r1, #0
 8083c5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8083c62:	d014      	beq.n	8083c8e <__aeabi_fmul+0x15e>
 8083c64:	ea92 0f0c 	teq	r2, ip
 8083c68:	d101      	bne.n	8083c6e <__aeabi_fmul+0x13e>
 8083c6a:	0242      	lsls	r2, r0, #9
 8083c6c:	d10f      	bne.n	8083c8e <__aeabi_fmul+0x15e>
 8083c6e:	ea93 0f0c 	teq	r3, ip
 8083c72:	d103      	bne.n	8083c7c <__aeabi_fmul+0x14c>
 8083c74:	024b      	lsls	r3, r1, #9
 8083c76:	bf18      	it	ne
 8083c78:	4608      	movne	r0, r1
 8083c7a:	d108      	bne.n	8083c8e <__aeabi_fmul+0x15e>
 8083c7c:	ea80 0001 	eor.w	r0, r0, r1
 8083c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083c8c:	4770      	bx	lr
 8083c8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083c92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8083c96:	4770      	bx	lr

08083c98 <__aeabi_fdiv>:
 8083c98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083c9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083ca0:	bf1e      	ittt	ne
 8083ca2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083ca6:	ea92 0f0c 	teqne	r2, ip
 8083caa:	ea93 0f0c 	teqne	r3, ip
 8083cae:	d069      	beq.n	8083d84 <__aeabi_fdiv+0xec>
 8083cb0:	eba2 0203 	sub.w	r2, r2, r3
 8083cb4:	ea80 0c01 	eor.w	ip, r0, r1
 8083cb8:	0249      	lsls	r1, r1, #9
 8083cba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8083cbe:	d037      	beq.n	8083d30 <__aeabi_fdiv+0x98>
 8083cc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8083cc4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8083cc8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8083ccc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083cd0:	428b      	cmp	r3, r1
 8083cd2:	bf38      	it	cc
 8083cd4:	005b      	lslcc	r3, r3, #1
 8083cd6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8083cda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8083cde:	428b      	cmp	r3, r1
 8083ce0:	bf24      	itt	cs
 8083ce2:	1a5b      	subcs	r3, r3, r1
 8083ce4:	ea40 000c 	orrcs.w	r0, r0, ip
 8083ce8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8083cec:	bf24      	itt	cs
 8083cee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8083cf2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083cf6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8083cfa:	bf24      	itt	cs
 8083cfc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8083d00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083d04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8083d08:	bf24      	itt	cs
 8083d0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8083d0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083d12:	011b      	lsls	r3, r3, #4
 8083d14:	bf18      	it	ne
 8083d16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8083d1a:	d1e0      	bne.n	8083cde <__aeabi_fdiv+0x46>
 8083d1c:	2afd      	cmp	r2, #253	; 0xfd
 8083d1e:	f63f af50 	bhi.w	8083bc2 <__aeabi_fmul+0x92>
 8083d22:	428b      	cmp	r3, r1
 8083d24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083d28:	bf08      	it	eq
 8083d2a:	f020 0001 	biceq.w	r0, r0, #1
 8083d2e:	4770      	bx	lr
 8083d30:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083d34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083d38:	327f      	adds	r2, #127	; 0x7f
 8083d3a:	bfc2      	ittt	gt
 8083d3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083d40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083d44:	4770      	bxgt	lr
 8083d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083d4a:	f04f 0300 	mov.w	r3, #0
 8083d4e:	3a01      	subs	r2, #1
 8083d50:	e737      	b.n	8083bc2 <__aeabi_fmul+0x92>
 8083d52:	f092 0f00 	teq	r2, #0
 8083d56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083d5a:	bf02      	ittt	eq
 8083d5c:	0040      	lsleq	r0, r0, #1
 8083d5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083d62:	3a01      	subeq	r2, #1
 8083d64:	d0f9      	beq.n	8083d5a <__aeabi_fdiv+0xc2>
 8083d66:	ea40 000c 	orr.w	r0, r0, ip
 8083d6a:	f093 0f00 	teq	r3, #0
 8083d6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083d72:	bf02      	ittt	eq
 8083d74:	0049      	lsleq	r1, r1, #1
 8083d76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083d7a:	3b01      	subeq	r3, #1
 8083d7c:	d0f9      	beq.n	8083d72 <__aeabi_fdiv+0xda>
 8083d7e:	ea41 010c 	orr.w	r1, r1, ip
 8083d82:	e795      	b.n	8083cb0 <__aeabi_fdiv+0x18>
 8083d84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083d88:	ea92 0f0c 	teq	r2, ip
 8083d8c:	d108      	bne.n	8083da0 <__aeabi_fdiv+0x108>
 8083d8e:	0242      	lsls	r2, r0, #9
 8083d90:	f47f af7d 	bne.w	8083c8e <__aeabi_fmul+0x15e>
 8083d94:	ea93 0f0c 	teq	r3, ip
 8083d98:	f47f af70 	bne.w	8083c7c <__aeabi_fmul+0x14c>
 8083d9c:	4608      	mov	r0, r1
 8083d9e:	e776      	b.n	8083c8e <__aeabi_fmul+0x15e>
 8083da0:	ea93 0f0c 	teq	r3, ip
 8083da4:	d104      	bne.n	8083db0 <__aeabi_fdiv+0x118>
 8083da6:	024b      	lsls	r3, r1, #9
 8083da8:	f43f af4c 	beq.w	8083c44 <__aeabi_fmul+0x114>
 8083dac:	4608      	mov	r0, r1
 8083dae:	e76e      	b.n	8083c8e <__aeabi_fmul+0x15e>
 8083db0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083db4:	bf18      	it	ne
 8083db6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083dba:	d1ca      	bne.n	8083d52 <__aeabi_fdiv+0xba>
 8083dbc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8083dc0:	f47f af5c 	bne.w	8083c7c <__aeabi_fmul+0x14c>
 8083dc4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8083dc8:	f47f af3c 	bne.w	8083c44 <__aeabi_fmul+0x114>
 8083dcc:	e75f      	b.n	8083c8e <__aeabi_fmul+0x15e>
 8083dce:	bf00      	nop

08083dd0 <__gesf2>:
 8083dd0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8083dd4:	e006      	b.n	8083de4 <__cmpsf2+0x4>
 8083dd6:	bf00      	nop

08083dd8 <__lesf2>:
 8083dd8:	f04f 0c01 	mov.w	ip, #1
 8083ddc:	e002      	b.n	8083de4 <__cmpsf2+0x4>
 8083dde:	bf00      	nop

08083de0 <__cmpsf2>:
 8083de0:	f04f 0c01 	mov.w	ip, #1
 8083de4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083de8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8083dec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083df0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083df4:	bf18      	it	ne
 8083df6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083dfa:	d011      	beq.n	8083e20 <__cmpsf2+0x40>
 8083dfc:	b001      	add	sp, #4
 8083dfe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8083e02:	bf18      	it	ne
 8083e04:	ea90 0f01 	teqne	r0, r1
 8083e08:	bf58      	it	pl
 8083e0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8083e0e:	bf88      	it	hi
 8083e10:	17c8      	asrhi	r0, r1, #31
 8083e12:	bf38      	it	cc
 8083e14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8083e18:	bf18      	it	ne
 8083e1a:	f040 0001 	orrne.w	r0, r0, #1
 8083e1e:	4770      	bx	lr
 8083e20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083e24:	d102      	bne.n	8083e2c <__cmpsf2+0x4c>
 8083e26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8083e2a:	d105      	bne.n	8083e38 <__cmpsf2+0x58>
 8083e2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8083e30:	d1e4      	bne.n	8083dfc <__cmpsf2+0x1c>
 8083e32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8083e36:	d0e1      	beq.n	8083dfc <__cmpsf2+0x1c>
 8083e38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8083e3c:	4770      	bx	lr
 8083e3e:	bf00      	nop

08083e40 <__aeabi_cfrcmple>:
 8083e40:	4684      	mov	ip, r0
 8083e42:	4608      	mov	r0, r1
 8083e44:	4661      	mov	r1, ip
 8083e46:	e7ff      	b.n	8083e48 <__aeabi_cfcmpeq>

08083e48 <__aeabi_cfcmpeq>:
 8083e48:	b50f      	push	{r0, r1, r2, r3, lr}
 8083e4a:	f7ff ffc9 	bl	8083de0 <__cmpsf2>
 8083e4e:	2800      	cmp	r0, #0
 8083e50:	bf48      	it	mi
 8083e52:	f110 0f00 	cmnmi.w	r0, #0
 8083e56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08083e58 <__aeabi_fcmpeq>:
 8083e58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083e5c:	f7ff fff4 	bl	8083e48 <__aeabi_cfcmpeq>
 8083e60:	bf0c      	ite	eq
 8083e62:	2001      	moveq	r0, #1
 8083e64:	2000      	movne	r0, #0
 8083e66:	f85d fb08 	ldr.w	pc, [sp], #8
 8083e6a:	bf00      	nop

08083e6c <__aeabi_fcmplt>:
 8083e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083e70:	f7ff ffea 	bl	8083e48 <__aeabi_cfcmpeq>
 8083e74:	bf34      	ite	cc
 8083e76:	2001      	movcc	r0, #1
 8083e78:	2000      	movcs	r0, #0
 8083e7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8083e7e:	bf00      	nop

08083e80 <__aeabi_fcmple>:
 8083e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083e84:	f7ff ffe0 	bl	8083e48 <__aeabi_cfcmpeq>
 8083e88:	bf94      	ite	ls
 8083e8a:	2001      	movls	r0, #1
 8083e8c:	2000      	movhi	r0, #0
 8083e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083e92:	bf00      	nop

08083e94 <__aeabi_fcmpge>:
 8083e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083e98:	f7ff ffd2 	bl	8083e40 <__aeabi_cfrcmple>
 8083e9c:	bf94      	ite	ls
 8083e9e:	2001      	movls	r0, #1
 8083ea0:	2000      	movhi	r0, #0
 8083ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8083ea6:	bf00      	nop

08083ea8 <__aeabi_fcmpgt>:
 8083ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083eac:	f7ff ffc8 	bl	8083e40 <__aeabi_cfrcmple>
 8083eb0:	bf34      	ite	cc
 8083eb2:	2001      	movcc	r0, #1
 8083eb4:	2000      	movcs	r0, #0
 8083eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8083eba:	bf00      	nop

08083ebc <__aeabi_f2iz>:
 8083ebc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8083ec0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8083ec4:	d30f      	bcc.n	8083ee6 <__aeabi_f2iz+0x2a>
 8083ec6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8083eca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8083ece:	d90d      	bls.n	8083eec <__aeabi_f2iz+0x30>
 8083ed0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8083ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083ed8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083edc:	fa23 f002 	lsr.w	r0, r3, r2
 8083ee0:	bf18      	it	ne
 8083ee2:	4240      	negne	r0, r0
 8083ee4:	4770      	bx	lr
 8083ee6:	f04f 0000 	mov.w	r0, #0
 8083eea:	4770      	bx	lr
 8083eec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8083ef0:	d101      	bne.n	8083ef6 <__aeabi_f2iz+0x3a>
 8083ef2:	0242      	lsls	r2, r0, #9
 8083ef4:	d105      	bne.n	8083f02 <__aeabi_f2iz+0x46>
 8083ef6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8083efa:	bf08      	it	eq
 8083efc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083f00:	4770      	bx	lr
 8083f02:	f04f 0000 	mov.w	r0, #0
 8083f06:	4770      	bx	lr

08083f08 <asctime>:
 8083f08:	4b09      	ldr	r3, [pc, #36]	; (8083f30 <asctime+0x28>)
 8083f0a:	b570      	push	{r4, r5, r6, lr}
 8083f0c:	681c      	ldr	r4, [r3, #0]
 8083f0e:	4606      	mov	r6, r0
 8083f10:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8083f12:	b93d      	cbnz	r5, 8083f24 <asctime+0x1c>
 8083f14:	201a      	movs	r0, #26
 8083f16:	f7fd fb41 	bl	808159c <malloc>
 8083f1a:	221a      	movs	r2, #26
 8083f1c:	6420      	str	r0, [r4, #64]	; 0x40
 8083f1e:	4629      	mov	r1, r5
 8083f20:	f000 f943 	bl	80841aa <memset>
 8083f24:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8083f26:	4630      	mov	r0, r6
 8083f28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083f2c:	f000 b802 	b.w	8083f34 <asctime_r>
 8083f30:	200004a0 	.word	0x200004a0

08083f34 <asctime_r>:
 8083f34:	b510      	push	{r4, lr}
 8083f36:	460c      	mov	r4, r1
 8083f38:	6941      	ldr	r1, [r0, #20]
 8083f3a:	b086      	sub	sp, #24
 8083f3c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8083f40:	6903      	ldr	r3, [r0, #16]
 8083f42:	6982      	ldr	r2, [r0, #24]
 8083f44:	9104      	str	r1, [sp, #16]
 8083f46:	6801      	ldr	r1, [r0, #0]
 8083f48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8083f4c:	9103      	str	r1, [sp, #12]
 8083f4e:	6841      	ldr	r1, [r0, #4]
 8083f50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8083f54:	9102      	str	r1, [sp, #8]
 8083f56:	6881      	ldr	r1, [r0, #8]
 8083f58:	9101      	str	r1, [sp, #4]
 8083f5a:	68c1      	ldr	r1, [r0, #12]
 8083f5c:	4620      	mov	r0, r4
 8083f5e:	9100      	str	r1, [sp, #0]
 8083f60:	4904      	ldr	r1, [pc, #16]	; (8083f74 <asctime_r+0x40>)
 8083f62:	440b      	add	r3, r1
 8083f64:	4904      	ldr	r1, [pc, #16]	; (8083f78 <asctime_r+0x44>)
 8083f66:	440a      	add	r2, r1
 8083f68:	4904      	ldr	r1, [pc, #16]	; (8083f7c <asctime_r+0x48>)
 8083f6a:	f7fd fb2f 	bl	80815cc <siprintf>
 8083f6e:	4620      	mov	r0, r4
 8083f70:	b006      	add	sp, #24
 8083f72:	bd10      	pop	{r4, pc}
 8083f74:	08085019 	.word	0x08085019
 8083f78:	08085004 	.word	0x08085004
 8083f7c:	0808503d 	.word	0x0808503d

08083f80 <atoi>:
 8083f80:	220a      	movs	r2, #10
 8083f82:	2100      	movs	r1, #0
 8083f84:	f000 ba26 	b.w	80843d4 <strtol>

08083f88 <__cxa_atexit>:
 8083f88:	b510      	push	{r4, lr}
 8083f8a:	4c05      	ldr	r4, [pc, #20]	; (8083fa0 <__cxa_atexit+0x18>)
 8083f8c:	4613      	mov	r3, r2
 8083f8e:	b12c      	cbz	r4, 8083f9c <__cxa_atexit+0x14>
 8083f90:	460a      	mov	r2, r1
 8083f92:	4601      	mov	r1, r0
 8083f94:	2002      	movs	r0, #2
 8083f96:	f3af 8000 	nop.w
 8083f9a:	bd10      	pop	{r4, pc}
 8083f9c:	4620      	mov	r0, r4
 8083f9e:	bd10      	pop	{r4, pc}
 8083fa0:	00000000 	.word	0x00000000

08083fa4 <localtime>:
 8083fa4:	b538      	push	{r3, r4, r5, lr}
 8083fa6:	4b07      	ldr	r3, [pc, #28]	; (8083fc4 <localtime+0x20>)
 8083fa8:	4605      	mov	r5, r0
 8083faa:	681c      	ldr	r4, [r3, #0]
 8083fac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8083fae:	b91b      	cbnz	r3, 8083fb8 <localtime+0x14>
 8083fb0:	2024      	movs	r0, #36	; 0x24
 8083fb2:	f7fd faf3 	bl	808159c <malloc>
 8083fb6:	63e0      	str	r0, [r4, #60]	; 0x3c
 8083fb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8083fba:	4628      	mov	r0, r5
 8083fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8083fc0:	f000 b802 	b.w	8083fc8 <localtime_r>
 8083fc4:	200004a0 	.word	0x200004a0

08083fc8 <localtime_r>:
 8083fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083fcc:	460c      	mov	r4, r1
 8083fce:	4680      	mov	r8, r0
 8083fd0:	f000 fd06 	bl	80849e0 <__gettzinfo>
 8083fd4:	4621      	mov	r1, r4
 8083fd6:	4607      	mov	r7, r0
 8083fd8:	4640      	mov	r0, r8
 8083fda:	f000 fd05 	bl	80849e8 <gmtime_r>
 8083fde:	6946      	ldr	r6, [r0, #20]
 8083fe0:	4604      	mov	r4, r0
 8083fe2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8083fe6:	07b3      	lsls	r3, r6, #30
 8083fe8:	d105      	bne.n	8083ff6 <localtime_r+0x2e>
 8083fea:	2264      	movs	r2, #100	; 0x64
 8083fec:	fb96 f3f2 	sdiv	r3, r6, r2
 8083ff0:	fb02 6313 	mls	r3, r2, r3, r6
 8083ff4:	b94b      	cbnz	r3, 808400a <localtime_r+0x42>
 8083ff6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8083ffa:	fb96 f3f5 	sdiv	r3, r6, r5
 8083ffe:	fb05 6513 	mls	r5, r5, r3, r6
 8084002:	fab5 f385 	clz	r3, r5
 8084006:	095b      	lsrs	r3, r3, #5
 8084008:	e000      	b.n	808400c <localtime_r+0x44>
 808400a:	2301      	movs	r3, #1
 808400c:	4a5f      	ldr	r2, [pc, #380]	; (808418c <localtime_r+0x1c4>)
 808400e:	2530      	movs	r5, #48	; 0x30
 8084010:	fb05 2503 	mla	r5, r5, r3, r2
 8084014:	f000 fb18 	bl	8084648 <__tz_lock>
 8084018:	f000 fb18 	bl	808464c <_tzset_unlocked>
 808401c:	4b5c      	ldr	r3, [pc, #368]	; (8084190 <localtime_r+0x1c8>)
 808401e:	681b      	ldr	r3, [r3, #0]
 8084020:	b1f3      	cbz	r3, 8084060 <localtime_r+0x98>
 8084022:	687b      	ldr	r3, [r7, #4]
 8084024:	429e      	cmp	r6, r3
 8084026:	d105      	bne.n	8084034 <localtime_r+0x6c>
 8084028:	6839      	ldr	r1, [r7, #0]
 808402a:	f8d8 3000 	ldr.w	r3, [r8]
 808402e:	69fa      	ldr	r2, [r7, #28]
 8084030:	b941      	cbnz	r1, 8084044 <localtime_r+0x7c>
 8084032:	e00a      	b.n	808404a <localtime_r+0x82>
 8084034:	4630      	mov	r0, r6
 8084036:	f000 fa5f 	bl	80844f8 <__tzcalc_limits>
 808403a:	2800      	cmp	r0, #0
 808403c:	d1f4      	bne.n	8084028 <localtime_r+0x60>
 808403e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8084042:	e00d      	b.n	8084060 <localtime_r+0x98>
 8084044:	4293      	cmp	r3, r2
 8084046:	db08      	blt.n	808405a <localtime_r+0x92>
 8084048:	e001      	b.n	808404e <localtime_r+0x86>
 808404a:	4293      	cmp	r3, r2
 808404c:	da07      	bge.n	808405e <localtime_r+0x96>
 808404e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8084050:	4293      	cmp	r3, r2
 8084052:	bfac      	ite	ge
 8084054:	2300      	movge	r3, #0
 8084056:	2301      	movlt	r3, #1
 8084058:	e002      	b.n	8084060 <localtime_r+0x98>
 808405a:	2300      	movs	r3, #0
 808405c:	e000      	b.n	8084060 <localtime_r+0x98>
 808405e:	2301      	movs	r3, #1
 8084060:	6223      	str	r3, [r4, #32]
 8084062:	6a23      	ldr	r3, [r4, #32]
 8084064:	203c      	movs	r0, #60	; 0x3c
 8084066:	2b01      	cmp	r3, #1
 8084068:	bf0c      	ite	eq
 808406a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808406c:	6a39      	ldrne	r1, [r7, #32]
 808406e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8084072:	fb91 f6f3 	sdiv	r6, r1, r3
 8084076:	fb03 1316 	mls	r3, r3, r6, r1
 808407a:	fb93 f2f0 	sdiv	r2, r3, r0
 808407e:	fb00 3012 	mls	r0, r0, r2, r3
 8084082:	6861      	ldr	r1, [r4, #4]
 8084084:	6823      	ldr	r3, [r4, #0]
 8084086:	1a89      	subs	r1, r1, r2
 8084088:	68a2      	ldr	r2, [r4, #8]
 808408a:	1a1b      	subs	r3, r3, r0
 808408c:	1b92      	subs	r2, r2, r6
 808408e:	2b3b      	cmp	r3, #59	; 0x3b
 8084090:	6023      	str	r3, [r4, #0]
 8084092:	6061      	str	r1, [r4, #4]
 8084094:	60a2      	str	r2, [r4, #8]
 8084096:	dd03      	ble.n	80840a0 <localtime_r+0xd8>
 8084098:	3101      	adds	r1, #1
 808409a:	6061      	str	r1, [r4, #4]
 808409c:	3b3c      	subs	r3, #60	; 0x3c
 808409e:	e004      	b.n	80840aa <localtime_r+0xe2>
 80840a0:	2b00      	cmp	r3, #0
 80840a2:	da03      	bge.n	80840ac <localtime_r+0xe4>
 80840a4:	3901      	subs	r1, #1
 80840a6:	6061      	str	r1, [r4, #4]
 80840a8:	333c      	adds	r3, #60	; 0x3c
 80840aa:	6023      	str	r3, [r4, #0]
 80840ac:	6863      	ldr	r3, [r4, #4]
 80840ae:	2b3b      	cmp	r3, #59	; 0x3b
 80840b0:	dd03      	ble.n	80840ba <localtime_r+0xf2>
 80840b2:	3201      	adds	r2, #1
 80840b4:	60a2      	str	r2, [r4, #8]
 80840b6:	3b3c      	subs	r3, #60	; 0x3c
 80840b8:	e004      	b.n	80840c4 <localtime_r+0xfc>
 80840ba:	2b00      	cmp	r3, #0
 80840bc:	da03      	bge.n	80840c6 <localtime_r+0xfe>
 80840be:	3a01      	subs	r2, #1
 80840c0:	60a2      	str	r2, [r4, #8]
 80840c2:	333c      	adds	r3, #60	; 0x3c
 80840c4:	6063      	str	r3, [r4, #4]
 80840c6:	68a3      	ldr	r3, [r4, #8]
 80840c8:	2b17      	cmp	r3, #23
 80840ca:	dd22      	ble.n	8084112 <localtime_r+0x14a>
 80840cc:	69e2      	ldr	r2, [r4, #28]
 80840ce:	3b18      	subs	r3, #24
 80840d0:	3201      	adds	r2, #1
 80840d2:	61e2      	str	r2, [r4, #28]
 80840d4:	69a2      	ldr	r2, [r4, #24]
 80840d6:	60a3      	str	r3, [r4, #8]
 80840d8:	3201      	adds	r2, #1
 80840da:	2a06      	cmp	r2, #6
 80840dc:	bfc8      	it	gt
 80840de:	2200      	movgt	r2, #0
 80840e0:	61a2      	str	r2, [r4, #24]
 80840e2:	68e2      	ldr	r2, [r4, #12]
 80840e4:	6923      	ldr	r3, [r4, #16]
 80840e6:	3201      	adds	r2, #1
 80840e8:	60e2      	str	r2, [r4, #12]
 80840ea:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80840ee:	428a      	cmp	r2, r1
 80840f0:	dd46      	ble.n	8084180 <localtime_r+0x1b8>
 80840f2:	3301      	adds	r3, #1
 80840f4:	2b0c      	cmp	r3, #12
 80840f6:	bf08      	it	eq
 80840f8:	6963      	ldreq	r3, [r4, #20]
 80840fa:	eba2 0201 	sub.w	r2, r2, r1
 80840fe:	60e2      	str	r2, [r4, #12]
 8084100:	bf05      	ittet	eq
 8084102:	3301      	addeq	r3, #1
 8084104:	2200      	moveq	r2, #0
 8084106:	6123      	strne	r3, [r4, #16]
 8084108:	6122      	streq	r2, [r4, #16]
 808410a:	bf04      	itt	eq
 808410c:	6163      	streq	r3, [r4, #20]
 808410e:	61e2      	streq	r2, [r4, #28]
 8084110:	e036      	b.n	8084180 <localtime_r+0x1b8>
 8084112:	2b00      	cmp	r3, #0
 8084114:	da34      	bge.n	8084180 <localtime_r+0x1b8>
 8084116:	69e2      	ldr	r2, [r4, #28]
 8084118:	3318      	adds	r3, #24
 808411a:	3a01      	subs	r2, #1
 808411c:	61e2      	str	r2, [r4, #28]
 808411e:	69a2      	ldr	r2, [r4, #24]
 8084120:	60a3      	str	r3, [r4, #8]
 8084122:	3a01      	subs	r2, #1
 8084124:	bf48      	it	mi
 8084126:	2206      	movmi	r2, #6
 8084128:	61a2      	str	r2, [r4, #24]
 808412a:	68e2      	ldr	r2, [r4, #12]
 808412c:	3a01      	subs	r2, #1
 808412e:	60e2      	str	r2, [r4, #12]
 8084130:	bb32      	cbnz	r2, 8084180 <localtime_r+0x1b8>
 8084132:	6923      	ldr	r3, [r4, #16]
 8084134:	3b01      	subs	r3, #1
 8084136:	d401      	bmi.n	808413c <localtime_r+0x174>
 8084138:	6123      	str	r3, [r4, #16]
 808413a:	e01d      	b.n	8084178 <localtime_r+0x1b0>
 808413c:	230b      	movs	r3, #11
 808413e:	6123      	str	r3, [r4, #16]
 8084140:	6963      	ldr	r3, [r4, #20]
 8084142:	1e5a      	subs	r2, r3, #1
 8084144:	f012 0f03 	tst.w	r2, #3
 8084148:	6162      	str	r2, [r4, #20]
 808414a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808414e:	d105      	bne.n	808415c <localtime_r+0x194>
 8084150:	2164      	movs	r1, #100	; 0x64
 8084152:	fb93 f2f1 	sdiv	r2, r3, r1
 8084156:	fb01 3212 	mls	r2, r1, r2, r3
 808415a:	b94a      	cbnz	r2, 8084170 <localtime_r+0x1a8>
 808415c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8084160:	fb93 f2f1 	sdiv	r2, r3, r1
 8084164:	fb01 3312 	mls	r3, r1, r2, r3
 8084168:	fab3 f383 	clz	r3, r3
 808416c:	095b      	lsrs	r3, r3, #5
 808416e:	e000      	b.n	8084172 <localtime_r+0x1aa>
 8084170:	2301      	movs	r3, #1
 8084172:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8084176:	61e3      	str	r3, [r4, #28]
 8084178:	6923      	ldr	r3, [r4, #16]
 808417a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808417e:	60e3      	str	r3, [r4, #12]
 8084180:	f000 fa63 	bl	808464a <__tz_unlock>
 8084184:	4620      	mov	r0, r4
 8084186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808418a:	bf00      	nop
 808418c:	080851c4 	.word	0x080851c4
 8084190:	20000c00 	.word	0x20000c00

08084194 <memcpy>:
 8084194:	b510      	push	{r4, lr}
 8084196:	1e43      	subs	r3, r0, #1
 8084198:	440a      	add	r2, r1
 808419a:	4291      	cmp	r1, r2
 808419c:	d004      	beq.n	80841a8 <memcpy+0x14>
 808419e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80841a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80841a6:	e7f8      	b.n	808419a <memcpy+0x6>
 80841a8:	bd10      	pop	{r4, pc}

080841aa <memset>:
 80841aa:	4603      	mov	r3, r0
 80841ac:	4402      	add	r2, r0
 80841ae:	4293      	cmp	r3, r2
 80841b0:	d002      	beq.n	80841b8 <memset+0xe>
 80841b2:	f803 1b01 	strb.w	r1, [r3], #1
 80841b6:	e7fa      	b.n	80841ae <memset+0x4>
 80841b8:	4770      	bx	lr
	...

080841bc <srand>:
 80841bc:	b538      	push	{r3, r4, r5, lr}
 80841be:	4b12      	ldr	r3, [pc, #72]	; (8084208 <srand+0x4c>)
 80841c0:	4605      	mov	r5, r0
 80841c2:	681c      	ldr	r4, [r3, #0]
 80841c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80841c6:	b9d3      	cbnz	r3, 80841fe <srand+0x42>
 80841c8:	2018      	movs	r0, #24
 80841ca:	f7fd f9e7 	bl	808159c <malloc>
 80841ce:	f243 330e 	movw	r3, #13070	; 0x330e
 80841d2:	63a0      	str	r0, [r4, #56]	; 0x38
 80841d4:	8003      	strh	r3, [r0, #0]
 80841d6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80841da:	8043      	strh	r3, [r0, #2]
 80841dc:	f241 2334 	movw	r3, #4660	; 0x1234
 80841e0:	8083      	strh	r3, [r0, #4]
 80841e2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80841e6:	80c3      	strh	r3, [r0, #6]
 80841e8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80841ec:	8103      	strh	r3, [r0, #8]
 80841ee:	2305      	movs	r3, #5
 80841f0:	8143      	strh	r3, [r0, #10]
 80841f2:	230b      	movs	r3, #11
 80841f4:	8183      	strh	r3, [r0, #12]
 80841f6:	2201      	movs	r2, #1
 80841f8:	2300      	movs	r3, #0
 80841fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80841fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084200:	2200      	movs	r2, #0
 8084202:	611d      	str	r5, [r3, #16]
 8084204:	615a      	str	r2, [r3, #20]
 8084206:	bd38      	pop	{r3, r4, r5, pc}
 8084208:	200004a0 	.word	0x200004a0

0808420c <strcmp>:
 808420c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8084210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8084214:	2a01      	cmp	r2, #1
 8084216:	bf28      	it	cs
 8084218:	429a      	cmpcs	r2, r3
 808421a:	d0f7      	beq.n	808420c <strcmp>
 808421c:	1ad0      	subs	r0, r2, r3
 808421e:	4770      	bx	lr

08084220 <strcpy>:
 8084220:	4603      	mov	r3, r0
 8084222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084226:	f803 2b01 	strb.w	r2, [r3], #1
 808422a:	2a00      	cmp	r2, #0
 808422c:	d1f9      	bne.n	8084222 <strcpy+0x2>
 808422e:	4770      	bx	lr

08084230 <strdup>:
 8084230:	4b02      	ldr	r3, [pc, #8]	; (808423c <strdup+0xc>)
 8084232:	4601      	mov	r1, r0
 8084234:	6818      	ldr	r0, [r3, #0]
 8084236:	f000 b803 	b.w	8084240 <_strdup_r>
 808423a:	bf00      	nop
 808423c:	200004a0 	.word	0x200004a0

08084240 <_strdup_r>:
 8084240:	b570      	push	{r4, r5, r6, lr}
 8084242:	4606      	mov	r6, r0
 8084244:	4608      	mov	r0, r1
 8084246:	460c      	mov	r4, r1
 8084248:	f000 f80d 	bl	8084266 <strlen>
 808424c:	1c45      	adds	r5, r0, #1
 808424e:	4629      	mov	r1, r5
 8084250:	4630      	mov	r0, r6
 8084252:	f7fd f9db 	bl	808160c <_malloc_r>
 8084256:	4606      	mov	r6, r0
 8084258:	b118      	cbz	r0, 8084262 <_strdup_r+0x22>
 808425a:	462a      	mov	r2, r5
 808425c:	4621      	mov	r1, r4
 808425e:	f7ff ff99 	bl	8084194 <memcpy>
 8084262:	4630      	mov	r0, r6
 8084264:	bd70      	pop	{r4, r5, r6, pc}

08084266 <strlen>:
 8084266:	4603      	mov	r3, r0
 8084268:	f813 2b01 	ldrb.w	r2, [r3], #1
 808426c:	2a00      	cmp	r2, #0
 808426e:	d1fb      	bne.n	8084268 <strlen+0x2>
 8084270:	1a18      	subs	r0, r3, r0
 8084272:	3801      	subs	r0, #1
 8084274:	4770      	bx	lr

08084276 <strncmp>:
 8084276:	b530      	push	{r4, r5, lr}
 8084278:	b182      	cbz	r2, 808429c <strncmp+0x26>
 808427a:	1e45      	subs	r5, r0, #1
 808427c:	3901      	subs	r1, #1
 808427e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8084282:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8084286:	42a3      	cmp	r3, r4
 8084288:	d106      	bne.n	8084298 <strncmp+0x22>
 808428a:	43ec      	mvns	r4, r5
 808428c:	4414      	add	r4, r2
 808428e:	42e0      	cmn	r0, r4
 8084290:	d001      	beq.n	8084296 <strncmp+0x20>
 8084292:	2b00      	cmp	r3, #0
 8084294:	d1f3      	bne.n	808427e <strncmp+0x8>
 8084296:	461c      	mov	r4, r3
 8084298:	1b18      	subs	r0, r3, r4
 808429a:	bd30      	pop	{r4, r5, pc}
 808429c:	4610      	mov	r0, r2
 808429e:	bd30      	pop	{r4, r5, pc}

080842a0 <strncpy>:
 80842a0:	4603      	mov	r3, r0
 80842a2:	b510      	push	{r4, lr}
 80842a4:	b142      	cbz	r2, 80842b8 <strncpy+0x18>
 80842a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80842aa:	3a01      	subs	r2, #1
 80842ac:	f803 4b01 	strb.w	r4, [r3], #1
 80842b0:	2c00      	cmp	r4, #0
 80842b2:	d1f7      	bne.n	80842a4 <strncpy+0x4>
 80842b4:	441a      	add	r2, r3
 80842b6:	e000      	b.n	80842ba <strncpy+0x1a>
 80842b8:	bd10      	pop	{r4, pc}
 80842ba:	4293      	cmp	r3, r2
 80842bc:	d002      	beq.n	80842c4 <strncpy+0x24>
 80842be:	f803 4b01 	strb.w	r4, [r3], #1
 80842c2:	e7fa      	b.n	80842ba <strncpy+0x1a>
 80842c4:	bd10      	pop	{r4, pc}
	...

080842c8 <_strtol_r>:
 80842c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80842cc:	460f      	mov	r7, r1
 80842ce:	4680      	mov	r8, r0
 80842d0:	483f      	ldr	r0, [pc, #252]	; (80843d0 <_strtol_r+0x108>)
 80842d2:	f8d0 9000 	ldr.w	r9, [r0]
 80842d6:	463d      	mov	r5, r7
 80842d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80842dc:	eb09 0004 	add.w	r0, r9, r4
 80842e0:	7840      	ldrb	r0, [r0, #1]
 80842e2:	f000 0008 	and.w	r0, r0, #8
 80842e6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80842ea:	b108      	cbz	r0, 80842f0 <_strtol_r+0x28>
 80842ec:	462f      	mov	r7, r5
 80842ee:	e7f2      	b.n	80842d6 <_strtol_r+0xe>
 80842f0:	2c2d      	cmp	r4, #45	; 0x2d
 80842f2:	d103      	bne.n	80842fc <_strtol_r+0x34>
 80842f4:	1cbd      	adds	r5, r7, #2
 80842f6:	787c      	ldrb	r4, [r7, #1]
 80842f8:	2601      	movs	r6, #1
 80842fa:	e003      	b.n	8084304 <_strtol_r+0x3c>
 80842fc:	2c2b      	cmp	r4, #43	; 0x2b
 80842fe:	bf04      	itt	eq
 8084300:	787c      	ldrbeq	r4, [r7, #1]
 8084302:	1cbd      	addeq	r5, r7, #2
 8084304:	b113      	cbz	r3, 808430c <_strtol_r+0x44>
 8084306:	2b10      	cmp	r3, #16
 8084308:	d10a      	bne.n	8084320 <_strtol_r+0x58>
 808430a:	e05b      	b.n	80843c4 <_strtol_r+0xfc>
 808430c:	2c30      	cmp	r4, #48	; 0x30
 808430e:	d157      	bne.n	80843c0 <_strtol_r+0xf8>
 8084310:	7828      	ldrb	r0, [r5, #0]
 8084312:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084316:	2858      	cmp	r0, #88	; 0x58
 8084318:	d14d      	bne.n	80843b6 <_strtol_r+0xee>
 808431a:	786c      	ldrb	r4, [r5, #1]
 808431c:	2310      	movs	r3, #16
 808431e:	3502      	adds	r5, #2
 8084320:	2e00      	cmp	r6, #0
 8084322:	bf14      	ite	ne
 8084324:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8084328:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 808432c:	fbbc faf3 	udiv	sl, ip, r3
 8084330:	2700      	movs	r7, #0
 8084332:	4638      	mov	r0, r7
 8084334:	fb03 cc1a 	mls	ip, r3, sl, ip
 8084338:	eb09 0e04 	add.w	lr, r9, r4
 808433c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084340:	f01e 0f04 	tst.w	lr, #4
 8084344:	d001      	beq.n	808434a <_strtol_r+0x82>
 8084346:	3c30      	subs	r4, #48	; 0x30
 8084348:	e00b      	b.n	8084362 <_strtol_r+0x9a>
 808434a:	f01e 0e03 	ands.w	lr, lr, #3
 808434e:	d01b      	beq.n	8084388 <_strtol_r+0xc0>
 8084350:	f1be 0f01 	cmp.w	lr, #1
 8084354:	bf0c      	ite	eq
 8084356:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808435a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808435e:	ebce 0404 	rsb	r4, lr, r4
 8084362:	42a3      	cmp	r3, r4
 8084364:	dd10      	ble.n	8084388 <_strtol_r+0xc0>
 8084366:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 808436a:	d00a      	beq.n	8084382 <_strtol_r+0xba>
 808436c:	4550      	cmp	r0, sl
 808436e:	d806      	bhi.n	808437e <_strtol_r+0xb6>
 8084370:	d101      	bne.n	8084376 <_strtol_r+0xae>
 8084372:	4564      	cmp	r4, ip
 8084374:	dc03      	bgt.n	808437e <_strtol_r+0xb6>
 8084376:	fb03 4000 	mla	r0, r3, r0, r4
 808437a:	2701      	movs	r7, #1
 808437c:	e001      	b.n	8084382 <_strtol_r+0xba>
 808437e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084386:	e7d7      	b.n	8084338 <_strtol_r+0x70>
 8084388:	1c7b      	adds	r3, r7, #1
 808438a:	d10c      	bne.n	80843a6 <_strtol_r+0xde>
 808438c:	2e00      	cmp	r6, #0
 808438e:	f04f 0322 	mov.w	r3, #34	; 0x22
 8084392:	bf14      	ite	ne
 8084394:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084398:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808439c:	f8c8 3000 	str.w	r3, [r8]
 80843a0:	b92a      	cbnz	r2, 80843ae <_strtol_r+0xe6>
 80843a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80843a6:	b106      	cbz	r6, 80843aa <_strtol_r+0xe2>
 80843a8:	4240      	negs	r0, r0
 80843aa:	b172      	cbz	r2, 80843ca <_strtol_r+0x102>
 80843ac:	b107      	cbz	r7, 80843b0 <_strtol_r+0xe8>
 80843ae:	1e69      	subs	r1, r5, #1
 80843b0:	6011      	str	r1, [r2, #0]
 80843b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80843b6:	2430      	movs	r4, #48	; 0x30
 80843b8:	2b00      	cmp	r3, #0
 80843ba:	d1b1      	bne.n	8084320 <_strtol_r+0x58>
 80843bc:	2308      	movs	r3, #8
 80843be:	e7af      	b.n	8084320 <_strtol_r+0x58>
 80843c0:	230a      	movs	r3, #10
 80843c2:	e7ad      	b.n	8084320 <_strtol_r+0x58>
 80843c4:	2c30      	cmp	r4, #48	; 0x30
 80843c6:	d0a3      	beq.n	8084310 <_strtol_r+0x48>
 80843c8:	e7aa      	b.n	8084320 <_strtol_r+0x58>
 80843ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80843ce:	bf00      	nop
 80843d0:	2000043c 	.word	0x2000043c

080843d4 <strtol>:
 80843d4:	4613      	mov	r3, r2
 80843d6:	460a      	mov	r2, r1
 80843d8:	4601      	mov	r1, r0
 80843da:	4802      	ldr	r0, [pc, #8]	; (80843e4 <strtol+0x10>)
 80843dc:	6800      	ldr	r0, [r0, #0]
 80843de:	f7ff bf73 	b.w	80842c8 <_strtol_r>
 80843e2:	bf00      	nop
 80843e4:	200004a0 	.word	0x200004a0

080843e8 <_strtoul_r>:
 80843e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80843ec:	460e      	mov	r6, r1
 80843ee:	4680      	mov	r8, r0
 80843f0:	483b      	ldr	r0, [pc, #236]	; (80844e0 <_strtoul_r+0xf8>)
 80843f2:	f8d0 9000 	ldr.w	r9, [r0]
 80843f6:	4635      	mov	r5, r6
 80843f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80843fc:	eb09 0004 	add.w	r0, r9, r4
 8084400:	7840      	ldrb	r0, [r0, #1]
 8084402:	f000 0008 	and.w	r0, r0, #8
 8084406:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808440a:	b108      	cbz	r0, 8084410 <_strtoul_r+0x28>
 808440c:	462e      	mov	r6, r5
 808440e:	e7f2      	b.n	80843f6 <_strtoul_r+0xe>
 8084410:	2c2d      	cmp	r4, #45	; 0x2d
 8084412:	d103      	bne.n	808441c <_strtoul_r+0x34>
 8084414:	1cb5      	adds	r5, r6, #2
 8084416:	7874      	ldrb	r4, [r6, #1]
 8084418:	2701      	movs	r7, #1
 808441a:	e003      	b.n	8084424 <_strtoul_r+0x3c>
 808441c:	2c2b      	cmp	r4, #43	; 0x2b
 808441e:	bf04      	itt	eq
 8084420:	7874      	ldrbeq	r4, [r6, #1]
 8084422:	1cb5      	addeq	r5, r6, #2
 8084424:	b113      	cbz	r3, 808442c <_strtoul_r+0x44>
 8084426:	2b10      	cmp	r3, #16
 8084428:	d10a      	bne.n	8084440 <_strtoul_r+0x58>
 808442a:	e053      	b.n	80844d4 <_strtoul_r+0xec>
 808442c:	2c30      	cmp	r4, #48	; 0x30
 808442e:	d14f      	bne.n	80844d0 <_strtoul_r+0xe8>
 8084430:	7828      	ldrb	r0, [r5, #0]
 8084432:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084436:	2858      	cmp	r0, #88	; 0x58
 8084438:	d145      	bne.n	80844c6 <_strtoul_r+0xde>
 808443a:	786c      	ldrb	r4, [r5, #1]
 808443c:	2310      	movs	r3, #16
 808443e:	3502      	adds	r5, #2
 8084440:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084444:	fbbc fcf3 	udiv	ip, ip, r3
 8084448:	fb03 fa0c 	mul.w	sl, r3, ip
 808444c:	2600      	movs	r6, #0
 808444e:	ea6f 0a0a 	mvn.w	sl, sl
 8084452:	4630      	mov	r0, r6
 8084454:	eb09 0e04 	add.w	lr, r9, r4
 8084458:	f89e e001 	ldrb.w	lr, [lr, #1]
 808445c:	f01e 0f04 	tst.w	lr, #4
 8084460:	d001      	beq.n	8084466 <_strtoul_r+0x7e>
 8084462:	3c30      	subs	r4, #48	; 0x30
 8084464:	e00b      	b.n	808447e <_strtoul_r+0x96>
 8084466:	f01e 0e03 	ands.w	lr, lr, #3
 808446a:	d01a      	beq.n	80844a2 <_strtoul_r+0xba>
 808446c:	f1be 0f01 	cmp.w	lr, #1
 8084470:	bf0c      	ite	eq
 8084472:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084476:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808447a:	ebce 0404 	rsb	r4, lr, r4
 808447e:	42a3      	cmp	r3, r4
 8084480:	dd0f      	ble.n	80844a2 <_strtoul_r+0xba>
 8084482:	2e00      	cmp	r6, #0
 8084484:	db08      	blt.n	8084498 <_strtoul_r+0xb0>
 8084486:	4560      	cmp	r0, ip
 8084488:	d806      	bhi.n	8084498 <_strtoul_r+0xb0>
 808448a:	d101      	bne.n	8084490 <_strtoul_r+0xa8>
 808448c:	4554      	cmp	r4, sl
 808448e:	dc03      	bgt.n	8084498 <_strtoul_r+0xb0>
 8084490:	fb03 4000 	mla	r0, r3, r0, r4
 8084494:	2601      	movs	r6, #1
 8084496:	e001      	b.n	808449c <_strtoul_r+0xb4>
 8084498:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 808449c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80844a0:	e7d8      	b.n	8084454 <_strtoul_r+0x6c>
 80844a2:	2e00      	cmp	r6, #0
 80844a4:	da07      	bge.n	80844b6 <_strtoul_r+0xce>
 80844a6:	2322      	movs	r3, #34	; 0x22
 80844a8:	f8c8 3000 	str.w	r3, [r8]
 80844ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80844b0:	b92a      	cbnz	r2, 80844be <_strtoul_r+0xd6>
 80844b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80844b6:	b107      	cbz	r7, 80844ba <_strtoul_r+0xd2>
 80844b8:	4240      	negs	r0, r0
 80844ba:	b172      	cbz	r2, 80844da <_strtoul_r+0xf2>
 80844bc:	b106      	cbz	r6, 80844c0 <_strtoul_r+0xd8>
 80844be:	1e69      	subs	r1, r5, #1
 80844c0:	6011      	str	r1, [r2, #0]
 80844c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80844c6:	2430      	movs	r4, #48	; 0x30
 80844c8:	2b00      	cmp	r3, #0
 80844ca:	d1b9      	bne.n	8084440 <_strtoul_r+0x58>
 80844cc:	2308      	movs	r3, #8
 80844ce:	e7b7      	b.n	8084440 <_strtoul_r+0x58>
 80844d0:	230a      	movs	r3, #10
 80844d2:	e7b5      	b.n	8084440 <_strtoul_r+0x58>
 80844d4:	2c30      	cmp	r4, #48	; 0x30
 80844d6:	d0ab      	beq.n	8084430 <_strtoul_r+0x48>
 80844d8:	e7b2      	b.n	8084440 <_strtoul_r+0x58>
 80844da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80844de:	bf00      	nop
 80844e0:	2000043c 	.word	0x2000043c

080844e4 <strtoul>:
 80844e4:	4613      	mov	r3, r2
 80844e6:	460a      	mov	r2, r1
 80844e8:	4601      	mov	r1, r0
 80844ea:	4802      	ldr	r0, [pc, #8]	; (80844f4 <strtoul+0x10>)
 80844ec:	6800      	ldr	r0, [r0, #0]
 80844ee:	f7ff bf7b 	b.w	80843e8 <_strtoul_r>
 80844f2:	bf00      	nop
 80844f4:	200004a0 	.word	0x200004a0

080844f8 <__tzcalc_limits>:
 80844f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80844fc:	4604      	mov	r4, r0
 80844fe:	f000 fa6f 	bl	80849e0 <__gettzinfo>
 8084502:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8084506:	429c      	cmp	r4, r3
 8084508:	f340 8096 	ble.w	8084638 <__tzcalc_limits+0x140>
 808450c:	f240 156d 	movw	r5, #365	; 0x16d
 8084510:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8084514:	18e3      	adds	r3, r4, r3
 8084516:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808451a:	109b      	asrs	r3, r3, #2
 808451c:	fb05 3502 	mla	r5, r5, r2, r3
 8084520:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8084524:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8084528:	fb92 f3f3 	sdiv	r3, r2, r3
 808452c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8084530:	442b      	add	r3, r5
 8084532:	18a5      	adds	r5, r4, r2
 8084534:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084538:	fb94 f7f2 	sdiv	r7, r4, r2
 808453c:	fb95 f5f2 	sdiv	r5, r5, r2
 8084540:	fb02 4717 	mls	r7, r2, r7, r4
 8084544:	441d      	add	r5, r3
 8084546:	2364      	movs	r3, #100	; 0x64
 8084548:	fb94 f6f3 	sdiv	r6, r4, r3
 808454c:	fab7 fe87 	clz	lr, r7
 8084550:	4601      	mov	r1, r0
 8084552:	fb03 4616 	mls	r6, r3, r6, r4
 8084556:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808455a:	9301      	str	r3, [sp, #4]
 808455c:	f004 0303 	and.w	r3, r4, #3
 8084560:	6044      	str	r4, [r0, #4]
 8084562:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8084566:	9300      	str	r3, [sp, #0]
 8084568:	f04f 0c07 	mov.w	ip, #7
 808456c:	7a0b      	ldrb	r3, [r1, #8]
 808456e:	2b4a      	cmp	r3, #74	; 0x4a
 8084570:	d10e      	bne.n	8084590 <__tzcalc_limits+0x98>
 8084572:	694b      	ldr	r3, [r1, #20]
 8084574:	9a00      	ldr	r2, [sp, #0]
 8084576:	18ec      	adds	r4, r5, r3
 8084578:	b902      	cbnz	r2, 808457c <__tzcalc_limits+0x84>
 808457a:	b906      	cbnz	r6, 808457e <__tzcalc_limits+0x86>
 808457c:	b927      	cbnz	r7, 8084588 <__tzcalc_limits+0x90>
 808457e:	2b3b      	cmp	r3, #59	; 0x3b
 8084580:	bfd4      	ite	le
 8084582:	2300      	movle	r3, #0
 8084584:	2301      	movgt	r3, #1
 8084586:	e000      	b.n	808458a <__tzcalc_limits+0x92>
 8084588:	2300      	movs	r3, #0
 808458a:	4423      	add	r3, r4
 808458c:	3b01      	subs	r3, #1
 808458e:	e03f      	b.n	8084610 <__tzcalc_limits+0x118>
 8084590:	2b44      	cmp	r3, #68	; 0x44
 8084592:	d102      	bne.n	808459a <__tzcalc_limits+0xa2>
 8084594:	694b      	ldr	r3, [r1, #20]
 8084596:	442b      	add	r3, r5
 8084598:	e03a      	b.n	8084610 <__tzcalc_limits+0x118>
 808459a:	9b00      	ldr	r3, [sp, #0]
 808459c:	b92b      	cbnz	r3, 80845aa <__tzcalc_limits+0xb2>
 808459e:	2e00      	cmp	r6, #0
 80845a0:	bf0c      	ite	eq
 80845a2:	46f0      	moveq	r8, lr
 80845a4:	f04f 0801 	movne.w	r8, #1
 80845a8:	e000      	b.n	80845ac <__tzcalc_limits+0xb4>
 80845aa:	46f0      	mov	r8, lr
 80845ac:	46a9      	mov	r9, r5
 80845ae:	4b24      	ldr	r3, [pc, #144]	; (8084640 <__tzcalc_limits+0x148>)
 80845b0:	2230      	movs	r2, #48	; 0x30
 80845b2:	fb02 3808 	mla	r8, r2, r8, r3
 80845b6:	68cc      	ldr	r4, [r1, #12]
 80845b8:	f1a8 0a04 	sub.w	sl, r8, #4
 80845bc:	2301      	movs	r3, #1
 80845be:	42a3      	cmp	r3, r4
 80845c0:	da04      	bge.n	80845cc <__tzcalc_limits+0xd4>
 80845c2:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80845c6:	3301      	adds	r3, #1
 80845c8:	44d9      	add	r9, fp
 80845ca:	e7f8      	b.n	80845be <__tzcalc_limits+0xc6>
 80845cc:	f109 0304 	add.w	r3, r9, #4
 80845d0:	fb93 fbfc 	sdiv	fp, r3, ip
 80845d4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80845d8:	ebca 0a03 	rsb	sl, sl, r3
 80845dc:	694b      	ldr	r3, [r1, #20]
 80845de:	2c01      	cmp	r4, #1
 80845e0:	bfb8      	it	lt
 80845e2:	2401      	movlt	r4, #1
 80845e4:	ebb3 0a0a 	subs.w	sl, r3, sl
 80845e8:	690b      	ldr	r3, [r1, #16]
 80845ea:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80845ee:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80845f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80845f6:	bf48      	it	mi
 80845f8:	f10a 0a07 	addmi.w	sl, sl, #7
 80845fc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084600:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8084604:	4453      	add	r3, sl
 8084606:	42a3      	cmp	r3, r4
 8084608:	db01      	blt.n	808460e <__tzcalc_limits+0x116>
 808460a:	3b07      	subs	r3, #7
 808460c:	e7fb      	b.n	8084606 <__tzcalc_limits+0x10e>
 808460e:	444b      	add	r3, r9
 8084610:	698c      	ldr	r4, [r1, #24]
 8084612:	4a0c      	ldr	r2, [pc, #48]	; (8084644 <__tzcalc_limits+0x14c>)
 8084614:	fb02 4303 	mla	r3, r2, r3, r4
 8084618:	6a0c      	ldr	r4, [r1, #32]
 808461a:	4423      	add	r3, r4
 808461c:	f841 3f1c 	str.w	r3, [r1, #28]!
 8084620:	9b01      	ldr	r3, [sp, #4]
 8084622:	4299      	cmp	r1, r3
 8084624:	d1a2      	bne.n	808456c <__tzcalc_limits+0x74>
 8084626:	69c3      	ldr	r3, [r0, #28]
 8084628:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808462a:	4293      	cmp	r3, r2
 808462c:	bfac      	ite	ge
 808462e:	2300      	movge	r3, #0
 8084630:	2301      	movlt	r3, #1
 8084632:	6003      	str	r3, [r0, #0]
 8084634:	2001      	movs	r0, #1
 8084636:	e000      	b.n	808463a <__tzcalc_limits+0x142>
 8084638:	2000      	movs	r0, #0
 808463a:	b003      	add	sp, #12
 808463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084640:	080851c4 	.word	0x080851c4
 8084644:	00015180 	.word	0x00015180

08084648 <__tz_lock>:
 8084648:	4770      	bx	lr

0808464a <__tz_unlock>:
 808464a:	4770      	bx	lr

0808464c <_tzset_unlocked>:
 808464c:	4b01      	ldr	r3, [pc, #4]	; (8084654 <_tzset_unlocked+0x8>)
 808464e:	6818      	ldr	r0, [r3, #0]
 8084650:	f000 b802 	b.w	8084658 <_tzset_unlocked_r>
 8084654:	200004a0 	.word	0x200004a0

08084658 <_tzset_unlocked_r>:
 8084658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808465c:	b08d      	sub	sp, #52	; 0x34
 808465e:	4607      	mov	r7, r0
 8084660:	f000 f9be 	bl	80849e0 <__gettzinfo>
 8084664:	49b0      	ldr	r1, [pc, #704]	; (8084928 <_tzset_unlocked_r+0x2d0>)
 8084666:	4604      	mov	r4, r0
 8084668:	4638      	mov	r0, r7
 808466a:	f000 f9b1 	bl	80849d0 <_getenv_r>
 808466e:	4eaf      	ldr	r6, [pc, #700]	; (808492c <_tzset_unlocked_r+0x2d4>)
 8084670:	4605      	mov	r5, r0
 8084672:	b960      	cbnz	r0, 808468e <_tzset_unlocked_r+0x36>
 8084674:	4bae      	ldr	r3, [pc, #696]	; (8084930 <_tzset_unlocked_r+0x2d8>)
 8084676:	4aaf      	ldr	r2, [pc, #700]	; (8084934 <_tzset_unlocked_r+0x2dc>)
 8084678:	6018      	str	r0, [r3, #0]
 808467a:	4baf      	ldr	r3, [pc, #700]	; (8084938 <_tzset_unlocked_r+0x2e0>)
 808467c:	6018      	str	r0, [r3, #0]
 808467e:	4baf      	ldr	r3, [pc, #700]	; (808493c <_tzset_unlocked_r+0x2e4>)
 8084680:	6830      	ldr	r0, [r6, #0]
 8084682:	601a      	str	r2, [r3, #0]
 8084684:	605a      	str	r2, [r3, #4]
 8084686:	f7fc ff91 	bl	80815ac <free>
 808468a:	6035      	str	r5, [r6, #0]
 808468c:	e148      	b.n	8084920 <_tzset_unlocked_r+0x2c8>
 808468e:	6831      	ldr	r1, [r6, #0]
 8084690:	b979      	cbnz	r1, 80846b2 <_tzset_unlocked_r+0x5a>
 8084692:	6830      	ldr	r0, [r6, #0]
 8084694:	f7fc ff8a 	bl	80815ac <free>
 8084698:	4628      	mov	r0, r5
 808469a:	f7ff fde4 	bl	8084266 <strlen>
 808469e:	1c41      	adds	r1, r0, #1
 80846a0:	4638      	mov	r0, r7
 80846a2:	f7fc ffb3 	bl	808160c <_malloc_r>
 80846a6:	6030      	str	r0, [r6, #0]
 80846a8:	b148      	cbz	r0, 80846be <_tzset_unlocked_r+0x66>
 80846aa:	4629      	mov	r1, r5
 80846ac:	f7ff fdb8 	bl	8084220 <strcpy>
 80846b0:	e005      	b.n	80846be <_tzset_unlocked_r+0x66>
 80846b2:	f7ff fdab 	bl	808420c <strcmp>
 80846b6:	2800      	cmp	r0, #0
 80846b8:	f000 8132 	beq.w	8084920 <_tzset_unlocked_r+0x2c8>
 80846bc:	e7e9      	b.n	8084692 <_tzset_unlocked_r+0x3a>
 80846be:	782b      	ldrb	r3, [r5, #0]
 80846c0:	ae0a      	add	r6, sp, #40	; 0x28
 80846c2:	2b3a      	cmp	r3, #58	; 0x3a
 80846c4:	bf08      	it	eq
 80846c6:	3501      	addeq	r5, #1
 80846c8:	4633      	mov	r3, r6
 80846ca:	4a9d      	ldr	r2, [pc, #628]	; (8084940 <_tzset_unlocked_r+0x2e8>)
 80846cc:	499d      	ldr	r1, [pc, #628]	; (8084944 <_tzset_unlocked_r+0x2ec>)
 80846ce:	4628      	mov	r0, r5
 80846d0:	f7fc ff84 	bl	80815dc <siscanf>
 80846d4:	2800      	cmp	r0, #0
 80846d6:	f340 8123 	ble.w	8084920 <_tzset_unlocked_r+0x2c8>
 80846da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80846dc:	18ef      	adds	r7, r5, r3
 80846de:	5ceb      	ldrb	r3, [r5, r3]
 80846e0:	2b2d      	cmp	r3, #45	; 0x2d
 80846e2:	d103      	bne.n	80846ec <_tzset_unlocked_r+0x94>
 80846e4:	3701      	adds	r7, #1
 80846e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80846ea:	e003      	b.n	80846f4 <_tzset_unlocked_r+0x9c>
 80846ec:	2b2b      	cmp	r3, #43	; 0x2b
 80846ee:	bf08      	it	eq
 80846f0:	3701      	addeq	r7, #1
 80846f2:	2501      	movs	r5, #1
 80846f4:	f10d 0a20 	add.w	sl, sp, #32
 80846f8:	f10d 0b1e 	add.w	fp, sp, #30
 80846fc:	f04f 0800 	mov.w	r8, #0
 8084700:	9603      	str	r6, [sp, #12]
 8084702:	f8cd a008 	str.w	sl, [sp, #8]
 8084706:	9601      	str	r6, [sp, #4]
 8084708:	f8cd b000 	str.w	fp, [sp]
 808470c:	4633      	mov	r3, r6
 808470e:	aa07      	add	r2, sp, #28
 8084710:	498d      	ldr	r1, [pc, #564]	; (8084948 <_tzset_unlocked_r+0x2f0>)
 8084712:	4638      	mov	r0, r7
 8084714:	f8ad 801e 	strh.w	r8, [sp, #30]
 8084718:	f8ad 8020 	strh.w	r8, [sp, #32]
 808471c:	f7fc ff5e 	bl	80815dc <siscanf>
 8084720:	4540      	cmp	r0, r8
 8084722:	f340 80fd 	ble.w	8084920 <_tzset_unlocked_r+0x2c8>
 8084726:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808472a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808472e:	213c      	movs	r1, #60	; 0x3c
 8084730:	fb01 3302 	mla	r3, r1, r2, r3
 8084734:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084738:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808473c:	fb01 3302 	mla	r3, r1, r2, r3
 8084740:	435d      	muls	r5, r3
 8084742:	4b7f      	ldr	r3, [pc, #508]	; (8084940 <_tzset_unlocked_r+0x2e8>)
 8084744:	6225      	str	r5, [r4, #32]
 8084746:	4d7d      	ldr	r5, [pc, #500]	; (808493c <_tzset_unlocked_r+0x2e4>)
 8084748:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8084954 <_tzset_unlocked_r+0x2fc>
 808474c:	602b      	str	r3, [r5, #0]
 808474e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084750:	464a      	mov	r2, r9
 8084752:	441f      	add	r7, r3
 8084754:	497b      	ldr	r1, [pc, #492]	; (8084944 <_tzset_unlocked_r+0x2ec>)
 8084756:	4633      	mov	r3, r6
 8084758:	4638      	mov	r0, r7
 808475a:	f7fc ff3f 	bl	80815dc <siscanf>
 808475e:	4540      	cmp	r0, r8
 8084760:	dc08      	bgt.n	8084774 <_tzset_unlocked_r+0x11c>
 8084762:	682b      	ldr	r3, [r5, #0]
 8084764:	6a22      	ldr	r2, [r4, #32]
 8084766:	606b      	str	r3, [r5, #4]
 8084768:	4b71      	ldr	r3, [pc, #452]	; (8084930 <_tzset_unlocked_r+0x2d8>)
 808476a:	601a      	str	r2, [r3, #0]
 808476c:	4b72      	ldr	r3, [pc, #456]	; (8084938 <_tzset_unlocked_r+0x2e0>)
 808476e:	f8c3 8000 	str.w	r8, [r3]
 8084772:	e0d5      	b.n	8084920 <_tzset_unlocked_r+0x2c8>
 8084774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084776:	f8c5 9004 	str.w	r9, [r5, #4]
 808477a:	18fd      	adds	r5, r7, r3
 808477c:	5cfb      	ldrb	r3, [r7, r3]
 808477e:	2b2d      	cmp	r3, #45	; 0x2d
 8084780:	d103      	bne.n	808478a <_tzset_unlocked_r+0x132>
 8084782:	3501      	adds	r5, #1
 8084784:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084788:	e003      	b.n	8084792 <_tzset_unlocked_r+0x13a>
 808478a:	2b2b      	cmp	r3, #43	; 0x2b
 808478c:	bf08      	it	eq
 808478e:	3501      	addeq	r5, #1
 8084790:	2701      	movs	r7, #1
 8084792:	2300      	movs	r3, #0
 8084794:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084798:	f8ad 301e 	strh.w	r3, [sp, #30]
 808479c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80847a0:	930a      	str	r3, [sp, #40]	; 0x28
 80847a2:	9603      	str	r6, [sp, #12]
 80847a4:	f8cd a008 	str.w	sl, [sp, #8]
 80847a8:	9601      	str	r6, [sp, #4]
 80847aa:	f8cd b000 	str.w	fp, [sp]
 80847ae:	4633      	mov	r3, r6
 80847b0:	aa07      	add	r2, sp, #28
 80847b2:	4965      	ldr	r1, [pc, #404]	; (8084948 <_tzset_unlocked_r+0x2f0>)
 80847b4:	4628      	mov	r0, r5
 80847b6:	f7fc ff11 	bl	80815dc <siscanf>
 80847ba:	2800      	cmp	r0, #0
 80847bc:	dc04      	bgt.n	80847c8 <_tzset_unlocked_r+0x170>
 80847be:	6a23      	ldr	r3, [r4, #32]
 80847c0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80847c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80847c6:	e00e      	b.n	80847e6 <_tzset_unlocked_r+0x18e>
 80847c8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80847cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80847d0:	213c      	movs	r1, #60	; 0x3c
 80847d2:	fb01 3302 	mla	r3, r1, r2, r3
 80847d6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80847da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80847de:	fb01 3302 	mla	r3, r1, r2, r3
 80847e2:	435f      	muls	r7, r3
 80847e4:	63e7      	str	r7, [r4, #60]	; 0x3c
 80847e6:	4627      	mov	r7, r4
 80847e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80847ea:	f04f 0900 	mov.w	r9, #0
 80847ee:	441d      	add	r5, r3
 80847f0:	782b      	ldrb	r3, [r5, #0]
 80847f2:	2b2c      	cmp	r3, #44	; 0x2c
 80847f4:	bf08      	it	eq
 80847f6:	3501      	addeq	r5, #1
 80847f8:	f895 8000 	ldrb.w	r8, [r5]
 80847fc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8084800:	d126      	bne.n	8084850 <_tzset_unlocked_r+0x1f8>
 8084802:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8084806:	9302      	str	r3, [sp, #8]
 8084808:	ab09      	add	r3, sp, #36	; 0x24
 808480a:	9300      	str	r3, [sp, #0]
 808480c:	9603      	str	r6, [sp, #12]
 808480e:	9601      	str	r6, [sp, #4]
 8084810:	4633      	mov	r3, r6
 8084812:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8084816:	494d      	ldr	r1, [pc, #308]	; (808494c <_tzset_unlocked_r+0x2f4>)
 8084818:	4628      	mov	r0, r5
 808481a:	f7fc fedf 	bl	80815dc <siscanf>
 808481e:	2803      	cmp	r0, #3
 8084820:	d17e      	bne.n	8084920 <_tzset_unlocked_r+0x2c8>
 8084822:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8084826:	1e4b      	subs	r3, r1, #1
 8084828:	2b0b      	cmp	r3, #11
 808482a:	d879      	bhi.n	8084920 <_tzset_unlocked_r+0x2c8>
 808482c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8084830:	1e53      	subs	r3, r2, #1
 8084832:	2b04      	cmp	r3, #4
 8084834:	d874      	bhi.n	8084920 <_tzset_unlocked_r+0x2c8>
 8084836:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808483a:	2b06      	cmp	r3, #6
 808483c:	d870      	bhi.n	8084920 <_tzset_unlocked_r+0x2c8>
 808483e:	f887 8008 	strb.w	r8, [r7, #8]
 8084842:	60f9      	str	r1, [r7, #12]
 8084844:	613a      	str	r2, [r7, #16]
 8084846:	617b      	str	r3, [r7, #20]
 8084848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808484a:	eb05 0803 	add.w	r8, r5, r3
 808484e:	e02a      	b.n	80848a6 <_tzset_unlocked_r+0x24e>
 8084850:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8084854:	bf06      	itte	eq
 8084856:	4643      	moveq	r3, r8
 8084858:	3501      	addeq	r5, #1
 808485a:	2344      	movne	r3, #68	; 0x44
 808485c:	220a      	movs	r2, #10
 808485e:	a90b      	add	r1, sp, #44	; 0x2c
 8084860:	4628      	mov	r0, r5
 8084862:	9305      	str	r3, [sp, #20]
 8084864:	f7ff fe3e 	bl	80844e4 <strtoul>
 8084868:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808486c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8084870:	4545      	cmp	r5, r8
 8084872:	9b05      	ldr	r3, [sp, #20]
 8084874:	d114      	bne.n	80848a0 <_tzset_unlocked_r+0x248>
 8084876:	234d      	movs	r3, #77	; 0x4d
 8084878:	f1b9 0f00 	cmp.w	r9, #0
 808487c:	d107      	bne.n	808488e <_tzset_unlocked_r+0x236>
 808487e:	7223      	strb	r3, [r4, #8]
 8084880:	2303      	movs	r3, #3
 8084882:	60e3      	str	r3, [r4, #12]
 8084884:	2302      	movs	r3, #2
 8084886:	6123      	str	r3, [r4, #16]
 8084888:	f8c4 9014 	str.w	r9, [r4, #20]
 808488c:	e00b      	b.n	80848a6 <_tzset_unlocked_r+0x24e>
 808488e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8084892:	230b      	movs	r3, #11
 8084894:	62a3      	str	r3, [r4, #40]	; 0x28
 8084896:	2301      	movs	r3, #1
 8084898:	62e3      	str	r3, [r4, #44]	; 0x2c
 808489a:	2300      	movs	r3, #0
 808489c:	6323      	str	r3, [r4, #48]	; 0x30
 808489e:	e002      	b.n	80848a6 <_tzset_unlocked_r+0x24e>
 80848a0:	b280      	uxth	r0, r0
 80848a2:	723b      	strb	r3, [r7, #8]
 80848a4:	6178      	str	r0, [r7, #20]
 80848a6:	2302      	movs	r3, #2
 80848a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80848ac:	2300      	movs	r3, #0
 80848ae:	f8ad 301e 	strh.w	r3, [sp, #30]
 80848b2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80848b6:	930a      	str	r3, [sp, #40]	; 0x28
 80848b8:	f898 3000 	ldrb.w	r3, [r8]
 80848bc:	2b2f      	cmp	r3, #47	; 0x2f
 80848be:	d10b      	bne.n	80848d8 <_tzset_unlocked_r+0x280>
 80848c0:	9603      	str	r6, [sp, #12]
 80848c2:	f8cd a008 	str.w	sl, [sp, #8]
 80848c6:	9601      	str	r6, [sp, #4]
 80848c8:	f8cd b000 	str.w	fp, [sp]
 80848cc:	4633      	mov	r3, r6
 80848ce:	aa07      	add	r2, sp, #28
 80848d0:	491f      	ldr	r1, [pc, #124]	; (8084950 <_tzset_unlocked_r+0x2f8>)
 80848d2:	4640      	mov	r0, r8
 80848d4:	f7fc fe82 	bl	80815dc <siscanf>
 80848d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80848dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80848e0:	213c      	movs	r1, #60	; 0x3c
 80848e2:	fb01 3302 	mla	r3, r1, r2, r3
 80848e6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80848ea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80848ee:	fb01 3302 	mla	r3, r1, r2, r3
 80848f2:	61bb      	str	r3, [r7, #24]
 80848f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80848f6:	f109 0901 	add.w	r9, r9, #1
 80848fa:	f1b9 0f02 	cmp.w	r9, #2
 80848fe:	4445      	add	r5, r8
 8084900:	f107 071c 	add.w	r7, r7, #28
 8084904:	f47f af74 	bne.w	80847f0 <_tzset_unlocked_r+0x198>
 8084908:	6860      	ldr	r0, [r4, #4]
 808490a:	f7ff fdf5 	bl	80844f8 <__tzcalc_limits>
 808490e:	6a22      	ldr	r2, [r4, #32]
 8084910:	4b07      	ldr	r3, [pc, #28]	; (8084930 <_tzset_unlocked_r+0x2d8>)
 8084912:	601a      	str	r2, [r3, #0]
 8084914:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084916:	1a9b      	subs	r3, r3, r2
 8084918:	4a07      	ldr	r2, [pc, #28]	; (8084938 <_tzset_unlocked_r+0x2e0>)
 808491a:	bf18      	it	ne
 808491c:	2301      	movne	r3, #1
 808491e:	6013      	str	r3, [r2, #0]
 8084920:	b00d      	add	sp, #52	; 0x34
 8084922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084926:	bf00      	nop
 8084928:	08085224 	.word	0x08085224
 808492c:	20000bfc 	.word	0x20000bfc
 8084930:	20000c04 	.word	0x20000c04
 8084934:	08085227 	.word	0x08085227
 8084938:	20000c00 	.word	0x20000c00
 808493c:	200004a4 	.word	0x200004a4
 8084940:	20000bef 	.word	0x20000bef
 8084944:	0808522b 	.word	0x0808522b
 8084948:	0808524e 	.word	0x0808524e
 808494c:	0808523a 	.word	0x0808523a
 8084950:	0808524d 	.word	0x0808524d
 8084954:	20000be4 	.word	0x20000be4

08084958 <_findenv_r>:
 8084958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808495c:	4607      	mov	r7, r0
 808495e:	468b      	mov	fp, r1
 8084960:	4690      	mov	r8, r2
 8084962:	f000 f8d7 	bl	8084b14 <__env_lock>
 8084966:	4b19      	ldr	r3, [pc, #100]	; (80849cc <_findenv_r+0x74>)
 8084968:	681d      	ldr	r5, [r3, #0]
 808496a:	469a      	mov	sl, r3
 808496c:	b13d      	cbz	r5, 808497e <_findenv_r+0x26>
 808496e:	465c      	mov	r4, fp
 8084970:	4623      	mov	r3, r4
 8084972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084976:	b142      	cbz	r2, 808498a <_findenv_r+0x32>
 8084978:	2a3d      	cmp	r2, #61	; 0x3d
 808497a:	461c      	mov	r4, r3
 808497c:	d1f8      	bne.n	8084970 <_findenv_r+0x18>
 808497e:	4638      	mov	r0, r7
 8084980:	f000 f8c9 	bl	8084b16 <__env_unlock>
 8084984:	2000      	movs	r0, #0
 8084986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808498a:	ebcb 0404 	rsb	r4, fp, r4
 808498e:	46a9      	mov	r9, r5
 8084990:	f859 0b04 	ldr.w	r0, [r9], #4
 8084994:	2800      	cmp	r0, #0
 8084996:	d0f2      	beq.n	808497e <_findenv_r+0x26>
 8084998:	4622      	mov	r2, r4
 808499a:	4659      	mov	r1, fp
 808499c:	f7ff fc6b 	bl	8084276 <strncmp>
 80849a0:	b988      	cbnz	r0, 80849c6 <_findenv_r+0x6e>
 80849a2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80849a6:	191e      	adds	r6, r3, r4
 80849a8:	5d1b      	ldrb	r3, [r3, r4]
 80849aa:	2b3d      	cmp	r3, #61	; 0x3d
 80849ac:	d10b      	bne.n	80849c6 <_findenv_r+0x6e>
 80849ae:	f8da 3000 	ldr.w	r3, [sl]
 80849b2:	4638      	mov	r0, r7
 80849b4:	1aed      	subs	r5, r5, r3
 80849b6:	10ad      	asrs	r5, r5, #2
 80849b8:	f8c8 5000 	str.w	r5, [r8]
 80849bc:	f000 f8ab 	bl	8084b16 <__env_unlock>
 80849c0:	1c70      	adds	r0, r6, #1
 80849c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80849c6:	464d      	mov	r5, r9
 80849c8:	e7e1      	b.n	808498e <_findenv_r+0x36>
 80849ca:	bf00      	nop
 80849cc:	200004ec 	.word	0x200004ec

080849d0 <_getenv_r>:
 80849d0:	b507      	push	{r0, r1, r2, lr}
 80849d2:	aa01      	add	r2, sp, #4
 80849d4:	f7ff ffc0 	bl	8084958 <_findenv_r>
 80849d8:	b003      	add	sp, #12
 80849da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080849e0 <__gettzinfo>:
 80849e0:	4800      	ldr	r0, [pc, #0]	; (80849e4 <__gettzinfo+0x4>)
 80849e2:	4770      	bx	lr
 80849e4:	200004ac 	.word	0x200004ac

080849e8 <gmtime_r>:
 80849e8:	6802      	ldr	r2, [r0, #0]
 80849ea:	4b46      	ldr	r3, [pc, #280]	; (8084b04 <gmtime_r+0x11c>)
 80849ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80849ee:	fb92 f4f3 	sdiv	r4, r2, r3
 80849f2:	fb03 2214 	mls	r2, r3, r4, r2
 80849f6:	2a00      	cmp	r2, #0
 80849f8:	bfbc      	itt	lt
 80849fa:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80849fe:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8084a02:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8084a06:	fb92 f3f0 	sdiv	r3, r2, r0
 8084a0a:	fb00 2213 	mls	r2, r0, r3, r2
 8084a0e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8084a12:	608b      	str	r3, [r1, #8]
 8084a14:	fb92 f3f0 	sdiv	r3, r2, r0
 8084a18:	fb00 2213 	mls	r2, r0, r3, r2
 8084a1c:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8084a20:	bfac      	ite	ge
 8084a22:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8084a26:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8084a2a:	604b      	str	r3, [r1, #4]
 8084a2c:	600a      	str	r2, [r1, #0]
 8084a2e:	2307      	movs	r3, #7
 8084a30:	1ce2      	adds	r2, r4, #3
 8084a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8084a36:	4d34      	ldr	r5, [pc, #208]	; (8084b08 <gmtime_r+0x120>)
 8084a38:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084a3c:	fb94 f5f5 	sdiv	r5, r4, r5
 8084a40:	1ad3      	subs	r3, r2, r3
 8084a42:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8084a46:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8084a4a:	618b      	str	r3, [r1, #24]
 8084a4c:	4b2f      	ldr	r3, [pc, #188]	; (8084b0c <gmtime_r+0x124>)
 8084a4e:	4830      	ldr	r0, [pc, #192]	; (8084b10 <gmtime_r+0x128>)
 8084a50:	fb03 4405 	mla	r4, r3, r5, r4
 8084a54:	fbb4 f2f2 	udiv	r2, r4, r2
 8084a58:	fbb4 f3f7 	udiv	r3, r4, r7
 8084a5c:	fbb4 f0f0 	udiv	r0, r4, r0
 8084a60:	4422      	add	r2, r4
 8084a62:	1ad2      	subs	r2, r2, r3
 8084a64:	f648 6694 	movw	r6, #36500	; 0x8e94
 8084a68:	1a13      	subs	r3, r2, r0
 8084a6a:	f240 126d 	movw	r2, #365	; 0x16d
 8084a6e:	fbb3 f6f6 	udiv	r6, r3, r6
 8084a72:	fbb3 f0f2 	udiv	r0, r3, r2
 8084a76:	fbb3 f3f7 	udiv	r3, r3, r7
 8084a7a:	4434      	add	r4, r6
 8084a7c:	1ae3      	subs	r3, r4, r3
 8084a7e:	fb02 3310 	mls	r3, r2, r0, r3
 8084a82:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8084a86:	2499      	movs	r4, #153	; 0x99
 8084a88:	3202      	adds	r2, #2
 8084a8a:	fbb2 f2f4 	udiv	r2, r2, r4
 8084a8e:	4354      	muls	r4, r2
 8084a90:	1ca6      	adds	r6, r4, #2
 8084a92:	2405      	movs	r4, #5
 8084a94:	fbb6 f4f4 	udiv	r4, r6, r4
 8084a98:	2a0a      	cmp	r2, #10
 8084a9a:	bf34      	ite	cc
 8084a9c:	2602      	movcc	r6, #2
 8084a9e:	f06f 0609 	mvncs.w	r6, #9
 8084aa2:	4416      	add	r6, r2
 8084aa4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084aa8:	fb02 0505 	mla	r5, r2, r5, r0
 8084aac:	1c5f      	adds	r7, r3, #1
 8084aae:	2e01      	cmp	r6, #1
 8084ab0:	bf98      	it	ls
 8084ab2:	3501      	addls	r5, #1
 8084ab4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8084ab8:	eba7 0704 	sub.w	r7, r7, r4
 8084abc:	d302      	bcc.n	8084ac4 <gmtime_r+0xdc>
 8084abe:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8084ac2:	e014      	b.n	8084aee <gmtime_r+0x106>
 8084ac4:	0782      	lsls	r2, r0, #30
 8084ac6:	d105      	bne.n	8084ad4 <gmtime_r+0xec>
 8084ac8:	2464      	movs	r4, #100	; 0x64
 8084aca:	fbb0 f2f4 	udiv	r2, r0, r4
 8084ace:	fb04 0212 	mls	r2, r4, r2, r0
 8084ad2:	b94a      	cbnz	r2, 8084ae8 <gmtime_r+0x100>
 8084ad4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084ad8:	fbb0 f4f2 	udiv	r4, r0, r2
 8084adc:	fb02 0014 	mls	r0, r2, r4, r0
 8084ae0:	fab0 f280 	clz	r2, r0
 8084ae4:	0952      	lsrs	r2, r2, #5
 8084ae6:	e000      	b.n	8084aea <gmtime_r+0x102>
 8084ae8:	2201      	movs	r2, #1
 8084aea:	333b      	adds	r3, #59	; 0x3b
 8084aec:	441a      	add	r2, r3
 8084aee:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8084af2:	2300      	movs	r3, #0
 8084af4:	61ca      	str	r2, [r1, #28]
 8084af6:	614d      	str	r5, [r1, #20]
 8084af8:	610e      	str	r6, [r1, #16]
 8084afa:	60cf      	str	r7, [r1, #12]
 8084afc:	620b      	str	r3, [r1, #32]
 8084afe:	4608      	mov	r0, r1
 8084b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084b02:	bf00      	nop
 8084b04:	00015180 	.word	0x00015180
 8084b08:	00023ab1 	.word	0x00023ab1
 8084b0c:	fffdc54f 	.word	0xfffdc54f
 8084b10:	00023ab0 	.word	0x00023ab0

08084b14 <__env_lock>:
 8084b14:	4770      	bx	lr

08084b16 <__env_unlock>:
 8084b16:	4770      	bx	lr

08084b18 <dynalib_user>:
 8084b18:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8084b28:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
 8084b38:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
 8084b6c:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
 8084b7c:	3225 302e 2566 2025 4100 2b54 4643 4e55     %2.0f%% .AT+CFUN
 8084b8c:	313d 0d36 000a 227b 6554 706d 7265 7461     =16...{"Temperat
 8084b9c:	7275 2265 253a 2e34 6631 202c 4822 6d75     ure":%4.1f, "Hum
 8084bac:	6469 7469 2279 253a 2e34 6631 202c 4222     idity":%4.1f, "B
 8084bbc:	7461 6574 7972 3a22 6925 202c 5222 7365     attery":%i, "Res
 8084bcc:	7465 2273 253a 2c69 2220 6c41 7265 7374     ets":%i, "Alerts
 8084bdc:	3a22 6925 007d 6543 6c6c 6c75 7261 535f     ":%i}.Cellular_S
 8084bec:	696f 5f6c 6f48 6b6f 4500 7272 726f 7420     oil_Hook.Error t
 8084bfc:	6b61 6e69 2067 654d 7361 7275 6d65 6e65     aking Measuremen
 8084c0c:	7374 5300 6174 6574 4700 696f 676e 7420     ts.State.Going t
 8084c1c:	206f 6c53 6565 0070 6f4c 2077 6142 7474     o Sleep.Low Batt
 8084c2c:	7265 2079 202d 6c53 6565 6970 676e 5200     ery - Sleeping.R
 8084c3c:	7065 726f 6974 676e 4900 6c64 0065 7245     eporting.Idle.Er
 8084c4c:	6f72 2072 202d 6552 6f70 7472 6e69 2067     ror - Reporting 
 8084c5c:	6954 656d 2064 754f 0074 5245 4f52 5f52     Timed Out.ERROR_
 8084c6c:	5453 5441 2045 202d 6552 6573 7474 6e69     STATE - Resettin
 8084c7c:	0067 6f4e 4420 7461 0061 6255 6469 746f     g.No Data.Ubidot
 8084c8c:	2073 6f48 6b6f 5200 7365 6f70 736e 2065     s Hook.Response 
 8084c9c:	6552 6563 7669 6465 5300 7465 5320 6c6f     Received.Set Sol
 8084cac:	7261 5020 776f 7265 6465 4d20 646f 0065     ar Powered Mode.
 8084cbc:	6c43 6165 6572 2064 6f53 616c 2072 6f50     Cleared Solar Po
 8084ccc:	6577 6572 2064 6f4d 6564 5300 7465 5620     wered Mode.Set V
 8084cdc:	7265 6f62 6573 4d20 646f 0065 6c43 6165     erbose Mode.Clea
 8084cec:	6572 2064 6556 6272 736f 2065 6f4d 6564     red Verbose Mode
 8084cfc:	5400 6d69 2065 6f7a 656e 6f20 6666 6573     .Time zone offse
 8084d0c:	2074 6925 5400 6d69 0065 6f4c 2077 6f50     t %i.Time.Low Po
 8084d1c:	6577 0072 6f4e 6d72 6c61 4f20 6570 6172     wer.Normal Opera
 8084d2c:	6974 6e6f 0073 6953 6e67 6c61 5200 7365     tions.Signal.Res
 8084d3c:	7465 6f43 6e75 0074 6552 656c 7361 0065     etCount.Release.
 8084d4c:	7473 7461 4f65 4366 6768 6c00 776f 6f50     stateOfChg.lowPo
 8084d5c:	6577 4d72 646f 0065 6574 706d 7265 7461     werMode.temperat
 8084d6c:	7275 0065 7568 696d 6964 7974 4d00 6165     ure.humidity.Mea
 8084d7c:	7573 6572 4e2d 776f 4c00 776f 6f50 6577     sure-Now.LowPowe
 8084d8c:	4d72 646f 0065 6f53 616c 2d72 6f4d 6564     rMode.Solar-Mode
 8084d9c:	5600 7265 6f62 6573 4d2d 646f 0065 6553     .Verbose-Mode.Se
 8084dac:	5474 6d69 5a65 6e6f 0065 7453 7261 7574     tTimeZone.Startu
 8084dbc:	0070 6e55 6e6b 776f 006e 6f4e 656e 5700     p.Unknown.None.W
 8084dcc:	4669 0069 5347 004d 4d55 5354 4300 4d44     iFi.GSM.UMTS.CDM
 8084ddc:	0041 544c 0045 4549 4545 3038 3132 3435     A.LTE.IEEE802154
 8084dec:	3100 302e 0030 0000                         .1.00...

08084df4 <_ZTVN5spark13CellularClassE>:
	...
 8084dfc:	1649 0808                                   I...

08084e00 <_ZTV14CellularSignal>:
	...
 8084e08:	1705 0808 1787 0808 1707 0808 17c5 0808     ................
 8084e18:	170d 0808 1795 0808 1731 0808 1755 0808     ........1...U...
 8084e28:	fffc ffff 0000 0000 177f 0808               ............

08084e34 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8084e3c:	180d 0808 1813 0808 183b 0808 181f 0808     ........;.......
 8084e4c:	180f 0808                                   ....

08084e50 <_ZTV7TwoWire>:
	...
 8084e58:	1e8d 0808 1ed7 0808 1eaf 0808 1e8f 0808     ................
 8084e68:	1eb7 0808 1ebf 0808 1ec7 0808 1ecf 0808     ................

08084e78 <_ZTV9IPAddress>:
	...
 8084e80:	1fd7 0808 1fc9 0808 1fcb 0808 0066 6e6c     ............f.ln
 8084e90:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 8084ea0:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
 8084eb0:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 8084ec0:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
 8084ed0:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 8084ee0:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 8084ef0:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 8084f00:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 8084f10:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 8084f20:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 8084f30:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 8084f40:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
 8084f50:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 8084f60:	6170 696e 0063 6c61 006c 0000               panic.all...

08084f6c <_ZTV8SPIClass>:
	...
 8084f74:	24d9 0808 24db 0808 2b25 3330 3a64 3025     .$...$..%+03d:%0
 8084f84:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8084f94:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08084fa4 <_ZTV11USARTSerial>:
	...
 8084fac:	2875 0808 2899 0808 28a5 0808 23bf 0808     u(...(...(...#..
 8084fbc:	2881 0808 288d 0808 2887 0808 2893 0808     .(...(...(...(..
 8084fcc:	2877 0808 287b 0808                         w(..{(..

08084fd4 <_ZTV9USBSerial>:
	...
 8084fdc:	294d 0808 2991 0808 296b 0808 23bf 0808     M)...)..k)...#..
 8084fec:	2965 0808 294f 0808 2957 0808 298b 0808     e)..O)..W)...)..
 8084ffc:	295f 0808 2949 0808                         _)..I)..

08085004 <day_name.4723>:
 8085004:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8085014:	6972 6153 4a74                                   riSat

08085019 <mon_name.4724>:
 8085019:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8085029:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8085039:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8085049:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8085059:	6425 000a                                   %d..

0808505d <_ctype_>:
 808505d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808506d:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808507d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808508d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808509d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80850ad:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80850bd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80850cd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80850dd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08085160 <__sf_fake_stdin>:
	...

08085180 <__sf_fake_stdout>:
	...

080851a0 <__sf_fake_stderr>:
	...
 80851c0:	0043 0000                                   C...

080851c4 <__month_lengths>:
 80851c4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80851d4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80851e4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80851f4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8085204:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085214:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085224:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8085234:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8085244:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8085254:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08085260 <link_const_variable_data_end>:
 8085260:	08080d81 	.word	0x08080d81
 8085264:	080810e1 	.word	0x080810e1
 8085268:	080816c9 	.word	0x080816c9
 808526c:	08082039 	.word	0x08082039
 8085270:	080824bd 	.word	0x080824bd
 8085274:	08082699 	.word	0x08082699
 8085278:	08082861 	.word	0x08082861
 808527c:	08082db5 	.word	0x08082db5
 8085280:	08082de5 	.word	0x08082de5
 8085284:	08082e51 	.word	0x08082e51
 8085288:	08082f15 	.word	0x08082f15
 808528c:	08082f99 	.word	0x08082f99
 8085290:	0808301d 	.word	0x0808301d

08085294 <link_constructors_end>:
	...
